// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from ClusterMessages.proto</summary>
  internal static partial class ClusterMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for ClusterMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVDbHVzdGVyTWVzc2FnZXMucHJvdG8SJEFra2EuQ2x1c3Rlci5TZXJpYWxp",
            "emF0aW9uLlByb3RvLk1zZxoWQ29udGFpbmVyRm9ybWF0cy5wcm90byJYCgRK",
            "b2luEkEKBG5vZGUYASABKAsyMy5Ba2thLkNsdXN0ZXIuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5Nc2cuVW5pcXVlQWRkcmVzcxINCgVyb2xlcxgCIAMoCSKKAQoH",
            "V2VsY29tZRJBCgRmcm9tGAEgASgLMjMuQWtrYS5DbHVzdGVyLlNlcmlhbGl6",
            "YXRpb24uUHJvdG8uTXNnLlVuaXF1ZUFkZHJlc3MSPAoGZ29zc2lwGAIgASgL",
            "MiwuQWtrYS5DbHVzdGVyLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkdvc3Np",
            "cCKuAQoOR29zc2lwRW52ZWxvcGUSQQoEZnJvbRgBIAEoCzIzLkFra2EuQ2x1",
            "c3Rlci5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5VbmlxdWVBZGRyZXNzEj8K",
            "AnRvGAIgASgLMjMuQWtrYS5DbHVzdGVyLlNlcmlhbGl6YXRpb24uUHJvdG8u",
            "TXNnLlVuaXF1ZUFkZHJlc3MSGAoQc2VyaWFsaXplZEdvc3NpcBgDIAEoDCKo",
            "AQoMR29zc2lwU3RhdHVzEkEKBGZyb20YASABKAsyMy5Ba2thLkNsdXN0ZXIu",
            "U2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuVW5pcXVlQWRkcmVzcxIRCglhbGxI",
            "YXNoZXMYAiADKAkSQgoHdmVyc2lvbhgDIAEoCzIxLkFra2EuQ2x1c3Rlci5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLk1zZy5WZWN0b3JDbG9jayLDAgoGR29zc2lw",
            "EkkKDGFsbEFkZHJlc3NlcxgBIAMoCzIzLkFra2EuQ2x1c3Rlci5TZXJpYWxp",
            "emF0aW9uLlByb3RvLk1zZy5VbmlxdWVBZGRyZXNzEhAKCGFsbFJvbGVzGAIg",
            "AygJEhEKCWFsbEhhc2hlcxgDIAMoCRI9CgdtZW1iZXJzGAQgAygLMiwuQWtr",
            "YS5DbHVzdGVyLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk1lbWJlchJGCghv",
            "dmVydmlldxgFIAEoCzI0LkFra2EuQ2x1c3Rlci5TZXJpYWxpemF0aW9uLlBy",
            "b3RvLk1zZy5Hb3NzaXBPdmVydmlldxJCCgd2ZXJzaW9uGAYgASgLMjEuQWtr",
            "YS5DbHVzdGVyLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLlZlY3RvckNsb2Nr",
            "IngKDkdvc3NpcE92ZXJ2aWV3EgwKBHNlZW4YASADKAUSWAoUb2JzZXJ2ZXJS",
            "ZWFjaGFiaWxpdHkYAiADKAsyOi5Ba2thLkNsdXN0ZXIuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5Nc2cuT2JzZXJ2ZXJSZWFjaGFiaWxpdHkilQEKFE9ic2VydmVy",
            "UmVhY2hhYmlsaXR5EhQKDGFkZHJlc3NJbmRleBgBIAEoBRIPCgd2ZXJzaW9u",
            "GAQgASgDElYKE3N1YmplY3RSZWFjaGFiaWxpdHkYAiADKAsyOS5Ba2thLkNs",
            "dXN0ZXIuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuU3ViamVjdFJlYWNoYWJp",
            "bGl0eSLgAQoTU3ViamVjdFJlYWNoYWJpbGl0eRIUCgxhZGRyZXNzSW5kZXgY",
            "ASABKAUSXAoGc3RhdHVzGAMgASgOMkwuQWtrYS5DbHVzdGVyLlNlcmlhbGl6",
            "YXRpb24uUHJvdG8uTXNnLlN1YmplY3RSZWFjaGFiaWxpdHkuUmVhY2hhYmls",
            "aXR5U3RhdHVzEg8KB3ZlcnNpb24YBCABKAMiRAoSUmVhY2hhYmlsaXR5U3Rh",
            "dHVzEg0KCVJlYWNoYWJsZRAAEg8KC1VucmVhY2hhYmxlEAESDgoKVGVybWlu",
            "YXRlZBACIvkBCgZNZW1iZXISFAoMYWRkcmVzc0luZGV4GAEgASgFEhAKCHVw",
            "TnVtYmVyGAIgASgFEkkKBnN0YXR1cxgDIAEoDjI5LkFra2EuQ2x1c3Rlci5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLk1zZy5NZW1iZXIuTWVtYmVyU3RhdHVzEhgK",
            "DHJvbGVzSW5kZXhlcxgEIAMoBUICEAEiYgoMTWVtYmVyU3RhdHVzEgsKB0pv",
            "aW5pbmcQABIGCgJVcBABEgsKB0xlYXZpbmcQAhILCgdFeGl0aW5nEAMSCAoE",
            "RG93bhAEEgsKB1JlbW92ZWQQBRIMCghXZWFrbHlVcBAGIp4BCgtWZWN0b3JD",
            "bG9jaxIRCgl0aW1lc3RhbXAYASABKAMSSwoIdmVyc2lvbnMYAiADKAsyOS5B",
            "a2thLkNsdXN0ZXIuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuVmVjdG9yQ2xv",
            "Y2suVmVyc2lvbhovCgdWZXJzaW9uEhEKCWhhc2hJbmRleBgBIAEoBRIRCgl0",
            "aW1lc3RhbXAYAiABKAMiXwoNVW5pcXVlQWRkcmVzcxJBCgdhZGRyZXNzGAEg",
            "ASgLMjAuQWtrYS5SZW1vdGUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuQWRk",
            "cmVzc0RhdGESCwoDdWlkGAIgASgNIqABChFDbHVzdGVyUm91dGVyUG9vbBI4",
            "CgRwb29sGAEgASgLMiouQWtrYS5DbHVzdGVyLlNlcmlhbGl6YXRpb24uUHJv",
            "dG8uTXNnLlBvb2wSUQoIc2V0dGluZ3MYAiABKAsyPy5Ba2thLkNsdXN0ZXIu",
            "U2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuQ2x1c3RlclJvdXRlclBvb2xTZXR0",
            "aW5ncyI8CgRQb29sEhQKDHNlcmlhbGl6ZXJJZBgBIAEoDRIQCghtYW5pZmVz",
            "dBgCIAEoCRIMCgRkYXRhGAMgASgMInwKGUNsdXN0ZXJSb3V0ZXJQb29sU2V0",
            "dGluZ3MSFgoOdG90YWxJbnN0YW5jZXMYASABKA0SGwoTbWF4SW5zdGFuY2Vz",
            "UGVyTm9kZRgCIAEoDRIZChFhbGxvd0xvY2FsUm91dGVlcxgDIAEoCBIPCgd1",
            "c2VSb2xlGAQgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.Join), global::Akka.Cluster.Serialization.Proto.Msg.Join.Parser, new[]{ "Node", "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.Welcome), global::Akka.Cluster.Serialization.Proto.Msg.Welcome.Parser, new[]{ "From", "Gossip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.GossipEnvelope), global::Akka.Cluster.Serialization.Proto.Msg.GossipEnvelope.Parser, new[]{ "From", "To", "SerializedGossip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.GossipStatus), global::Akka.Cluster.Serialization.Proto.Msg.GossipStatus.Parser, new[]{ "From", "AllHashes", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.Gossip), global::Akka.Cluster.Serialization.Proto.Msg.Gossip.Parser, new[]{ "AllAddresses", "AllRoles", "AllHashes", "Members", "Overview", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview), global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview.Parser, new[]{ "Seen", "ObserverReachability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability), global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability.Parser, new[]{ "AddressIndex", "Version", "SubjectReachability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability), global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Parser, new[]{ "AddressIndex", "Status", "Version" }, null, new[]{ typeof(global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.Member), global::Akka.Cluster.Serialization.Proto.Msg.Member.Parser, new[]{ "AddressIndex", "UpNumber", "Status", "RolesIndexes" }, null, new[]{ typeof(global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.VectorClock), global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Parser, new[]{ "Timestamp", "Versions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version), global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version.Parser, new[]{ "HashIndex", "Timestamp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress), global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress.Parser, new[]{ "Address", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPool), global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPool.Parser, new[]{ "Pool", "Settings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.Pool), global::Akka.Cluster.Serialization.Proto.Msg.Pool.Parser, new[]{ "SerializerId", "Manifest", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings), global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings.Parser, new[]{ "TotalInstances", "MaxInstancesPerNode", "AllowLocalRoutees", "UseRole" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Join
  /// </summary>
  internal sealed partial class Join : pb::IMessage<Join> {
    private static readonly pb::MessageParser<Join> _parser = new pb::MessageParser<Join>(() => new Join());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Join> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join(Join other) : this() {
      Node = other.node_ != null ? other.Node.Clone() : null;
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join Clone() {
      return new Join(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_roles_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> roles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Join);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Join other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Join other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
        }
        Node.MergeFrom(other.Node);
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(node_);
            break;
          }
          case 18: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Welcome, reply to Join
  /// </summary>
  internal sealed partial class Welcome : pb::IMessage<Welcome> {
    private static readonly pb::MessageParser<Welcome> _parser = new pb::MessageParser<Welcome>(() => new Welcome());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Welcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Welcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Welcome(Welcome other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      Gossip = other.gossip_ != null ? other.Gossip.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Welcome Clone() {
      return new Welcome(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "gossip" field.</summary>
    public const int GossipFieldNumber = 2;
    private global::Akka.Cluster.Serialization.Proto.Msg.Gossip gossip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.Gossip Gossip {
      get { return gossip_; }
      set {
        gossip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Welcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Welcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(Gossip, other.Gossip)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (gossip_ != null) hash ^= Gossip.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (gossip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Gossip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (gossip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gossip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Welcome other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      if (other.gossip_ != null) {
        if (gossip_ == null) {
          gossip_ = new global::Akka.Cluster.Serialization.Proto.Msg.Gossip();
        }
        Gossip.MergeFrom(other.Gossip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (gossip_ == null) {
              gossip_ = new global::Akka.Cluster.Serialization.Proto.Msg.Gossip();
            }
            input.ReadMessage(gossip_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip Envelope
  /// </summary>
  internal sealed partial class GossipEnvelope : pb::IMessage<GossipEnvelope> {
    private static readonly pb::MessageParser<GossipEnvelope> _parser = new pb::MessageParser<GossipEnvelope>(() => new GossipEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GossipEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipEnvelope(GossipEnvelope other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
      serializedGossip_ = other.serializedGossip_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipEnvelope Clone() {
      return new GossipEnvelope(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "serializedGossip" field.</summary>
    public const int SerializedGossipFieldNumber = 3;
    private pb::ByteString serializedGossip_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SerializedGossip {
      get { return serializedGossip_; }
      set {
        serializedGossip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GossipEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GossipEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (SerializedGossip != other.SerializedGossip) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (SerializedGossip.Length != 0) hash ^= SerializedGossip.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (SerializedGossip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SerializedGossip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (SerializedGossip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SerializedGossip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GossipEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
        }
        To.MergeFrom(other.To);
      }
      if (other.SerializedGossip.Length != 0) {
        SerializedGossip = other.SerializedGossip;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (to_ == null) {
              to_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(to_);
            break;
          }
          case 26: {
            SerializedGossip = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip Status
  /// </summary>
  internal sealed partial class GossipStatus : pb::IMessage<GossipStatus> {
    private static readonly pb::MessageParser<GossipStatus> _parser = new pb::MessageParser<GossipStatus>(() => new GossipStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GossipStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipStatus(GossipStatus other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      allHashes_ = other.allHashes_.Clone();
      Version = other.version_ != null ? other.Version.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipStatus Clone() {
      return new GossipStatus(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "allHashes" field.</summary>
    public const int AllHashesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_allHashes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> allHashes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllHashes {
      get { return allHashes_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private global::Akka.Cluster.Serialization.Proto.Msg.VectorClock version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.VectorClock Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GossipStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GossipStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if(!allHashes_.Equals(other.allHashes_)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      hash ^= allHashes_.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      allHashes_.WriteTo(output, _repeated_allHashes_codec);
      if (version_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      size += allHashes_.CalculateSize(_repeated_allHashes_codec);
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GossipStatus other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      allHashes_.Add(other.allHashes_);
      if (other.version_ != null) {
        if (version_ == null) {
          version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();
        }
        Version.MergeFrom(other.Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            allHashes_.AddEntriesFrom(input, _repeated_allHashes_codec);
            break;
          }
          case 26: {
            if (version_ == null) {
              version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();
            }
            input.ReadMessage(version_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip
  /// </summary>
  internal sealed partial class Gossip : pb::IMessage<Gossip> {
    private static readonly pb::MessageParser<Gossip> _parser = new pb::MessageParser<Gossip>(() => new Gossip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gossip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gossip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gossip(Gossip other) : this() {
      allAddresses_ = other.allAddresses_.Clone();
      allRoles_ = other.allRoles_.Clone();
      allHashes_ = other.allHashes_.Clone();
      members_ = other.members_.Clone();
      Overview = other.overview_ != null ? other.Overview.Clone() : null;
      Version = other.version_ != null ? other.Version.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gossip Clone() {
      return new Gossip(this);
    }

    /// <summary>Field number for the "allAddresses" field.</summary>
    public const int AllAddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress> _repeated_allAddresses_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress> allAddresses_ = new pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress> AllAddresses {
      get { return allAddresses_; }
    }

    /// <summary>Field number for the "allRoles" field.</summary>
    public const int AllRolesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_allRoles_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> allRoles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllRoles {
      get { return allRoles_; }
    }

    /// <summary>Field number for the "allHashes" field.</summary>
    public const int AllHashesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_allHashes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> allHashes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllHashes {
      get { return allHashes_; }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Serialization.Proto.Msg.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Akka.Cluster.Serialization.Proto.Msg.Member.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.Member> members_ = new pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.Member> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "overview" field.</summary>
    public const int OverviewFieldNumber = 5;
    private global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview overview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview Overview {
      get { return overview_; }
      set {
        overview_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private global::Akka.Cluster.Serialization.Proto.Msg.VectorClock version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.VectorClock Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gossip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gossip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allAddresses_.Equals(other.allAddresses_)) return false;
      if(!allRoles_.Equals(other.allRoles_)) return false;
      if(!allHashes_.Equals(other.allHashes_)) return false;
      if(!members_.Equals(other.members_)) return false;
      if (!object.Equals(Overview, other.Overview)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allAddresses_.GetHashCode();
      hash ^= allRoles_.GetHashCode();
      hash ^= allHashes_.GetHashCode();
      hash ^= members_.GetHashCode();
      if (overview_ != null) hash ^= Overview.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allAddresses_.WriteTo(output, _repeated_allAddresses_codec);
      allRoles_.WriteTo(output, _repeated_allRoles_codec);
      allHashes_.WriteTo(output, _repeated_allHashes_codec);
      members_.WriteTo(output, _repeated_members_codec);
      if (overview_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Overview);
      }
      if (version_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allAddresses_.CalculateSize(_repeated_allAddresses_codec);
      size += allRoles_.CalculateSize(_repeated_allRoles_codec);
      size += allHashes_.CalculateSize(_repeated_allHashes_codec);
      size += members_.CalculateSize(_repeated_members_codec);
      if (overview_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Overview);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gossip other) {
      if (other == null) {
        return;
      }
      allAddresses_.Add(other.allAddresses_);
      allRoles_.Add(other.allRoles_);
      allHashes_.Add(other.allHashes_);
      members_.Add(other.members_);
      if (other.overview_ != null) {
        if (overview_ == null) {
          overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();
        }
        Overview.MergeFrom(other.Overview);
      }
      if (other.version_ != null) {
        if (version_ == null) {
          version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();
        }
        Version.MergeFrom(other.Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allAddresses_.AddEntriesFrom(input, _repeated_allAddresses_codec);
            break;
          }
          case 18: {
            allRoles_.AddEntriesFrom(input, _repeated_allRoles_codec);
            break;
          }
          case 26: {
            allHashes_.AddEntriesFrom(input, _repeated_allHashes_codec);
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 42: {
            if (overview_ == null) {
              overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();
            }
            input.ReadMessage(overview_);
            break;
          }
          case 50: {
            if (version_ == null) {
              version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();
            }
            input.ReadMessage(version_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip Overview
  /// </summary>
  internal sealed partial class GossipOverview : pb::IMessage<GossipOverview> {
    private static readonly pb::MessageParser<GossipOverview> _parser = new pb::MessageParser<GossipOverview>(() => new GossipOverview());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GossipOverview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipOverview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipOverview(GossipOverview other) : this() {
      seen_ = other.seen_.Clone();
      observerReachability_ = other.observerReachability_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GossipOverview Clone() {
      return new GossipOverview(this);
    }

    /// <summary>Field number for the "seen" field.</summary>
    public const int SeenFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_seen_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> seen_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// This is the address indexes for the nodes that have seen this gossip 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Seen {
      get { return seen_; }
    }

    /// <summary>Field number for the "observerReachability" field.</summary>
    public const int ObserverReachabilityFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability> _repeated_observerReachability_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability> observerReachability_ = new pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.ObserverReachability> ObserverReachability {
      get { return observerReachability_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GossipOverview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GossipOverview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!seen_.Equals(other.seen_)) return false;
      if(!observerReachability_.Equals(other.observerReachability_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= seen_.GetHashCode();
      hash ^= observerReachability_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      seen_.WriteTo(output, _repeated_seen_codec);
      observerReachability_.WriteTo(output, _repeated_observerReachability_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += seen_.CalculateSize(_repeated_seen_codec);
      size += observerReachability_.CalculateSize(_repeated_observerReachability_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GossipOverview other) {
      if (other == null) {
        return;
      }
      seen_.Add(other.seen_);
      observerReachability_.Add(other.observerReachability_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            seen_.AddEntriesFrom(input, _repeated_seen_codec);
            break;
          }
          case 18: {
            observerReachability_.AddEntriesFrom(input, _repeated_observerReachability_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Reachability
  /// </summary>
  internal sealed partial class ObserverReachability : pb::IMessage<ObserverReachability> {
    private static readonly pb::MessageParser<ObserverReachability> _parser = new pb::MessageParser<ObserverReachability>(() => new ObserverReachability());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObserverReachability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverReachability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverReachability(ObserverReachability other) : this() {
      addressIndex_ = other.addressIndex_;
      version_ = other.version_;
      subjectReachability_ = other.subjectReachability_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverReachability Clone() {
      return new ObserverReachability(this);
    }

    /// <summary>Field number for the "addressIndex" field.</summary>
    public const int AddressIndexFieldNumber = 1;
    private int addressIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressIndex {
      get { return addressIndex_; }
      set {
        addressIndex_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "subjectReachability" field.</summary>
    public const int SubjectReachabilityFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability> _repeated_subjectReachability_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability> subjectReachability_ = new pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability> SubjectReachability {
      get { return subjectReachability_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObserverReachability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObserverReachability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddressIndex != other.AddressIndex) return false;
      if (Version != other.Version) return false;
      if(!subjectReachability_.Equals(other.subjectReachability_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddressIndex != 0) hash ^= AddressIndex.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      hash ^= subjectReachability_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddressIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddressIndex);
      }
      subjectReachability_.WriteTo(output, _repeated_subjectReachability_codec);
      if (Version != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddressIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressIndex);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      size += subjectReachability_.CalculateSize(_repeated_subjectReachability_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObserverReachability other) {
      if (other == null) {
        return;
      }
      if (other.AddressIndex != 0) {
        AddressIndex = other.AddressIndex;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      subjectReachability_.Add(other.subjectReachability_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddressIndex = input.ReadInt32();
            break;
          }
          case 18: {
            subjectReachability_.AddEntriesFrom(input, _repeated_subjectReachability_codec);
            break;
          }
          case 32: {
            Version = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SubjectReachability : pb::IMessage<SubjectReachability> {
    private static readonly pb::MessageParser<SubjectReachability> _parser = new pb::MessageParser<SubjectReachability>(() => new SubjectReachability());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubjectReachability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectReachability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectReachability(SubjectReachability other) : this() {
      addressIndex_ = other.addressIndex_;
      status_ = other.status_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectReachability Clone() {
      return new SubjectReachability(this);
    }

    /// <summary>Field number for the "addressIndex" field.</summary>
    public const int AddressIndexFieldNumber = 1;
    private int addressIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressIndex {
      get { return addressIndex_; }
      set {
        addressIndex_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubjectReachability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubjectReachability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddressIndex != other.AddressIndex) return false;
      if (Status != other.Status) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddressIndex != 0) hash ^= AddressIndex.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddressIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddressIndex);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Version != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddressIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressIndex);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubjectReachability other) {
      if (other == null) {
        return;
      }
      if (other.AddressIndex != 0) {
        AddressIndex = other.AddressIndex;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddressIndex = input.ReadInt32();
            break;
          }
          case 24: {
            status_ = (global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus) input.ReadEnum();
            break;
          }
          case 32: {
            Version = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubjectReachability message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum ReachabilityStatus {
        [pbr::OriginalName("Reachable")] Reachable = 0,
        [pbr::OriginalName("Unreachable")] Unreachable = 1,
        [pbr::OriginalName("Terminated")] Terminated = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Member
  /// </summary>
  internal sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      addressIndex_ = other.addressIndex_;
      upNumber_ = other.upNumber_;
      status_ = other.status_;
      rolesIndexes_ = other.rolesIndexes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "addressIndex" field.</summary>
    public const int AddressIndexFieldNumber = 1;
    private int addressIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressIndex {
      get { return addressIndex_; }
      set {
        addressIndex_ = value;
      }
    }

    /// <summary>Field number for the "upNumber" field.</summary>
    public const int UpNumberFieldNumber = 2;
    private int upNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpNumber {
      get { return upNumber_; }
      set {
        upNumber_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "rolesIndexes" field.</summary>
    public const int RolesIndexesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_rolesIndexes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> rolesIndexes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RolesIndexes {
      get { return rolesIndexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddressIndex != other.AddressIndex) return false;
      if (UpNumber != other.UpNumber) return false;
      if (Status != other.Status) return false;
      if(!rolesIndexes_.Equals(other.rolesIndexes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddressIndex != 0) hash ^= AddressIndex.GetHashCode();
      if (UpNumber != 0) hash ^= UpNumber.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= rolesIndexes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddressIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddressIndex);
      }
      if (UpNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpNumber);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      rolesIndexes_.WriteTo(output, _repeated_rolesIndexes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddressIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressIndex);
      }
      if (UpNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpNumber);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += rolesIndexes_.CalculateSize(_repeated_rolesIndexes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      if (other.AddressIndex != 0) {
        AddressIndex = other.AddressIndex;
      }
      if (other.UpNumber != 0) {
        UpNumber = other.UpNumber;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      rolesIndexes_.Add(other.rolesIndexes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddressIndex = input.ReadInt32();
            break;
          }
          case 16: {
            UpNumber = input.ReadInt32();
            break;
          }
          case 24: {
            status_ = (global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            rolesIndexes_.AddEntriesFrom(input, _repeated_rolesIndexes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Member message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum MemberStatus {
        [pbr::OriginalName("Joining")] Joining = 0,
        [pbr::OriginalName("Up")] Up = 1,
        [pbr::OriginalName("Leaving")] Leaving = 2,
        [pbr::OriginalName("Exiting")] Exiting = 3,
        [pbr::OriginalName("Down")] Down = 4,
        [pbr::OriginalName("Removed")] Removed = 5,
        [pbr::OriginalName("WeaklyUp")] WeaklyUp = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Vector Clock
  /// </summary>
  internal sealed partial class VectorClock : pb::IMessage<VectorClock> {
    private static readonly pb::MessageParser<VectorClock> _parser = new pb::MessageParser<VectorClock>(() => new VectorClock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VectorClock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock(VectorClock other) : this() {
      timestamp_ = other.timestamp_;
      versions_ = other.versions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock Clone() {
      return new VectorClock(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    /// the timestamp could be removed but left for test data compatibility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version> versions_ = new pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Types.Version> Versions {
      get { return versions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VectorClock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VectorClock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if(!versions_.Equals(other.versions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= versions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      versions_.WriteTo(output, _repeated_versions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += versions_.CalculateSize(_repeated_versions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VectorClock other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      versions_.Add(other.versions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VectorClock message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Serialization.Proto.Msg.VectorClock.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          hashIndex_ = other.hashIndex_;
          timestamp_ = other.timestamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "hashIndex" field.</summary>
        public const int HashIndexFieldNumber = 1;
        private int hashIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HashIndex {
          get { return hashIndex_; }
          set {
            hashIndex_ = value;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HashIndex != other.HashIndex) return false;
          if (Timestamp != other.Timestamp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HashIndex != 0) hash ^= HashIndex.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HashIndex != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(HashIndex);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Timestamp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HashIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HashIndex);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.HashIndex != 0) {
            HashIndex = other.HashIndex;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                HashIndex = input.ReadInt32();
                break;
              }
              case 16: {
                Timestamp = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Defines a remote address with uid.
  /// </summary>
  internal sealed partial class UniqueAddress : pb::IMessage<UniqueAddress> {
    private static readonly pb::MessageParser<UniqueAddress> _parser = new pb::MessageParser<UniqueAddress>(() => new UniqueAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UniqueAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress(UniqueAddress other) : this() {
      Address = other.address_ != null ? other.Address.Clone() : null;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress Clone() {
      return new UniqueAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.AddressData address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.AddressData Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UniqueAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UniqueAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UniqueAddress other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();
            }
            input.ReadMessage(address_);
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClusterRouterPool : pb::IMessage<ClusterRouterPool> {
    private static readonly pb::MessageParser<ClusterRouterPool> _parser = new pb::MessageParser<ClusterRouterPool>(() => new ClusterRouterPool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterRouterPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterRouterPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterRouterPool(ClusterRouterPool other) : this() {
      Pool = other.pool_ != null ? other.Pool.Clone() : null;
      Settings = other.settings_ != null ? other.Settings.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterRouterPool Clone() {
      return new ClusterRouterPool(this);
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 1;
    private global::Akka.Cluster.Serialization.Proto.Msg.Pool pool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.Pool Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterRouterPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterRouterPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pool, other.Pool)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pool_ != null) hash ^= Pool.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pool_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pool);
      }
      if (settings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pool_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pool);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterRouterPool other) {
      if (other == null) {
        return;
      }
      if (other.pool_ != null) {
        if (pool_ == null) {
          pool_ = new global::Akka.Cluster.Serialization.Proto.Msg.Pool();
        }
        Pool.MergeFrom(other.Pool);
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          settings_ = new global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pool_ == null) {
              pool_ = new global::Akka.Cluster.Serialization.Proto.Msg.Pool();
            }
            input.ReadMessage(pool_);
            break;
          }
          case 18: {
            if (settings_ == null) {
              settings_ = new global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings();
            }
            input.ReadMessage(settings_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Pool : pb::IMessage<Pool> {
    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool(Pool other) : this() {
      serializerId_ = other.serializerId_;
      manifest_ = other.manifest_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool Clone() {
      return new Pool(this);
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 1;
    private uint serializerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "manifest" field.</summary>
    public const int ManifestFieldNumber = 2;
    private string manifest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manifest {
      get { return manifest_; }
      set {
        manifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerializerId != other.SerializerId) return false;
      if (Manifest != other.Manifest) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (Manifest.Length != 0) hash ^= Manifest.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerializerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SerializerId);
      }
      if (Manifest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Manifest);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SerializerId);
      }
      if (Manifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manifest);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pool other) {
      if (other == null) {
        return;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.Manifest.Length != 0) {
        Manifest = other.Manifest;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SerializerId = input.ReadUInt32();
            break;
          }
          case 18: {
            Manifest = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClusterRouterPoolSettings : pb::IMessage<ClusterRouterPoolSettings> {
    private static readonly pb::MessageParser<ClusterRouterPoolSettings> _parser = new pb::MessageParser<ClusterRouterPoolSettings>(() => new ClusterRouterPoolSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterRouterPoolSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterRouterPoolSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterRouterPoolSettings(ClusterRouterPoolSettings other) : this() {
      totalInstances_ = other.totalInstances_;
      maxInstancesPerNode_ = other.maxInstancesPerNode_;
      allowLocalRoutees_ = other.allowLocalRoutees_;
      useRole_ = other.useRole_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterRouterPoolSettings Clone() {
      return new ClusterRouterPoolSettings(this);
    }

    /// <summary>Field number for the "totalInstances" field.</summary>
    public const int TotalInstancesFieldNumber = 1;
    private uint totalInstances_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalInstances {
      get { return totalInstances_; }
      set {
        totalInstances_ = value;
      }
    }

    /// <summary>Field number for the "maxInstancesPerNode" field.</summary>
    public const int MaxInstancesPerNodeFieldNumber = 2;
    private uint maxInstancesPerNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxInstancesPerNode {
      get { return maxInstancesPerNode_; }
      set {
        maxInstancesPerNode_ = value;
      }
    }

    /// <summary>Field number for the "allowLocalRoutees" field.</summary>
    public const int AllowLocalRouteesFieldNumber = 3;
    private bool allowLocalRoutees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowLocalRoutees {
      get { return allowLocalRoutees_; }
      set {
        allowLocalRoutees_ = value;
      }
    }

    /// <summary>Field number for the "useRole" field.</summary>
    public const int UseRoleFieldNumber = 4;
    private string useRole_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseRole {
      get { return useRole_; }
      set {
        useRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterRouterPoolSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterRouterPoolSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalInstances != other.TotalInstances) return false;
      if (MaxInstancesPerNode != other.MaxInstancesPerNode) return false;
      if (AllowLocalRoutees != other.AllowLocalRoutees) return false;
      if (UseRole != other.UseRole) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalInstances != 0) hash ^= TotalInstances.GetHashCode();
      if (MaxInstancesPerNode != 0) hash ^= MaxInstancesPerNode.GetHashCode();
      if (AllowLocalRoutees != false) hash ^= AllowLocalRoutees.GetHashCode();
      if (UseRole.Length != 0) hash ^= UseRole.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalInstances != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalInstances);
      }
      if (MaxInstancesPerNode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxInstancesPerNode);
      }
      if (AllowLocalRoutees != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowLocalRoutees);
      }
      if (UseRole.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UseRole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalInstances);
      }
      if (MaxInstancesPerNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxInstancesPerNode);
      }
      if (AllowLocalRoutees != false) {
        size += 1 + 1;
      }
      if (UseRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UseRole);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterRouterPoolSettings other) {
      if (other == null) {
        return;
      }
      if (other.TotalInstances != 0) {
        TotalInstances = other.TotalInstances;
      }
      if (other.MaxInstancesPerNode != 0) {
        MaxInstancesPerNode = other.MaxInstancesPerNode;
      }
      if (other.AllowLocalRoutees != false) {
        AllowLocalRoutees = other.AllowLocalRoutees;
      }
      if (other.UseRole.Length != 0) {
        UseRole = other.UseRole;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalInstances = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxInstancesPerNode = input.ReadUInt32();
            break;
          }
          case 24: {
            AllowLocalRoutees = input.ReadBool();
            break;
          }
          case 34: {
            UseRole = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
