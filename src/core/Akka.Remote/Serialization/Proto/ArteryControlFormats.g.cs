// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArteryControlFormats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Remote.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from ArteryControlFormats.proto</summary>
  internal static partial class ArteryControlFormatsReflection {

    #region Descriptor
    /// <summary>File descriptor for ArteryControlFormats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArteryControlFormatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpBcnRlcnlDb250cm9sRm9ybWF0cy5wcm90bxIjQWtrYS5SZW1vdGUuU2Vy",
            "aWFsaXphdGlvbi5Qcm90by5Nc2cijwEKC1F1YXJhbnRpbmVkEkAKBGZyb20Y",
            "ASABKAsyMi5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5V",
            "bmlxdWVBZGRyZXNzEj4KAnRvGAIgASgLMjIuQWtrYS5SZW1vdGUuU2VyaWFs",
            "aXphdGlvbi5Qcm90by5Nc2cuVW5pcXVlQWRkcmVzcyJZChJNZXNzYWdlV2l0",
            "aEFkZHJlc3MSQwoHYWRkcmVzcxgBIAEoCzIyLkFra2EuUmVtb3RlLlNlcmlh",
            "bGl6YXRpb24uUHJvdG8uTXNnLlVuaXF1ZUFkZHJlc3MiigEKDEhhbmRzaGFr",
            "ZVJlcRJACgRmcm9tGAEgASgLMjIuQWtrYS5SZW1vdGUuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5Nc2cuVW5pcXVlQWRkcmVzcxI4CgJ0bxgCIAEoCzIsLkFra2Eu",
            "UmVtb3RlLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkFkZHJlc3MiqAEKHUNv",
            "bXByZXNzaW9uVGFibGVBZHZlcnRpc2VtZW50EkAKBGZyb20YASABKAsyMi5B",
            "a2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5VbmlxdWVBZGRy",
            "ZXNzEhEKCW9yaWdpblVpZBgCIAEoBBIUCgx0YWJsZVZlcnNpb24YAyABKA0S",
            "DAoEa2V5cxgEIAMoCRIOCgZ2YWx1ZXMYBSADKA0idQogQ29tcHJlc3Npb25U",
            "YWJsZUFkdmVydGlzZW1lbnRBY2sSQAoEZnJvbRgBIAEoCzIyLkFra2EuUmVt",
            "b3RlLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLlVuaXF1ZUFkZHJlc3MSDwoH",
            "dmVyc2lvbhgCIAEoDSKuAQoVU3lzdGVtTWVzc2FnZUVudmVsb3BlEg8KB21l",
            "c3NhZ2UYASABKAwSFAoMc2VyaWFsaXplcklkGAIgASgFEhcKD21lc3NhZ2VN",
            "YW5pZmVzdBgDIAEoDBINCgVzZXFObxgEIAEoBBJGCgphY2tSZXBseVRvGAUg",
            "ASgLMjIuQWtrYS5SZW1vdGUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuVW5p",
            "cXVlQWRkcmVzcyJrChhTeXN0ZW1NZXNzYWdlRGVsaXZlcnlBY2sSDQoFc2Vx",
            "Tm8YASABKAQSQAoEZnJvbRgCIAEoCzIyLkFra2EuUmVtb3RlLlNlcmlhbGl6",
            "YXRpb24uUHJvdG8uTXNnLlVuaXF1ZUFkZHJlc3MiSwoHQWRkcmVzcxIQCghw",
            "cm90b2NvbBgBIAEoCRIOCgZzeXN0ZW0YAiABKAkSEAoIaG9zdG5hbWUYAyAB",
            "KAkSDAoEcG9ydBgEIAEoDSJbCg1VbmlxdWVBZGRyZXNzEj0KB2FkZHJlc3MY",
            "ASABKAsyLC5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5B",
            "ZGRyZXNzEgsKA3VpZBgCIAEoBCIhChJBcnRlcnlIZWFydGJlYXRSc3ASCwoD",
            "dWlkGAEgASgEQgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Quarantined), global::Akka.Remote.Serialization.Proto.Msg.Quarantined.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.MessageWithAddress), global::Akka.Remote.Serialization.Proto.Msg.MessageWithAddress.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.HandshakeReq), global::Akka.Remote.Serialization.Proto.Msg.HandshakeReq.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.CompressionTableAdvertisement), global::Akka.Remote.Serialization.Proto.Msg.CompressionTableAdvertisement.Parser, new[]{ "From", "OriginUid", "TableVersion", "Keys", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.CompressionTableAdvertisementAck), global::Akka.Remote.Serialization.Proto.Msg.CompressionTableAdvertisementAck.Parser, new[]{ "From", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.SystemMessageEnvelope), global::Akka.Remote.Serialization.Proto.Msg.SystemMessageEnvelope.Parser, new[]{ "Message", "SerializerId", "MessageManifest", "SeqNo", "AckReplyTo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.SystemMessageDeliveryAck), global::Akka.Remote.Serialization.Proto.Msg.SystemMessageDeliveryAck.Parser, new[]{ "SeqNo", "From" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Address), global::Akka.Remote.Serialization.Proto.Msg.Address.Parser, new[]{ "Protocol", "System", "Hostname", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress), global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress.Parser, new[]{ "Address", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ArteryHeartbeatRsp), global::Akka.Remote.Serialization.Proto.Msg.ArteryHeartbeatRsp.Parser, new[]{ "Uid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class Quarantined : pb::IMessage<Quarantined> {
    private static readonly pb::MessageParser<Quarantined> _parser = new pb::MessageParser<Quarantined>(() => new Quarantined());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quarantined> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quarantined() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quarantined(Quarantined other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quarantined Clone() {
      return new Quarantined(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quarantined);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quarantined other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quarantined other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        To.MergeFrom(other.To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (to_ == null) {
              to_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(to_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic message declaration that is used for all types of message that (currently) have a single
  /// address field. A message that needs to changed later can be cloned from this one and then adapted.
  /// ActorSystemTerminating
  /// ActorSystemTerminating.Ack
  /// OutboundHandshake.HandshakeRsp
  /// </summary>
  internal sealed partial class MessageWithAddress : pb::IMessage<MessageWithAddress> {
    private static readonly pb::MessageParser<MessageWithAddress> _parser = new pb::MessageParser<MessageWithAddress>(() => new MessageWithAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithAddress(MessageWithAddress other) : this() {
      Address = other.address_ != null ? other.Address.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithAddress Clone() {
      return new MessageWithAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithAddress other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        Address.MergeFrom(other.Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HandshakeReq : pb::IMessage<HandshakeReq> {
    private static readonly pb::MessageParser<HandshakeReq> _parser = new pb::MessageParser<HandshakeReq>(() => new HandshakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandshakeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandshakeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandshakeReq(HandshakeReq other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandshakeReq Clone() {
      return new HandshakeReq(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::Akka.Remote.Serialization.Proto.Msg.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandshakeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandshakeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandshakeReq other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::Akka.Remote.Serialization.Proto.Msg.Address();
        }
        To.MergeFrom(other.To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (to_ == null) {
              to_ = new global::Akka.Remote.Serialization.Proto.Msg.Address();
            }
            input.ReadMessage(to_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CompressionProtocol.ActorRefCompressionAdvertisement
  /// CompressionProtocol.ClassManifestCompressionAdvertisement
  /// </summary>
  internal sealed partial class CompressionTableAdvertisement : pb::IMessage<CompressionTableAdvertisement> {
    private static readonly pb::MessageParser<CompressionTableAdvertisement> _parser = new pb::MessageParser<CompressionTableAdvertisement>(() => new CompressionTableAdvertisement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompressionTableAdvertisement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressionTableAdvertisement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressionTableAdvertisement(CompressionTableAdvertisement other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      originUid_ = other.originUid_;
      tableVersion_ = other.tableVersion_;
      keys_ = other.keys_.Clone();
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressionTableAdvertisement Clone() {
      return new CompressionTableAdvertisement(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "originUid" field.</summary>
    public const int OriginUidFieldNumber = 2;
    private ulong originUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OriginUid {
      get { return originUid_; }
      set {
        originUid_ = value;
      }
    }

    /// <summary>Field number for the "tableVersion" field.</summary>
    public const int TableVersionFieldNumber = 3;
    private uint tableVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableVersion {
      get { return tableVersion_; }
      set {
        tableVersion_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_keys_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// actual Map is represented by separate sequences of keys and values,
    /// relies on both sequences using the same order so that corresponding entries can be
    /// associated again when deserializing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_values_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> values_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompressionTableAdvertisement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompressionTableAdvertisement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (OriginUid != other.OriginUid) return false;
      if (TableVersion != other.TableVersion) return false;
      if(!keys_.Equals(other.keys_)) return false;
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (OriginUid != 0UL) hash ^= OriginUid.GetHashCode();
      if (TableVersion != 0) hash ^= TableVersion.GetHashCode();
      hash ^= keys_.GetHashCode();
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (OriginUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OriginUid);
      }
      if (TableVersion != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TableVersion);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (OriginUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OriginUid);
      }
      if (TableVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableVersion);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompressionTableAdvertisement other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      if (other.OriginUid != 0UL) {
        OriginUid = other.OriginUid;
      }
      if (other.TableVersion != 0) {
        TableVersion = other.TableVersion;
      }
      keys_.Add(other.keys_);
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 16: {
            OriginUid = input.ReadUInt64();
            break;
          }
          case 24: {
            TableVersion = input.ReadUInt32();
            break;
          }
          case 34: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 42:
          case 40: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CompressionProtocol.ActorRefCompressionAdvertisementAck
  /// CompressionProtocol.ClassManifestCompressionAdvertisementAck
  /// </summary>
  internal sealed partial class CompressionTableAdvertisementAck : pb::IMessage<CompressionTableAdvertisementAck> {
    private static readonly pb::MessageParser<CompressionTableAdvertisementAck> _parser = new pb::MessageParser<CompressionTableAdvertisementAck>(() => new CompressionTableAdvertisementAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompressionTableAdvertisementAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressionTableAdvertisementAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressionTableAdvertisementAck(CompressionTableAdvertisementAck other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressionTableAdvertisementAck Clone() {
      return new CompressionTableAdvertisementAck(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompressionTableAdvertisementAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompressionTableAdvertisementAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompressionTableAdvertisementAck other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SystemMessageDelivery.SystemMessageEnvelope
  /// </summary>
  internal sealed partial class SystemMessageEnvelope : pb::IMessage<SystemMessageEnvelope> {
    private static readonly pb::MessageParser<SystemMessageEnvelope> _parser = new pb::MessageParser<SystemMessageEnvelope>(() => new SystemMessageEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemMessageEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMessageEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMessageEnvelope(SystemMessageEnvelope other) : this() {
      message_ = other.message_;
      serializerId_ = other.serializerId_;
      messageManifest_ = other.messageManifest_;
      seqNo_ = other.seqNo_;
      AckReplyTo = other.ackReplyTo_ != null ? other.AckReplyTo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMessageEnvelope Clone() {
      return new SystemMessageEnvelope(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 2;
    private int serializerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "messageManifest" field.</summary>
    public const int MessageManifestFieldNumber = 3;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageManifest {
      get { return messageManifest_; }
      set {
        messageManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seqNo" field.</summary>
    public const int SeqNoFieldNumber = 4;
    private ulong seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    /// <summary>Field number for the "ackReplyTo" field.</summary>
    public const int AckReplyToFieldNumber = 5;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress ackReplyTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress AckReplyTo {
      get { return ackReplyTo_; }
      set {
        ackReplyTo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemMessageEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemMessageEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (SerializerId != other.SerializerId) return false;
      if (MessageManifest != other.MessageManifest) return false;
      if (SeqNo != other.SeqNo) return false;
      if (!object.Equals(AckReplyTo, other.AckReplyTo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (MessageManifest.Length != 0) hash ^= MessageManifest.GetHashCode();
      if (SeqNo != 0UL) hash ^= SeqNo.GetHashCode();
      if (ackReplyTo_ != null) hash ^= AckReplyTo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
      if (SerializerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageManifest);
      }
      if (SeqNo != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SeqNo);
      }
      if (ackReplyTo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AckReplyTo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageManifest);
      }
      if (SeqNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeqNo);
      }
      if (ackReplyTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AckReplyTo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemMessageEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.MessageManifest.Length != 0) {
        MessageManifest = other.MessageManifest;
      }
      if (other.SeqNo != 0UL) {
        SeqNo = other.SeqNo;
      }
      if (other.ackReplyTo_ != null) {
        if (ackReplyTo_ == null) {
          ackReplyTo_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        AckReplyTo.MergeFrom(other.AckReplyTo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
          case 16: {
            SerializerId = input.ReadInt32();
            break;
          }
          case 26: {
            MessageManifest = input.ReadBytes();
            break;
          }
          case 32: {
            SeqNo = input.ReadUInt64();
            break;
          }
          case 42: {
            if (ackReplyTo_ == null) {
              ackReplyTo_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(ackReplyTo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SystemMessageDelivery.Ack
  /// SystemMessageDelivery.Nack
  /// </summary>
  internal sealed partial class SystemMessageDeliveryAck : pb::IMessage<SystemMessageDeliveryAck> {
    private static readonly pb::MessageParser<SystemMessageDeliveryAck> _parser = new pb::MessageParser<SystemMessageDeliveryAck>(() => new SystemMessageDeliveryAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemMessageDeliveryAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMessageDeliveryAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMessageDeliveryAck(SystemMessageDeliveryAck other) : this() {
      seqNo_ = other.seqNo_;
      From = other.from_ != null ? other.From.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemMessageDeliveryAck Clone() {
      return new SystemMessageDeliveryAck(this);
    }

    /// <summary>Field number for the "seqNo" field.</summary>
    public const int SeqNoFieldNumber = 1;
    private ulong seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemMessageDeliveryAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemMessageDeliveryAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNo != other.SeqNo) return false;
      if (!object.Equals(From, other.From)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNo != 0UL) hash ^= SeqNo.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqNo != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SeqNo);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeqNo);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemMessageDeliveryAck other) {
      if (other == null) {
        return;
      }
      if (other.SeqNo != 0UL) {
        SeqNo = other.SeqNo;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
        }
        From.MergeFrom(other.From);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeqNo = input.ReadUInt64();
            break;
          }
          case 18: {
            if (from_ == null) {
              from_ = new global::Akka.Remote.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(from_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines a remote address.
  /// </summary>
  internal sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      protocol_ = other.protocol_;
      system_ = other.system_;
      hostname_ = other.hostname_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private string protocol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 2;
    private string system_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string System {
      get { return system_; }
      set {
        system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 3;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (System != other.System) return false;
      if (Hostname != other.Hostname) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Protocol);
      }
      if (System.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(System);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Hostname);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.Protocol.Length != 0) {
        Protocol = other.Protocol;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Protocol = input.ReadString();
            break;
          }
          case 18: {
            System = input.ReadString();
            break;
          }
          case 26: {
            Hostname = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines a remote address with uid.
  /// </summary>
  internal sealed partial class UniqueAddress : pb::IMessage<UniqueAddress> {
    private static readonly pb::MessageParser<UniqueAddress> _parser = new pb::MessageParser<UniqueAddress>(() => new UniqueAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UniqueAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress(UniqueAddress other) : this() {
      Address = other.address_ != null ? other.Address.Clone() : null;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress Clone() {
      return new UniqueAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UniqueAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UniqueAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UniqueAddress other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Akka.Remote.Serialization.Proto.Msg.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Akka.Remote.Serialization.Proto.Msg.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RemoteWatcher.ArteryHeartbeat is empty array
  /// RemoteWatcher.ArteryHeartbeatRsp
  /// </summary>
  internal sealed partial class ArteryHeartbeatRsp : pb::IMessage<ArteryHeartbeatRsp> {
    private static readonly pb::MessageParser<ArteryHeartbeatRsp> _parser = new pb::MessageParser<ArteryHeartbeatRsp>(() => new ArteryHeartbeatRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArteryHeartbeatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ArteryControlFormatsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArteryHeartbeatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArteryHeartbeatRsp(ArteryHeartbeatRsp other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArteryHeartbeatRsp Clone() {
      return new ArteryHeartbeatRsp(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArteryHeartbeatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArteryHeartbeatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArteryHeartbeatRsp other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
