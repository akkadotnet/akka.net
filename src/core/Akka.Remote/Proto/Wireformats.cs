// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WireFormats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Remote.Proto {

  /// <summary>Holder for reflection information generated from WireFormats.proto</summary>
  internal static partial class WireFormatsReflection {

    #region Descriptor
    /// <summary>File descriptor for WireFormats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WireFormatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFXaXJlRm9ybWF0cy5wcm90bxIRQWtrYS5SZW1vdGUuUHJvdG8igwEKF0Fj",
            "a0FuZEVudmVsb3BlQ29udGFpbmVyEjMKA2FjaxgBIAEoCzImLkFra2EuUmVt",
            "b3RlLlByb3RvLkFja25vd2xlZGdlbWVudEluZm8SMwoIZW52ZWxvcGUYAiAB",
            "KAsyIS5Ba2thLlJlbW90ZS5Qcm90by5SZW1vdGVFbnZlbG9wZSK5AQoOUmVt",
            "b3RlRW52ZWxvcGUSMgoJcmVjaXBpZW50GAEgASgLMh8uQWtrYS5SZW1vdGUu",
            "UHJvdG8uQWN0b3JSZWZEYXRhEjUKB21lc3NhZ2UYAiABKAsyJC5Ba2thLlJl",
            "bW90ZS5Qcm90by5TZXJpYWxpemVkTWVzc2FnZRIvCgZzZW5kZXIYBCABKAsy",
            "Hy5Ba2thLlJlbW90ZS5Qcm90by5BY3RvclJlZkRhdGESCwoDc2VxGAUgASgG",
            "IjsKE0Fja25vd2xlZGdlbWVudEluZm8SFQoNY3VtdWxhdGl2ZUFjaxgBIAEo",
            "BhINCgVuYWNrcxgCIAMoBiIcCgxBY3RvclJlZkRhdGESDAoEcGF0aBgBIAEo",
            "CSJTChFTZXJpYWxpemVkTWVzc2FnZRIPCgdtZXNzYWdlGAEgASgMEhQKDHNl",
            "cmlhbGl6ZXJJZBgCIAEoBRIXCg9tZXNzYWdlTWFuaWZlc3QYAyABKAwitAEK",
            "E0RhZW1vbk1zZ0NyZWF0ZURhdGESKwoFcHJvcHMYASABKAsyHC5Ba2thLlJl",
            "bW90ZS5Qcm90by5Qcm9wc0RhdGESLQoGZGVwbG95GAIgASgLMh0uQWtrYS5S",
            "ZW1vdGUuUHJvdG8uRGVwbG95RGF0YRIMCgRwYXRoGAMgASgJEjMKCnN1cGVy",
            "dmlzb3IYBCABKAsyHy5Ba2thLlJlbW90ZS5Qcm90by5BY3RvclJlZkRhdGEi",
            "aAoJUHJvcHNEYXRhEi0KBmRlcGxveRgCIAEoCzIdLkFra2EuUmVtb3RlLlBy",
            "b3RvLkRlcGxveURhdGESDQoFY2xhenoYAyABKAkSDAoEYXJncxgEIAMoDBIP",
            "CgdjbGFzc2VzGAUgAygJImMKCkRlcGxveURhdGESDAoEcGF0aBgBIAEoCRIO",
            "CgZjb25maWcYAiABKAwSFAoMcm91dGVyQ29uZmlnGAMgASgMEg0KBXNjb3Bl",
            "GAQgASgMEhIKCmRpc3BhdGNoZXIYBSABKAkiYgoTQWtrYVByb3RvY29sTWVz",
            "c2FnZRIPCgdwYXlsb2FkGAEgASgMEjoKC2luc3RydWN0aW9uGAIgASgLMiUu",
            "QWtrYS5SZW1vdGUuUHJvdG8uQWtrYUNvbnRyb2xNZXNzYWdlIoYBChJBa2th",
            "Q29udHJvbE1lc3NhZ2USMwoLY29tbWFuZFR5cGUYASABKA4yHi5Ba2thLlJl",
            "bW90ZS5Qcm90by5Db21tYW5kVHlwZRI7Cg1oYW5kc2hha2VJbmZvGAIgASgL",
            "MiQuQWtrYS5SZW1vdGUuUHJvdG8uQWtrYUhhbmRzaGFrZUluZm8iYAoRQWtr",
            "YUhhbmRzaGFrZUluZm8SLgoGb3JpZ2luGAEgASgLMh4uQWtrYS5SZW1vdGUu",
            "UHJvdG8uQWRkcmVzc0RhdGESCwoDdWlkGAIgASgGEg4KBmNvb2tpZRgDIAEo",
            "CSJPCgtBZGRyZXNzRGF0YRIOCgZzeXN0ZW0YASABKAkSEAoIaG9zdG5hbWUY",
            "AiABKAkSDAoEcG9ydBgDIAEoDRIQCghwcm90b2NvbBgEIAEoCSqJAQoLQ29t",
            "bWFuZFR5cGUSDAoIX19OT05FX18QABINCglBU1NPQ0lBVEUQARIQCgxESVNB",
            "U1NPQ0lBVEUQAhINCglIRUFSVEJFQVQQAxIeChpESVNBU1NPQ0lBVEVfU0hV",
            "VFRJTkdfRE9XThAEEhwKGERJU0FTU09DSUFURV9RVUFSQU5USU5FRBAFQgJI",
            "AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Akka.Remote.Proto.CommandType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.AckAndEnvelopeContainer), global::Akka.Remote.Proto.AckAndEnvelopeContainer.Parser, new[]{ "Ack", "Envelope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.RemoteEnvelope), global::Akka.Remote.Proto.RemoteEnvelope.Parser, new[]{ "Recipient", "Message", "Sender", "Seq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.AcknowledgementInfo), global::Akka.Remote.Proto.AcknowledgementInfo.Parser, new[]{ "CumulativeAck", "Nacks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.ActorRefData), global::Akka.Remote.Proto.ActorRefData.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.SerializedMessage), global::Akka.Remote.Proto.SerializedMessage.Parser, new[]{ "Message", "SerializerId", "MessageManifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.DaemonMsgCreateData), global::Akka.Remote.Proto.DaemonMsgCreateData.Parser, new[]{ "Props", "Deploy", "Path", "Supervisor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.PropsData), global::Akka.Remote.Proto.PropsData.Parser, new[]{ "Deploy", "Clazz", "Args", "Classes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.DeployData), global::Akka.Remote.Proto.DeployData.Parser, new[]{ "Path", "Config", "RouterConfig", "Scope", "Dispatcher" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.AkkaProtocolMessage), global::Akka.Remote.Proto.AkkaProtocolMessage.Parser, new[]{ "Payload", "Instruction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.AkkaControlMessage), global::Akka.Remote.Proto.AkkaControlMessage.Parser, new[]{ "CommandType", "HandshakeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.AkkaHandshakeInfo), global::Akka.Remote.Proto.AkkaHandshakeInfo.Parser, new[]{ "Origin", "Uid", "Cookie" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Proto.AddressData), global::Akka.Remote.Proto.AddressData.Parser, new[]{ "System", "Hostname", "Port", "Protocol" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// Defines the type of the AkkaControlMessage command type
  /// </summary>
  internal enum CommandType {
    [pbr::OriginalName("__NONE__")] None = 0,
    [pbr::OriginalName("ASSOCIATE")] Associate = 1,
    [pbr::OriginalName("DISASSOCIATE")] Disassociate = 2,
    [pbr::OriginalName("HEARTBEAT")] Heartbeat = 3,
    /// <summary>
    /// Remote system is going down and will not accepts new connections
    /// </summary>
    [pbr::OriginalName("DISASSOCIATE_SHUTTING_DOWN")] DisassociateShuttingDown = 4,
    /// <summary>
    /// Remote system refused the association since the current system is quarantined
    /// </summary>
    [pbr::OriginalName("DISASSOCIATE_QUARANTINED")] DisassociateQuarantined = 5,
  }

  #endregion

  #region Messages
  internal sealed partial class AckAndEnvelopeContainer : pb::IMessage<AckAndEnvelopeContainer> {
    private static readonly pb::MessageParser<AckAndEnvelopeContainer> _parser = new pb::MessageParser<AckAndEnvelopeContainer>(() => new AckAndEnvelopeContainer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckAndEnvelopeContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckAndEnvelopeContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckAndEnvelopeContainer(AckAndEnvelopeContainer other) : this() {
      Ack = other.ack_ != null ? other.Ack.Clone() : null;
      Envelope = other.envelope_ != null ? other.Envelope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckAndEnvelopeContainer Clone() {
      return new AckAndEnvelopeContainer(this);
    }

    /// <summary>Field number for the "ack" field.</summary>
    public const int AckFieldNumber = 1;
    private global::Akka.Remote.Proto.AcknowledgementInfo ack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.AcknowledgementInfo Ack {
      get { return ack_; }
      set {
        ack_ = value;
      }
    }

    /// <summary>Field number for the "envelope" field.</summary>
    public const int EnvelopeFieldNumber = 2;
    private global::Akka.Remote.Proto.RemoteEnvelope envelope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.RemoteEnvelope Envelope {
      get { return envelope_; }
      set {
        envelope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckAndEnvelopeContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckAndEnvelopeContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ack, other.Ack)) return false;
      if (!object.Equals(Envelope, other.Envelope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ack_ != null) hash ^= Ack.GetHashCode();
      if (envelope_ != null) hash ^= Envelope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ack);
      }
      if (envelope_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Envelope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ack);
      }
      if (envelope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckAndEnvelopeContainer other) {
      if (other == null) {
        return;
      }
      if (other.ack_ != null) {
        if (ack_ == null) {
          ack_ = new global::Akka.Remote.Proto.AcknowledgementInfo();
        }
        Ack.MergeFrom(other.Ack);
      }
      if (other.envelope_ != null) {
        if (envelope_ == null) {
          envelope_ = new global::Akka.Remote.Proto.RemoteEnvelope();
        }
        Envelope.MergeFrom(other.Envelope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ack_ == null) {
              ack_ = new global::Akka.Remote.Proto.AcknowledgementInfo();
            }
            input.ReadMessage(ack_);
            break;
          }
          case 18: {
            if (envelope_ == null) {
              envelope_ = new global::Akka.Remote.Proto.RemoteEnvelope();
            }
            input.ReadMessage(envelope_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines a remote message.
  /// </summary>
  internal sealed partial class RemoteEnvelope : pb::IMessage<RemoteEnvelope> {
    private static readonly pb::MessageParser<RemoteEnvelope> _parser = new pb::MessageParser<RemoteEnvelope>(() => new RemoteEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteEnvelope(RemoteEnvelope other) : this() {
      Recipient = other.recipient_ != null ? other.Recipient.Clone() : null;
      Message = other.message_ != null ? other.Message.Clone() : null;
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
      seq_ = other.seq_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteEnvelope Clone() {
      return new RemoteEnvelope(this);
    }

    /// <summary>Field number for the "recipient" field.</summary>
    public const int RecipientFieldNumber = 1;
    private global::Akka.Remote.Proto.ActorRefData recipient_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.ActorRefData Recipient {
      get { return recipient_; }
      set {
        recipient_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private global::Akka.Remote.Proto.SerializedMessage message_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.SerializedMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 4;
    private global::Akka.Remote.Proto.ActorRefData sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.ActorRefData Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 5;
    private ulong seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Recipient, other.Recipient)) return false;
      if (!object.Equals(Message, other.Message)) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (Seq != other.Seq) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (recipient_ != null) hash ^= Recipient.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (Seq != 0UL) hash ^= Seq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (recipient_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Recipient);
      }
      if (message_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Message);
      }
      if (sender_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Sender);
      }
      if (Seq != 0UL) {
        output.WriteRawTag(41);
        output.WriteFixed64(Seq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recipient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recipient);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (Seq != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.recipient_ != null) {
        if (recipient_ == null) {
          recipient_ = new global::Akka.Remote.Proto.ActorRefData();
        }
        Recipient.MergeFrom(other.Recipient);
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::Akka.Remote.Proto.SerializedMessage();
        }
        Message.MergeFrom(other.Message);
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::Akka.Remote.Proto.ActorRefData();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.Seq != 0UL) {
        Seq = other.Seq;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (recipient_ == null) {
              recipient_ = new global::Akka.Remote.Proto.ActorRefData();
            }
            input.ReadMessage(recipient_);
            break;
          }
          case 18: {
            if (message_ == null) {
              message_ = new global::Akka.Remote.Proto.SerializedMessage();
            }
            input.ReadMessage(message_);
            break;
          }
          case 34: {
            if (sender_ == null) {
              sender_ = new global::Akka.Remote.Proto.ActorRefData();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 41: {
            Seq = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AcknowledgementInfo : pb::IMessage<AcknowledgementInfo> {
    private static readonly pb::MessageParser<AcknowledgementInfo> _parser = new pb::MessageParser<AcknowledgementInfo>(() => new AcknowledgementInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcknowledgementInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgementInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgementInfo(AcknowledgementInfo other) : this() {
      cumulativeAck_ = other.cumulativeAck_;
      nacks_ = other.nacks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgementInfo Clone() {
      return new AcknowledgementInfo(this);
    }

    /// <summary>Field number for the "cumulativeAck" field.</summary>
    public const int CumulativeAckFieldNumber = 1;
    private ulong cumulativeAck_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CumulativeAck {
      get { return cumulativeAck_; }
      set {
        cumulativeAck_ = value;
      }
    }

    /// <summary>Field number for the "nacks" field.</summary>
    public const int NacksFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_nacks_codec
        = pb::FieldCodec.ForFixed64(18);
    private readonly pbc::RepeatedField<ulong> nacks_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Nacks {
      get { return nacks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcknowledgementInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcknowledgementInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CumulativeAck != other.CumulativeAck) return false;
      if(!nacks_.Equals(other.nacks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CumulativeAck != 0UL) hash ^= CumulativeAck.GetHashCode();
      hash ^= nacks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CumulativeAck != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(CumulativeAck);
      }
      nacks_.WriteTo(output, _repeated_nacks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CumulativeAck != 0UL) {
        size += 1 + 8;
      }
      size += nacks_.CalculateSize(_repeated_nacks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcknowledgementInfo other) {
      if (other == null) {
        return;
      }
      if (other.CumulativeAck != 0UL) {
        CumulativeAck = other.CumulativeAck;
      }
      nacks_.Add(other.nacks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            CumulativeAck = input.ReadFixed64();
            break;
          }
          case 18:
          case 17: {
            nacks_.AddEntriesFrom(input, _repeated_nacks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines a remote ActorRef that "remembers" and uses its original Actor instance
  /// on the original node.
  /// </summary>
  internal sealed partial class ActorRefData : pb::IMessage<ActorRefData> {
    private static readonly pb::MessageParser<ActorRefData> _parser = new pb::MessageParser<ActorRefData>(() => new ActorRefData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorRefData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefData(ActorRefData other) : this() {
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefData Clone() {
      return new ActorRefData(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorRefData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorRefData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorRefData other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines a message.
  /// </summary>
  public sealed partial class SerializedMessage : pb::IMessage<SerializedMessage> {
    private static readonly pb::MessageParser<SerializedMessage> _parser = new pb::MessageParser<SerializedMessage>(() => new SerializedMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedMessage(SerializedMessage other) : this() {
      message_ = other.message_;
      serializerId_ = other.serializerId_;
      messageManifest_ = other.messageManifest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedMessage Clone() {
      return new SerializedMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 2;
    private int serializerId_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "messageManifest" field.</summary>
    public const int MessageManifestFieldNumber = 3;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageManifest {
      get { return messageManifest_; }
      set {
        messageManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (SerializerId != other.SerializerId) return false;
      if (MessageManifest != other.MessageManifest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (MessageManifest.Length != 0) hash ^= MessageManifest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
      if (SerializerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageManifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageManifest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializedMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.MessageManifest.Length != 0) {
        MessageManifest = other.MessageManifest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
          case 16: {
            SerializerId = input.ReadInt32();
            break;
          }
          case 26: {
            MessageManifest = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines akka.remote.DaemonMsgCreate
  /// </summary>
  internal sealed partial class DaemonMsgCreateData : pb::IMessage<DaemonMsgCreateData> {
    private static readonly pb::MessageParser<DaemonMsgCreateData> _parser = new pb::MessageParser<DaemonMsgCreateData>(() => new DaemonMsgCreateData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DaemonMsgCreateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DaemonMsgCreateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DaemonMsgCreateData(DaemonMsgCreateData other) : this() {
      Props = other.props_ != null ? other.Props.Clone() : null;
      Deploy = other.deploy_ != null ? other.Deploy.Clone() : null;
      path_ = other.path_;
      Supervisor = other.supervisor_ != null ? other.Supervisor.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DaemonMsgCreateData Clone() {
      return new DaemonMsgCreateData(this);
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 1;
    private global::Akka.Remote.Proto.PropsData props_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.PropsData Props {
      get { return props_; }
      set {
        props_ = value;
      }
    }

    /// <summary>Field number for the "deploy" field.</summary>
    public const int DeployFieldNumber = 2;
    private global::Akka.Remote.Proto.DeployData deploy_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.DeployData Deploy {
      get { return deploy_; }
      set {
        deploy_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supervisor" field.</summary>
    public const int SupervisorFieldNumber = 4;
    private global::Akka.Remote.Proto.ActorRefData supervisor_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.ActorRefData Supervisor {
      get { return supervisor_; }
      set {
        supervisor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DaemonMsgCreateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DaemonMsgCreateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Props, other.Props)) return false;
      if (!object.Equals(Deploy, other.Deploy)) return false;
      if (Path != other.Path) return false;
      if (!object.Equals(Supervisor, other.Supervisor)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (props_ != null) hash ^= Props.GetHashCode();
      if (deploy_ != null) hash ^= Deploy.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (supervisor_ != null) hash ^= Supervisor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (props_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Props);
      }
      if (deploy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deploy);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (supervisor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Supervisor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (props_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Props);
      }
      if (deploy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deploy);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (supervisor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Supervisor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DaemonMsgCreateData other) {
      if (other == null) {
        return;
      }
      if (other.props_ != null) {
        if (props_ == null) {
          props_ = new global::Akka.Remote.Proto.PropsData();
        }
        Props.MergeFrom(other.Props);
      }
      if (other.deploy_ != null) {
        if (deploy_ == null) {
          deploy_ = new global::Akka.Remote.Proto.DeployData();
        }
        Deploy.MergeFrom(other.Deploy);
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.supervisor_ != null) {
        if (supervisor_ == null) {
          supervisor_ = new global::Akka.Remote.Proto.ActorRefData();
        }
        Supervisor.MergeFrom(other.Supervisor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (props_ == null) {
              props_ = new global::Akka.Remote.Proto.PropsData();
            }
            input.ReadMessage(props_);
            break;
          }
          case 18: {
            if (deploy_ == null) {
              deploy_ = new global::Akka.Remote.Proto.DeployData();
            }
            input.ReadMessage(deploy_);
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            if (supervisor_ == null) {
              supervisor_ = new global::Akka.Remote.Proto.ActorRefData();
            }
            input.ReadMessage(supervisor_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Serialization of akka.actor.Props
  /// </summary>
  internal sealed partial class PropsData : pb::IMessage<PropsData> {
    private static readonly pb::MessageParser<PropsData> _parser = new pb::MessageParser<PropsData>(() => new PropsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropsData(PropsData other) : this() {
      Deploy = other.deploy_ != null ? other.Deploy.Clone() : null;
      clazz_ = other.clazz_;
      args_ = other.args_.Clone();
      classes_ = other.classes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropsData Clone() {
      return new PropsData(this);
    }

    /// <summary>Field number for the "deploy" field.</summary>
    public const int DeployFieldNumber = 2;
    private global::Akka.Remote.Proto.DeployData deploy_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.DeployData Deploy {
      get { return deploy_; }
      set {
        deploy_ = value;
      }
    }

    /// <summary>Field number for the "clazz" field.</summary>
    public const int ClazzFieldNumber = 3;
    private string clazz_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Clazz {
      get { return clazz_; }
      set {
        clazz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_args_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> args_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "classes" field.</summary>
    public const int ClassesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_classes_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> classes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Classes {
      get { return classes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deploy, other.Deploy)) return false;
      if (Clazz != other.Clazz) return false;
      if(!args_.Equals(other.args_)) return false;
      if(!classes_.Equals(other.classes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deploy_ != null) hash ^= Deploy.GetHashCode();
      if (Clazz.Length != 0) hash ^= Clazz.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= classes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deploy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deploy);
      }
      if (Clazz.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Clazz);
      }
      args_.WriteTo(output, _repeated_args_codec);
      classes_.WriteTo(output, _repeated_classes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deploy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deploy);
      }
      if (Clazz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clazz);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += classes_.CalculateSize(_repeated_classes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropsData other) {
      if (other == null) {
        return;
      }
      if (other.deploy_ != null) {
        if (deploy_ == null) {
          deploy_ = new global::Akka.Remote.Proto.DeployData();
        }
        Deploy.MergeFrom(other.Deploy);
      }
      if (other.Clazz.Length != 0) {
        Clazz = other.Clazz;
      }
      args_.Add(other.args_);
      classes_.Add(other.classes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (deploy_ == null) {
              deploy_ = new global::Akka.Remote.Proto.DeployData();
            }
            input.ReadMessage(deploy_);
            break;
          }
          case 26: {
            Clazz = input.ReadString();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 42: {
            classes_.AddEntriesFrom(input, _repeated_classes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Serialization of akka.actor.Deploy
  /// </summary>
  internal sealed partial class DeployData : pb::IMessage<DeployData> {
    private static readonly pb::MessageParser<DeployData> _parser = new pb::MessageParser<DeployData>(() => new DeployData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeployData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployData(DeployData other) : this() {
      path_ = other.path_;
      config_ = other.config_;
      routerConfig_ = other.routerConfig_;
      scope_ = other.scope_;
      dispatcher_ = other.dispatcher_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployData Clone() {
      return new DeployData(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private pb::ByteString config_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Config {
      get { return config_; }
      set {
        config_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routerConfig" field.</summary>
    public const int RouterConfigFieldNumber = 3;
    private pb::ByteString routerConfig_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RouterConfig {
      get { return routerConfig_; }
      set {
        routerConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 4;
    private pb::ByteString scope_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Scope {
      get { return scope_; }
      set {
        scope_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dispatcher" field.</summary>
    public const int DispatcherFieldNumber = 5;
    private string dispatcher_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dispatcher {
      get { return dispatcher_; }
      set {
        dispatcher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeployData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeployData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Config != other.Config) return false;
      if (RouterConfig != other.RouterConfig) return false;
      if (Scope != other.Scope) return false;
      if (Dispatcher != other.Dispatcher) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Config.Length != 0) hash ^= Config.GetHashCode();
      if (RouterConfig.Length != 0) hash ^= RouterConfig.GetHashCode();
      if (Scope.Length != 0) hash ^= Scope.GetHashCode();
      if (Dispatcher.Length != 0) hash ^= Dispatcher.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Config);
      }
      if (RouterConfig.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RouterConfig);
      }
      if (Scope.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Scope);
      }
      if (Dispatcher.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Dispatcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Config.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Config);
      }
      if (RouterConfig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouterConfig);
      }
      if (Scope.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Scope);
      }
      if (Dispatcher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dispatcher);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeployData other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Config.Length != 0) {
        Config = other.Config;
      }
      if (other.RouterConfig.Length != 0) {
        RouterConfig = other.RouterConfig;
      }
      if (other.Scope.Length != 0) {
        Scope = other.Scope;
      }
      if (other.Dispatcher.Length != 0) {
        Dispatcher = other.Dispatcher;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            Config = input.ReadBytes();
            break;
          }
          case 26: {
            RouterConfig = input.ReadBytes();
            break;
          }
          case 34: {
            Scope = input.ReadBytes();
            break;
          }
          case 42: {
            Dispatcher = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Message format of Akka Protocol.
  /// Message contains either a payload or an instruction.
  /// </summary>
  internal sealed partial class AkkaProtocolMessage : pb::IMessage<AkkaProtocolMessage> {
    private static readonly pb::MessageParser<AkkaProtocolMessage> _parser = new pb::MessageParser<AkkaProtocolMessage>(() => new AkkaProtocolMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AkkaProtocolMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaProtocolMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaProtocolMessage(AkkaProtocolMessage other) : this() {
      payload_ = other.payload_;
      Instruction = other.instruction_ != null ? other.Instruction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaProtocolMessage Clone() {
      return new AkkaProtocolMessage(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruction" field.</summary>
    public const int InstructionFieldNumber = 2;
    private global::Akka.Remote.Proto.AkkaControlMessage instruction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.AkkaControlMessage Instruction {
      get { return instruction_; }
      set {
        instruction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AkkaProtocolMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AkkaProtocolMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (!object.Equals(Instruction, other.Instruction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (instruction_ != null) hash ^= Instruction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (instruction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Instruction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (instruction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instruction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AkkaProtocolMessage other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.instruction_ != null) {
        if (instruction_ == null) {
          instruction_ = new global::Akka.Remote.Proto.AkkaControlMessage();
        }
        Instruction.MergeFrom(other.Instruction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            if (instruction_ == null) {
              instruction_ = new global::Akka.Remote.Proto.AkkaControlMessage();
            }
            input.ReadMessage(instruction_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines some control messages for the remoting
  /// </summary>
  internal sealed partial class AkkaControlMessage : pb::IMessage<AkkaControlMessage> {
    private static readonly pb::MessageParser<AkkaControlMessage> _parser = new pb::MessageParser<AkkaControlMessage>(() => new AkkaControlMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AkkaControlMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaControlMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaControlMessage(AkkaControlMessage other) : this() {
      commandType_ = other.commandType_;
      HandshakeInfo = other.handshakeInfo_ != null ? other.HandshakeInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaControlMessage Clone() {
      return new AkkaControlMessage(this);
    }

    /// <summary>Field number for the "commandType" field.</summary>
    public const int CommandTypeFieldNumber = 1;
    private global::Akka.Remote.Proto.CommandType commandType_ = 0;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.CommandType CommandType {
      get { return commandType_; }
      set {
        commandType_ = value;
      }
    }

    /// <summary>Field number for the "handshakeInfo" field.</summary>
    public const int HandshakeInfoFieldNumber = 2;
    private global::Akka.Remote.Proto.AkkaHandshakeInfo handshakeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.AkkaHandshakeInfo HandshakeInfo {
      get { return handshakeInfo_; }
      set {
        handshakeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AkkaControlMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AkkaControlMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandType != other.CommandType) return false;
      if (!object.Equals(HandshakeInfo, other.HandshakeInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommandType != 0) hash ^= CommandType.GetHashCode();
      if (handshakeInfo_ != null) hash ^= HandshakeInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CommandType);
      }
      if (handshakeInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HandshakeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommandType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandType);
      }
      if (handshakeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandshakeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AkkaControlMessage other) {
      if (other == null) {
        return;
      }
      if (other.CommandType != 0) {
        CommandType = other.CommandType;
      }
      if (other.handshakeInfo_ != null) {
        if (handshakeInfo_ == null) {
          handshakeInfo_ = new global::Akka.Remote.Proto.AkkaHandshakeInfo();
        }
        HandshakeInfo.MergeFrom(other.HandshakeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            commandType_ = (global::Akka.Remote.Proto.CommandType) input.ReadEnum();
            break;
          }
          case 18: {
            if (handshakeInfo_ == null) {
              handshakeInfo_ = new global::Akka.Remote.Proto.AkkaHandshakeInfo();
            }
            input.ReadMessage(handshakeInfo_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AkkaHandshakeInfo : pb::IMessage<AkkaHandshakeInfo> {
    private static readonly pb::MessageParser<AkkaHandshakeInfo> _parser = new pb::MessageParser<AkkaHandshakeInfo>(() => new AkkaHandshakeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AkkaHandshakeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaHandshakeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaHandshakeInfo(AkkaHandshakeInfo other) : this() {
      Origin = other.origin_ != null ? other.Origin.Clone() : null;
      uid_ = other.uid_;
      cookie_ = other.cookie_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AkkaHandshakeInfo Clone() {
      return new AkkaHandshakeInfo(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Akka.Remote.Proto.AddressData origin_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Proto.AddressData Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private ulong uid_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "cookie" field.</summary>
    public const int CookieFieldNumber = 3;
    private string cookie_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cookie {
      get { return cookie_; }
      set {
        cookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AkkaHandshakeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AkkaHandshakeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Uid != other.Uid) return false;
      if (Cookie != other.Cookie) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Cookie.Length != 0) hash ^= Cookie.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(Uid);
      }
      if (Cookie.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cookie);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Uid != 0UL) {
        size += 1 + 8;
      }
      if (Cookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cookie);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AkkaHandshakeInfo other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::Akka.Remote.Proto.AddressData();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Cookie.Length != 0) {
        Cookie = other.Cookie;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (origin_ == null) {
              origin_ = new global::Akka.Remote.Proto.AddressData();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 17: {
            Uid = input.ReadFixed64();
            break;
          }
          case 26: {
            Cookie = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Defines a remote address.
  /// </summary>
  internal sealed partial class AddressData : pb::IMessage<AddressData> {
    private static readonly pb::MessageParser<AddressData> _parser = new pb::MessageParser<AddressData>(() => new AddressData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Proto.WireFormatsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressData(AddressData other) : this() {
      system_ = other.system_;
      hostname_ = other.hostname_;
      port_ = other.port_;
      protocol_ = other.protocol_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressData Clone() {
      return new AddressData(this);
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 1;
    private string system_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string System {
      get { return system_; }
      set {
        system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 2;
    private string hostname_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 4;
    private string protocol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (System != other.System) return false;
      if (Hostname != other.Hostname) return false;
      if (Port != other.Port) return false;
      if (Protocol != other.Protocol) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (System.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(System);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Hostname);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressData other) {
      if (other == null) {
        return;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Protocol.Length != 0) {
        Protocol = other.Protocol;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            System = input.ReadString();
            break;
          }
          case 18: {
            Hostname = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 34: {
            Protocol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
