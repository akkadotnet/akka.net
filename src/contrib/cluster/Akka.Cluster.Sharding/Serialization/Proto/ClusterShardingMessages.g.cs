// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterShardingMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.Sharding.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from ClusterShardingMessages.proto</summary>
  internal static partial class ClusterShardingMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for ClusterShardingMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterShardingMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1DbHVzdGVyU2hhcmRpbmdNZXNzYWdlcy5wcm90bxItQWtrYS5DbHVzdGVy",
            "LlNoYXJkaW5nLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnIuMBChBDb29yZGlu",
            "YXRvclN0YXRlEloKBnNoYXJkcxgBIAMoCzJKLkFra2EuQ2x1c3Rlci5TaGFy",
            "ZGluZy5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5Db29yZGluYXRvclN0YXRl",
            "LlNoYXJkRW50cnkSDwoHcmVnaW9ucxgCIAMoCRIVCg1yZWdpb25Qcm94aWVz",
            "GAMgAygJEhkKEXVuYWxsb2NhdGVkU2hhcmRzGAQgAygJGjAKClNoYXJkRW50",
            "cnkSDwoHc2hhcmRJZBgBIAEoCRIRCglyZWdpb25SZWYYAiABKAkiHgoPQWN0",
            "b3JSZWZNZXNzYWdlEgsKA3JlZhgBIAEoCSIfCg5TaGFyZElkTWVzc2FnZRIN",
            "CgVzaGFyZBgBIAEoCSIzChJTaGFyZEhvbWVBbGxvY2F0ZWQSDQoFc2hhcmQY",
            "ASABKAkSDgoGcmVnaW9uGAIgASgJIioKCVNoYXJkSG9tZRINCgVzaGFyZBgB",
            "IAEoCRIOCgZyZWdpb24YAiABKAkiHwoLRW50aXR5U3RhdGUSEAoIZW50aXRp",
            "ZXMYASADKAkiIQoNRW50aXR5U3RhcnRlZBIQCghlbnRpdHlJZBgBIAEoCSIh",
            "Cg1FbnRpdHlTdG9wcGVkEhAKCGVudGl0eUlkGAEgASgJIjAKClNoYXJkU3Rh",
            "dHMSDQoFc2hhcmQYASABKAkSEwoLZW50aXR5Q291bnQYAiABKAUiHwoLU3Rh",
            "cnRFbnRpdHkSEAoIZW50aXR5SWQYASABKAkiMwoOU3RhcnRFbnRpdHlBY2sS",
            "EAoIZW50aXR5SWQYASABKAkSDwoHc2hhcmRJZBgCIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Parser, new[]{ "Shards", "Regions", "RegionProxies", "UnallocatedShards" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry.Parser, new[]{ "ShardId", "RegionRef" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ActorRefMessage), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ActorRefMessage.Parser, new[]{ "Ref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardIdMessage), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardIdMessage.Parser, new[]{ "Shard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardHomeAllocated), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardHomeAllocated.Parser, new[]{ "Shard", "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardHome), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardHome.Parser, new[]{ "Shard", "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.EntityState), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.EntityState.Parser, new[]{ "Entities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.EntityStarted), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.EntityStarted.Parser, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.EntityStopped), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.EntityStopped.Parser, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardStats), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardStats.Parser, new[]{ "Shard", "EntityCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.StartEntity), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.StartEntity.Parser, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Sharding.Serialization.Proto.Msg.StartEntityAck), global::Akka.Cluster.Sharding.Serialization.Proto.Msg.StartEntityAck.Parser, new[]{ "EntityId", "ShardId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class CoordinatorState : pb::IMessage<CoordinatorState> {
    private static readonly pb::MessageParser<CoordinatorState> _parser = new pb::MessageParser<CoordinatorState>(() => new CoordinatorState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoordinatorState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordinatorState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordinatorState(CoordinatorState other) : this() {
      shards_ = other.shards_.Clone();
      regions_ = other.regions_.Clone();
      regionProxies_ = other.regionProxies_.Clone();
      unallocatedShards_ = other.unallocatedShards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordinatorState Clone() {
      return new CoordinatorState(this);
    }

    /// <summary>Field number for the "shards" field.</summary>
    public const int ShardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry> _repeated_shards_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry> shards_ = new pbc::RepeatedField<global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Types.ShardEntry> Shards {
      get { return shards_; }
    }

    /// <summary>Field number for the "regions" field.</summary>
    public const int RegionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_regions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> regions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Regions {
      get { return regions_; }
    }

    /// <summary>Field number for the "regionProxies" field.</summary>
    public const int RegionProxiesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_regionProxies_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> regionProxies_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RegionProxies {
      get { return regionProxies_; }
    }

    /// <summary>Field number for the "unallocatedShards" field.</summary>
    public const int UnallocatedShardsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_unallocatedShards_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> unallocatedShards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnallocatedShards {
      get { return unallocatedShards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoordinatorState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoordinatorState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shards_.Equals(other.shards_)) return false;
      if(!regions_.Equals(other.regions_)) return false;
      if(!regionProxies_.Equals(other.regionProxies_)) return false;
      if(!unallocatedShards_.Equals(other.unallocatedShards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shards_.GetHashCode();
      hash ^= regions_.GetHashCode();
      hash ^= regionProxies_.GetHashCode();
      hash ^= unallocatedShards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shards_.WriteTo(output, _repeated_shards_codec);
      regions_.WriteTo(output, _repeated_regions_codec);
      regionProxies_.WriteTo(output, _repeated_regionProxies_codec);
      unallocatedShards_.WriteTo(output, _repeated_unallocatedShards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shards_.CalculateSize(_repeated_shards_codec);
      size += regions_.CalculateSize(_repeated_regions_codec);
      size += regionProxies_.CalculateSize(_repeated_regionProxies_codec);
      size += unallocatedShards_.CalculateSize(_repeated_unallocatedShards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoordinatorState other) {
      if (other == null) {
        return;
      }
      shards_.Add(other.shards_);
      regions_.Add(other.regions_);
      regionProxies_.Add(other.regionProxies_);
      unallocatedShards_.Add(other.unallocatedShards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            shards_.AddEntriesFrom(input, _repeated_shards_codec);
            break;
          }
          case 18: {
            regions_.AddEntriesFrom(input, _repeated_regions_codec);
            break;
          }
          case 26: {
            regionProxies_.AddEntriesFrom(input, _repeated_regionProxies_codec);
            break;
          }
          case 34: {
            unallocatedShards_.AddEntriesFrom(input, _repeated_unallocatedShards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CoordinatorState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class ShardEntry : pb::IMessage<ShardEntry> {
        private static readonly pb::MessageParser<ShardEntry> _parser = new pb::MessageParser<ShardEntry>(() => new ShardEntry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShardEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.CoordinatorState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardEntry(ShardEntry other) : this() {
          shardId_ = other.shardId_;
          regionRef_ = other.regionRef_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardEntry Clone() {
          return new ShardEntry(this);
        }

        /// <summary>Field number for the "shardId" field.</summary>
        public const int ShardIdFieldNumber = 1;
        private string shardId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShardId {
          get { return shardId_; }
          set {
            shardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "regionRef" field.</summary>
        public const int RegionRefFieldNumber = 2;
        private string regionRef_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RegionRef {
          get { return regionRef_; }
          set {
            regionRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShardEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShardEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ShardId != other.ShardId) return false;
          if (RegionRef != other.RegionRef) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ShardId.Length != 0) hash ^= ShardId.GetHashCode();
          if (RegionRef.Length != 0) hash ^= RegionRef.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ShardId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ShardId);
          }
          if (RegionRef.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RegionRef);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ShardId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardId);
          }
          if (RegionRef.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionRef);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShardEntry other) {
          if (other == null) {
            return;
          }
          if (other.ShardId.Length != 0) {
            ShardId = other.ShardId;
          }
          if (other.RegionRef.Length != 0) {
            RegionRef = other.RegionRef;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ShardId = input.ReadString();
                break;
              }
              case 18: {
                RegionRef = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class ActorRefMessage : pb::IMessage<ActorRefMessage> {
    private static readonly pb::MessageParser<ActorRefMessage> _parser = new pb::MessageParser<ActorRefMessage>(() => new ActorRefMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorRefMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefMessage(ActorRefMessage other) : this() {
      ref_ = other.ref_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefMessage Clone() {
      return new ActorRefMessage(this);
    }

    /// <summary>Field number for the "ref" field.</summary>
    public const int RefFieldNumber = 1;
    private string ref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ref {
      get { return ref_; }
      set {
        ref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorRefMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorRefMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ref != other.Ref) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ref.Length != 0) hash ^= Ref.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ref.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ref);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorRefMessage other) {
      if (other == null) {
        return;
      }
      if (other.Ref.Length != 0) {
        Ref = other.Ref;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ref = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ShardIdMessage : pb::IMessage<ShardIdMessage> {
    private static readonly pb::MessageParser<ShardIdMessage> _parser = new pb::MessageParser<ShardIdMessage>(() => new ShardIdMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShardIdMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardIdMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardIdMessage(ShardIdMessage other) : this() {
      shard_ = other.shard_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardIdMessage Clone() {
      return new ShardIdMessage(this);
    }

    /// <summary>Field number for the "shard" field.</summary>
    public const int ShardFieldNumber = 1;
    private string shard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shard {
      get { return shard_; }
      set {
        shard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShardIdMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShardIdMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shard != other.Shard) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shard.Length != 0) hash ^= Shard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shard.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Shard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shard);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShardIdMessage other) {
      if (other == null) {
        return;
      }
      if (other.Shard.Length != 0) {
        Shard = other.Shard;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Shard = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ShardHomeAllocated : pb::IMessage<ShardHomeAllocated> {
    private static readonly pb::MessageParser<ShardHomeAllocated> _parser = new pb::MessageParser<ShardHomeAllocated>(() => new ShardHomeAllocated());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShardHomeAllocated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardHomeAllocated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardHomeAllocated(ShardHomeAllocated other) : this() {
      shard_ = other.shard_;
      region_ = other.region_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardHomeAllocated Clone() {
      return new ShardHomeAllocated(this);
    }

    /// <summary>Field number for the "shard" field.</summary>
    public const int ShardFieldNumber = 1;
    private string shard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shard {
      get { return shard_; }
      set {
        shard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 2;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShardHomeAllocated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShardHomeAllocated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shard != other.Shard) return false;
      if (Region != other.Region) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shard.Length != 0) hash ^= Shard.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shard.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Shard);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shard);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShardHomeAllocated other) {
      if (other == null) {
        return;
      }
      if (other.Shard.Length != 0) {
        Shard = other.Shard;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Shard = input.ReadString();
            break;
          }
          case 18: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ShardHome : pb::IMessage<ShardHome> {
    private static readonly pb::MessageParser<ShardHome> _parser = new pb::MessageParser<ShardHome>(() => new ShardHome());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShardHome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardHome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardHome(ShardHome other) : this() {
      shard_ = other.shard_;
      region_ = other.region_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardHome Clone() {
      return new ShardHome(this);
    }

    /// <summary>Field number for the "shard" field.</summary>
    public const int ShardFieldNumber = 1;
    private string shard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shard {
      get { return shard_; }
      set {
        shard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 2;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShardHome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShardHome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shard != other.Shard) return false;
      if (Region != other.Region) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shard.Length != 0) hash ^= Shard.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shard.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Shard);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shard);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShardHome other) {
      if (other == null) {
        return;
      }
      if (other.Shard.Length != 0) {
        Shard = other.Shard;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Shard = input.ReadString();
            break;
          }
          case 18: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EntityState : pb::IMessage<EntityState> {
    private static readonly pb::MessageParser<EntityState> _parser = new pb::MessageParser<EntityState>(() => new EntityState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState(EntityState other) : this() {
      entities_ = other.entities_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState Clone() {
      return new EntityState(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_entities_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> entities_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Entities {
      get { return entities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entities_.WriteTo(output, _repeated_entities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityState other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EntityStarted : pb::IMessage<EntityStarted> {
    private static readonly pb::MessageParser<EntityStarted> _parser = new pb::MessageParser<EntityStarted>(() => new EntityStarted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStarted(EntityStarted other) : this() {
      entityId_ = other.entityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStarted Clone() {
      return new EntityStarted(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private string entityId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityId {
      get { return entityId_; }
      set {
        entityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId.Length != 0) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStarted other) {
      if (other == null) {
        return;
      }
      if (other.EntityId.Length != 0) {
        EntityId = other.EntityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EntityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EntityStopped : pb::IMessage<EntityStopped> {
    private static readonly pb::MessageParser<EntityStopped> _parser = new pb::MessageParser<EntityStopped>(() => new EntityStopped());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStopped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStopped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStopped(EntityStopped other) : this() {
      entityId_ = other.entityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStopped Clone() {
      return new EntityStopped(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private string entityId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityId {
      get { return entityId_; }
      set {
        entityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStopped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStopped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId.Length != 0) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStopped other) {
      if (other == null) {
        return;
      }
      if (other.EntityId.Length != 0) {
        EntityId = other.EntityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EntityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ShardStats : pb::IMessage<ShardStats> {
    private static readonly pb::MessageParser<ShardStats> _parser = new pb::MessageParser<ShardStats>(() => new ShardStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShardStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardStats(ShardStats other) : this() {
      shard_ = other.shard_;
      entityCount_ = other.entityCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardStats Clone() {
      return new ShardStats(this);
    }

    /// <summary>Field number for the "shard" field.</summary>
    public const int ShardFieldNumber = 1;
    private string shard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shard {
      get { return shard_; }
      set {
        shard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entityCount" field.</summary>
    public const int EntityCountFieldNumber = 2;
    private int entityCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityCount {
      get { return entityCount_; }
      set {
        entityCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShardStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShardStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shard != other.Shard) return false;
      if (EntityCount != other.EntityCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shard.Length != 0) hash ^= Shard.GetHashCode();
      if (EntityCount != 0) hash ^= EntityCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shard.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Shard);
      }
      if (EntityCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shard);
      }
      if (EntityCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShardStats other) {
      if (other == null) {
        return;
      }
      if (other.Shard.Length != 0) {
        Shard = other.Shard;
      }
      if (other.EntityCount != 0) {
        EntityCount = other.EntityCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Shard = input.ReadString();
            break;
          }
          case 16: {
            EntityCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartEntity : pb::IMessage<StartEntity> {
    private static readonly pb::MessageParser<StartEntity> _parser = new pb::MessageParser<StartEntity>(() => new StartEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartEntity(StartEntity other) : this() {
      entityId_ = other.entityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartEntity Clone() {
      return new StartEntity(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private string entityId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityId {
      get { return entityId_; }
      set {
        entityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId.Length != 0) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartEntity other) {
      if (other == null) {
        return;
      }
      if (other.EntityId.Length != 0) {
        EntityId = other.EntityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EntityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartEntityAck : pb::IMessage<StartEntityAck> {
    private static readonly pb::MessageParser<StartEntityAck> _parser = new pb::MessageParser<StartEntityAck>(() => new StartEntityAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartEntityAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ClusterShardingMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartEntityAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartEntityAck(StartEntityAck other) : this() {
      entityId_ = other.entityId_;
      shardId_ = other.shardId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartEntityAck Clone() {
      return new StartEntityAck(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private string entityId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityId {
      get { return entityId_; }
      set {
        entityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shardId" field.</summary>
    public const int ShardIdFieldNumber = 2;
    private string shardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardId {
      get { return shardId_; }
      set {
        shardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartEntityAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartEntityAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (ShardId != other.ShardId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId.Length != 0) hash ^= EntityId.GetHashCode();
      if (ShardId.Length != 0) hash ^= ShardId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityId);
      }
      if (ShardId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityId);
      }
      if (ShardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartEntityAck other) {
      if (other == null) {
        return;
      }
      if (other.EntityId.Length != 0) {
        EntityId = other.EntityId;
      }
      if (other.ShardId.Length != 0) {
        ShardId = other.ShardId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EntityId = input.ReadString();
            break;
          }
          case 18: {
            ShardId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
