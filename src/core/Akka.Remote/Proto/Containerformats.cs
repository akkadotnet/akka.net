//-----------------------------------------------------------------------
// <copyright file="Containerformats.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------

// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Containerformats
{
    #region Extension registration

    public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
    {
    }

    #endregion

    #region Static variables

    internal static pbd::MessageDescriptor internal__static_SelectionEnvelope__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::SelectionEnvelope, global::SelectionEnvelope.Builder>
        internal__static_SelectionEnvelope__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_Selection__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::Selection, global::Selection.Builder>
        internal__static_Selection__FieldAccessorTable;

    #endregion

    #region Descriptor

    private static pbd::FileDescriptor descriptor;

    static Containerformats()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChZjb250YWluZXJmb3JtYXRzLnByb3RvIngKEVNlbGVjdGlvbkVudmVsb3Bl" +
            "EhcKD2VuY2xvc2VkTWVzc2FnZRgBIAIoDBIUCgxzZXJpYWxpemVySWQYAiAC" +
            "KAUSGwoHcGF0dGVybhgDIAMoCzIKLlNlbGVjdGlvbhIXCg9tZXNzYWdlTWFu" +
            "aWZlc3QYBCABKAwiOAoJU2VsZWN0aW9uEhoKBHR5cGUYASACKA4yDC5QYXR0" +
            "ZXJuVHlwZRIPCgdtYXRjaGVyGAIgASgJKjwKC1BhdHRlcm5UeXBlEgoKBlBB" +
            "UkVOVBAAEg4KCkNISUxEX05BTUUQARIRCg1DSElMRF9QQVRURVJOEAJCAkgB");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root)
        {
            descriptor = root;
            internal__static_SelectionEnvelope__Descriptor = Descriptor.MessageTypes[0];
            internal__static_SelectionEnvelope__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::SelectionEnvelope, global::SelectionEnvelope.Builder>(
                    internal__static_SelectionEnvelope__Descriptor,
                    new string[] {"EnclosedMessage", "SerializerId", "Pattern", "MessageManifest",});
            internal__static_Selection__Descriptor = Descriptor.MessageTypes[1];
            internal__static_Selection__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::Selection, global::Selection.Builder>(
                    internal__static_Selection__Descriptor,
                    new string[] {"Type", "Matcher",});
            return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[]
            {
            }, assigner);
    }

    public static pbd::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }

    #endregion
}

#region Enums

public enum PatternType
{
    PARENT = 0,
    CHILD_NAME = 1,
    CHILD_PATTERN = 2,
}

#endregion

#region Messages

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SelectionEnvelope : pb::GeneratedMessage<SelectionEnvelope, SelectionEnvelope.Builder>
{
    public const int EnclosedMessageFieldNumber = 1;
    public const int SerializerIdFieldNumber = 2;
    public const int PatternFieldNumber = 3;
    public const int MessageManifestFieldNumber = 4;
    private static readonly SelectionEnvelope defaultInstance = new SelectionEnvelope().MakeReadOnly();

    private static readonly string[] _selectionEnvelopeFieldNames = new string[]
    {"enclosedMessage", "messageManifest", "pattern", "serializerId"};

    private static readonly uint[] _selectionEnvelopeFieldTags = new uint[] {10, 34, 26, 16};
    private pb::ByteString enclosedMessage_ = pb::ByteString.Empty;
    private bool hasEnclosedMessage;
    private bool hasMessageManifest;
    private bool hasSerializerId;
    private int memoizedSerializedSize = -1;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    private pbc::PopsicleList<global::Selection> pattern_ = new pbc::PopsicleList<global::Selection>();
    private int serializerId_;

    static SelectionEnvelope()
    {
        ReferenceEquals(global::Containerformats.Descriptor, null);
    }

    private SelectionEnvelope()
    {
    }

    public static SelectionEnvelope DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override SelectionEnvelope DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override SelectionEnvelope ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Containerformats.internal__static_SelectionEnvelope__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SelectionEnvelope, SelectionEnvelope.Builder>
        InternalFieldAccessors
    {
        get { return global::Containerformats.internal__static_SelectionEnvelope__FieldAccessorTable; }
    }

    public bool HasEnclosedMessage
    {
        get { return hasEnclosedMessage; }
    }

    public pb::ByteString EnclosedMessage
    {
        get { return enclosedMessage_; }
    }

    public bool HasSerializerId
    {
        get { return hasSerializerId; }
    }

    public int SerializerId
    {
        get { return serializerId_; }
    }

    public scg::IList<global::Selection> PatternList
    {
        get { return pattern_; }
    }

    public int PatternCount
    {
        get { return pattern_.Count; }
    }

    public bool HasMessageManifest
    {
        get { return hasMessageManifest; }
    }

    public pb::ByteString MessageManifest
    {
        get { return messageManifest_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasEnclosedMessage) return false;
            if (!hasSerializerId) return false;
            foreach (global::Selection element in PatternList)
            {
                if (!element.IsInitialized) return false;
            }
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasEnclosedMessage)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(1, EnclosedMessage);
            }
            if (hasSerializerId)
            {
                size += pb::CodedOutputStream.ComputeInt32Size(2, SerializerId);
            }
            foreach (global::Selection element in PatternList)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(3, element);
            }
            if (hasMessageManifest)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(4, MessageManifest);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public global::Selection GetPattern(int index)
    {
        return pattern_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _selectionEnvelopeFieldNames;
        if (hasEnclosedMessage)
        {
            output.WriteBytes(1, field_names[0], EnclosedMessage);
        }
        if (hasSerializerId)
        {
            output.WriteInt32(2, field_names[3], SerializerId);
        }
        if (pattern_.Count > 0)
        {
            output.WriteMessageArray(3, field_names[2], pattern_);
        }
        if (hasMessageManifest)
        {
            output.WriteBytes(4, field_names[1], MessageManifest);
        }
        UnknownFields.WriteTo(output);
    }

    public static SelectionEnvelope ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static SelectionEnvelope ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static SelectionEnvelope ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static SelectionEnvelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private SelectionEnvelope MakeReadOnly()
    {
        pattern_.MakeReadOnly();
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(SelectionEnvelope prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SelectionEnvelope, Builder>
    {
        private SelectionEnvelope result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(SelectionEnvelope cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override SelectionEnvelope MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override SelectionEnvelope DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasEnclosedMessage
        {
            get { return result.hasEnclosedMessage; }
        }

        public pb::ByteString EnclosedMessage
        {
            get { return result.EnclosedMessage; }
            set { SetEnclosedMessage(value); }
        }

        public bool HasSerializerId
        {
            get { return result.hasSerializerId; }
        }

        public int SerializerId
        {
            get { return result.SerializerId; }
            set { SetSerializerId(value); }
        }

        public pbc::IPopsicleList<global::Selection> PatternList
        {
            get { return PrepareBuilder().pattern_; }
        }

        public int PatternCount
        {
            get { return result.PatternCount; }
        }

        public bool HasMessageManifest
        {
            get { return result.hasMessageManifest; }
        }

        public pb::ByteString MessageManifest
        {
            get { return result.MessageManifest; }
            set { SetMessageManifest(value); }
        }

        private SelectionEnvelope PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                SelectionEnvelope original = result;
                result = new SelectionEnvelope();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override SelectionEnvelope BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is SelectionEnvelope)
            {
                return MergeFrom((SelectionEnvelope) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(SelectionEnvelope other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasEnclosedMessage)
            {
                EnclosedMessage = other.EnclosedMessage;
            }
            if (other.HasSerializerId)
            {
                SerializerId = other.SerializerId;
            }
            if (other.pattern_.Count != 0)
            {
                result.pattern_.Add(other.pattern_);
            }
            if (other.HasMessageManifest)
            {
                MessageManifest = other.MessageManifest;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_selectionEnvelopeFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _selectionEnvelopeFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        result.hasEnclosedMessage = input.ReadBytes(ref result.enclosedMessage_);
                        break;
                    }
                    case 16:
                    {
                        result.hasSerializerId = input.ReadInt32(ref result.serializerId_);
                        break;
                    }
                    case 26:
                    {
                        input.ReadMessageArray(tag, field_name, result.pattern_, global::Selection.DefaultInstance,
                            extensionRegistry);
                        break;
                    }
                    case 34:
                    {
                        result.hasMessageManifest = input.ReadBytes(ref result.messageManifest_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetEnclosedMessage(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEnclosedMessage = true;
            result.enclosedMessage_ = value;
            return this;
        }

        public Builder ClearEnclosedMessage()
        {
            PrepareBuilder();
            result.hasEnclosedMessage = false;
            result.enclosedMessage_ = pb::ByteString.Empty;
            return this;
        }

        public Builder SetSerializerId(int value)
        {
            PrepareBuilder();
            result.hasSerializerId = true;
            result.serializerId_ = value;
            return this;
        }

        public Builder ClearSerializerId()
        {
            PrepareBuilder();
            result.hasSerializerId = false;
            result.serializerId_ = 0;
            return this;
        }

        public global::Selection GetPattern(int index)
        {
            return result.GetPattern(index);
        }

        public Builder SetPattern(int index, global::Selection value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.pattern_[index] = value;
            return this;
        }

        public Builder SetPattern(int index, global::Selection.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.pattern_[index] = builderForValue.Build();
            return this;
        }

        public Builder AddPattern(global::Selection value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.pattern_.Add(value);
            return this;
        }

        public Builder AddPattern(global::Selection.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.pattern_.Add(builderForValue.Build());
            return this;
        }

        public Builder AddRangePattern(scg::IEnumerable<global::Selection> values)
        {
            PrepareBuilder();
            result.pattern_.Add(values);
            return this;
        }

        public Builder ClearPattern()
        {
            PrepareBuilder();
            result.pattern_.Clear();
            return this;
        }

        public Builder SetMessageManifest(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessageManifest = true;
            result.messageManifest_ = value;
            return this;
        }

        public Builder ClearMessageManifest()
        {
            PrepareBuilder();
            result.hasMessageManifest = false;
            result.messageManifest_ = pb::ByteString.Empty;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Selection : pb::GeneratedMessage<Selection, Selection.Builder>
{
    public const int TypeFieldNumber = 1;
    public const int MatcherFieldNumber = 2;
    private static readonly Selection defaultInstance = new Selection().MakeReadOnly();
    private static readonly string[] _selectionFieldNames = new string[] {"matcher", "type"};
    private static readonly uint[] _selectionFieldTags = new uint[] {18, 8};
    private bool hasMatcher;
    private bool hasType;
    private string matcher_ = "";
    private int memoizedSerializedSize = -1;
    private global::PatternType type_ = global::PatternType.PARENT;

    static Selection()
    {
        ReferenceEquals(global::Containerformats.Descriptor, null);
    }

    private Selection()
    {
    }

    public static Selection DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override Selection DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override Selection ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Containerformats.internal__static_Selection__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Selection, Selection.Builder> InternalFieldAccessors
    {
        get { return global::Containerformats.internal__static_Selection__FieldAccessorTable; }
    }

    public bool HasType
    {
        get { return hasType; }
    }

    public global::PatternType Type
    {
        get { return type_; }
    }

    public bool HasMatcher
    {
        get { return hasMatcher; }
    }

    public string Matcher
    {
        get { return matcher_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasType) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasType)
            {
                size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            if (hasMatcher)
            {
                size += pb::CodedOutputStream.ComputeStringSize(2, Matcher);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _selectionFieldNames;
        if (hasType)
        {
            output.WriteEnum(1, field_names[1], (int) Type, Type);
        }
        if (hasMatcher)
        {
            output.WriteString(2, field_names[0], Matcher);
        }
        UnknownFields.WriteTo(output);
    }

    public static Selection ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static Selection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static Selection ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static Selection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static Selection ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static Selection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static Selection ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static Selection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static Selection ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static Selection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private Selection MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(Selection prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Selection, Builder>
    {
        private Selection result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(Selection cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override Selection MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override Selection DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasType
        {
            get { return result.hasType; }
        }

        public global::PatternType Type
        {
            get { return result.Type; }
            set { SetType(value); }
        }

        public bool HasMatcher
        {
            get { return result.hasMatcher; }
        }

        public string Matcher
        {
            get { return result.Matcher; }
            set { SetMatcher(value); }
        }

        private Selection PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                Selection original = result;
                result = new Selection();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override Selection BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is Selection)
            {
                return MergeFrom((Selection) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(Selection other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType)
            {
                Type = other.Type;
            }
            if (other.HasMatcher)
            {
                Matcher = other.Matcher;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_selectionFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _selectionFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 8:
                    {
                        object unknown;
                        if (input.ReadEnum(ref result.type_, out unknown))
                        {
                            result.hasType = true;
                        }
                        else if (unknown is int)
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            unknownFields.MergeVarintField(1, (ulong) (int) unknown);
                        }
                        break;
                    }
                    case 18:
                    {
                        result.hasMatcher = input.ReadString(ref result.matcher_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetType(global::PatternType value)
        {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
        }

        public Builder ClearType()
        {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::PatternType.PARENT;
            return this;
        }

        public Builder SetMatcher(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMatcher = true;
            result.matcher_ = value;
            return this;
        }

        public Builder ClearMatcher()
        {
            PrepareBuilder();
            result.hasMatcher = false;
            result.matcher_ = "";
            return this;
        }
    }
}

#endregion

#endregion Designer generated code

