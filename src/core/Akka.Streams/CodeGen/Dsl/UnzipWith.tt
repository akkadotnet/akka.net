<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// --- auto generated: <#= System.DateTime.UtcNow.ToString() #> --- //
//-----------------------------------------------------------------------
// <copyright file="UnzipWith.cs" company="Akka.NET Project">
//     Copyright (C) 2015-2016 Lightbend Inc. <http://www.lightbend.com>
//     Copyright (C) 2013-2016 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
using System;
using Akka.Streams.Stage;
<# var count = 8; #>

namespace Akka.Streams.Dsl
{
	public interface IUnzipWithCreator<out TIn, in TOut, out T>
	{
		T Create(Func<TIn, TOut> unzipper);
	}	
	<# for (int i = 2; i < count; i++) { 
	   var typeParams = string.Join(", ", Enumerable.Range(0, i).Select(x => "TOut" + x));
	#>

	public abstract class UnzipWithCreator<TIn, <#= typeParams #>> : IUnzipWithCreator<TIn, Tuple<<#= typeParams #>>, UnzipWith<TIn, <#= typeParams #>>>
	{
		public virtual UnzipWith<TIn, <#= typeParams #>> Create(Func<TIn, Tuple<<#= typeParams #>>> unzipper)
		{
			return new UnzipWith<TIn, <#= typeParams #>>(unzipper);
		}
	}
	<# } #>

	public partial class UnzipWith 
	{
		<# for (int i = 2; i < count; i++) { 
		   var typeParams = string.Join(", ", Enumerable.Range(0, i).Select(x => "TOut" + x));
		#>

		public static UnzipWith<TIn, <#=typeParams#>> Apply<TIn, <#=typeParams#>>(Func<TIn, Tuple<<#=typeParams#>>> unzipper, UnzipWithCreator<TIn, <#=typeParams#>> creator)
		{
			return creator.Create(unzipper);
		}	
		<# } #>

	}	
	<# for (int i = 2; i < count; i++) { 
	   var typeParams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
	#>

	public class UnzipWith<TIn, <#= typeParams #>> : GraphStage<FanOutShape<TIn, <#= typeParams #>>>
	{
		private sealed class UnzipWithStageLogic : InGraphStageLogic 
		{
			private readonly UnzipWith<TIn, <#= typeParams #>> _stage;
			private int _pendingCount = <#=i#>;
			private int _downstreamRunning = <#=i#>;
	<# for (var t = 0; t < i; t++) { #>
		private bool _pending<#=t#> = true;
	<# } #>

			public UnzipWithStageLogic(Shape shape, UnzipWith<TIn, <#= typeParams #>> stage) : base(shape)
			{
				_stage = stage;

				SetHandler(stage.In, this);				
				<# for (var t = 0; t < i; t++) { #>

				SetHandler(stage.Out<#=t#>, onPull: () => {
					_pendingCount--;
					_pending<#=t#> = false;
					if (_pendingCount == 0) Pull(stage.In);
				},
				onDownstreamFinish: () => {
					_downstreamRunning--;
					if (_downstreamRunning == 0) CompleteStage();
					else 
					{
						if (_pending<#=t#>) _pendingCount--;
						if (_pendingCount == 0 && !HasBeenPulled(stage.In)) Pull(stage.In);
					}
				});
				<# } #>

			}

			public override void  OnPush()
			{
				var elements = _stage._unzipper(Grab(_stage.In));
					
				<# for (var t = 0; t < i; t++) { #>
if (!IsClosed(_stage.Out<#=t#>)) 
				{
					Push(_stage.Out<#=t#>, elements.Item<#=t+1#>);
					_pending<#=t#> = true;
				}
				<# } #>

				_pendingCount = _downstreamRunning;
			}
		}		

		private readonly Func<TIn, Tuple<<#= typeParams #>>> _unzipper;
		public UnzipWith(Func<TIn, Tuple<<#= typeParams #>>> unzipper)
		{
			_unzipper = unzipper;

			InitialAttributes = Attributes.CreateName("UnzipWith");
			Shape = new FanOutShape<TIn, <#= typeParams #>>("UnzipWith");
			In = Shape.In;

			<# for (var t = 0; t < i; t++) { #>
Out<#=t#> = Shape.Out<#=t#>;
			<# } #>

		}

		public Inlet<TIn> In { get; }

		<# for (var t = 0; t < i; t++) { #>
public Outlet<T<#=t#>> Out<#=t#> { get; }
		<# } #>

        protected sealed override Attributes InitialAttributes { get; }
		public sealed override FanOutShape<TIn, <#= typeParams #>> Shape { get; }
        protected sealed override GraphStageLogic CreateLogic(Attributes inheritedAttributes)
        {
            return new UnzipWithStageLogic(Shape, this);
        }
	}
	<# } #>

}