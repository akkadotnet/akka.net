// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DistributedPubSubMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from DistributedPubSubMessages.proto</summary>
  internal static partial class DistributedPubSubMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for DistributedPubSubMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DistributedPubSubMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9EaXN0cmlidXRlZFB1YlN1Yk1lc3NhZ2VzLnByb3RvEjtBa2thLkNsdXN0",
            "ZXIuVG9vbHMuUHVibGlzaFN1YnNjcmliZS5TZXJpYWxpemF0aW9uLlByb3Rv",
            "Lk1zZxoWQ29udGFpbmVyRm9ybWF0cy5wcm90byLfAQoGU3RhdHVzEl0KCHZl",
            "cnNpb25zGAEgAygLMksuQWtrYS5DbHVzdGVyLlRvb2xzLlB1Ymxpc2hTdWJz",
            "Y3JpYmUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuU3RhdHVzLlZlcnNpb24S",
            "FQoNcmVwbHlUb1N0YXR1cxgCIAEoCBpfCgdWZXJzaW9uEkEKB2FkZHJlc3MY",
            "ASABKAsyMC5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5B",
            "ZGRyZXNzRGF0YRIRCgl0aW1lc3RhbXAYAiABKAMi1gMKBURlbHRhEloKB2J1",
            "Y2tldHMYASADKAsySS5Ba2thLkNsdXN0ZXIuVG9vbHMuUHVibGlzaFN1YnNj",
            "cmliZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5EZWx0YS5CdWNrZXQaKwoL",
            "VmFsdWVIb2xkZXISDwoHdmVyc2lvbhgBIAEoAxILCgNyZWYYAiABKAkawwIK",
            "BkJ1Y2tldBI/CgVvd25lchgBIAEoCzIwLkFra2EuUmVtb3RlLlNlcmlhbGl6",
            "YXRpb24uUHJvdG8uTXNnLkFkZHJlc3NEYXRhEg8KB3ZlcnNpb24YAiABKAMS",
            "ZwoHY29udGVudBgDIAMoCzJWLkFra2EuQ2x1c3Rlci5Ub29scy5QdWJsaXNo",
            "U3Vic2NyaWJlLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkRlbHRhLkJ1Y2tl",
            "dC5Db250ZW50RW50cnkafgoMQ29udGVudEVudHJ5EgsKA2tleRgBIAEoCRJd",
            "CgV2YWx1ZRgCIAEoCzJOLkFra2EuQ2x1c3Rlci5Ub29scy5QdWJsaXNoU3Vi",
            "c2NyaWJlLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkRlbHRhLlZhbHVlSG9s",
            "ZGVyOgI4ASJqCgRTZW5kEgwKBHBhdGgYASABKAkSFQoNbG9jYWxBZmZpbml0",
            "eRgCIAEoCBI9CgdwYXlsb2FkGAMgASgLMiwuQWtrYS5SZW1vdGUuU2VyaWFs",
            "aXphdGlvbi5Qcm90by5Nc2cuUGF5bG9hZCJsCglTZW5kVG9BbGwSDAoEcGF0",
            "aBgBIAEoCRISCgphbGxCdXRTZWxmGAIgASgIEj0KB3BheWxvYWQYAyABKAsy",
            "LC5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5QYXlsb2Fk",
            "IlcKB1B1Ymxpc2gSDQoFdG9waWMYASABKAkSPQoHcGF5bG9hZBgDIAEoCzIs",
            "LkFra2EuUmVtb3RlLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLlBheWxvYWQi",
            "VAoTU2VuZFRvT25lU3Vic2NyaWJlchI9CgdwYXlsb2FkGAEgASgLMiwuQWtr",
            "YS5SZW1vdGUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuUGF5bG9hZGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Parser, new[]{ "Versions", "ReplyToStatus" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version.Parser, new[]{ "Address", "Timestamp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Parser, new[]{ "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder.Parser, new[]{ "Version", "Ref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket.Parser, new[]{ "Owner", "Version", "Content" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Send), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Send.Parser, new[]{ "Path", "LocalAffinity", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.SendToAll), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.SendToAll.Parser, new[]{ "Path", "AllButSelf", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Publish), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Publish.Parser, new[]{ "Topic", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.SendToOneSubscriber), global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.SendToOneSubscriber.Parser, new[]{ "Payload" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      versions_ = other.versions_.Clone();
      replyToStatus_ = other.replyToStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version> versions_ = new pbc::RepeatedField<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Types.Version> Versions {
      get { return versions_; }
    }

    /// <summary>Field number for the "replyToStatus" field.</summary>
    public const int ReplyToStatusFieldNumber = 2;
    private bool replyToStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReplyToStatus {
      get { return replyToStatus_; }
      set {
        replyToStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versions_.Equals(other.versions_)) return false;
      if (ReplyToStatus != other.ReplyToStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versions_.GetHashCode();
      if (ReplyToStatus != false) hash ^= ReplyToStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versions_.WriteTo(output, _repeated_versions_codec);
      if (ReplyToStatus != false) {
        output.WriteRawTag(16);
        output.WriteBool(ReplyToStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versions_.CalculateSize(_repeated_versions_codec);
      if (ReplyToStatus != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      versions_.Add(other.versions_);
      if (other.ReplyToStatus != false) {
        ReplyToStatus = other.ReplyToStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
          case 16: {
            ReplyToStatus = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Status message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Status.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          Address = other.address_ != null ? other.Address.Clone() : null;
          timestamp_ = other.timestamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private global::Akka.Remote.Serialization.Proto.Msg.AddressData address_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Remote.Serialization.Proto.Msg.AddressData Address {
          get { return address_; }
          set {
            address_ = value;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Address, other.Address)) return false;
          if (Timestamp != other.Timestamp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (address_ != null) hash ^= Address.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (address_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Address);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Timestamp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (address_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.address_ != null) {
            if (address_ == null) {
              address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();
            }
            Address.MergeFrom(other.Address);
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (address_ == null) {
                  address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();
                }
                input.ReadMessage(address_);
                break;
              }
              case 16: {
                Timestamp = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Delta : pb::IMessage<Delta> {
    private static readonly pb::MessageParser<Delta> _parser = new pb::MessageParser<Delta>(() => new Delta());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta(Delta other) : this() {
      buckets_ = other.buckets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta Clone() {
      return new Delta(this);
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket> _repeated_buckets_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.Bucket> Buckets {
      get { return buckets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buckets_.Equals(other.buckets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buckets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buckets_.WriteTo(output, _repeated_buckets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buckets_.CalculateSize(_repeated_buckets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delta other) {
      if (other == null) {
        return;
      }
      buckets_.Add(other.buckets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Delta message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class ValueHolder : pb::IMessage<ValueHolder> {
        private static readonly pb::MessageParser<ValueHolder> _parser = new pb::MessageParser<ValueHolder>(() => new ValueHolder());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValueHolder> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHolder() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHolder(ValueHolder other) : this() {
          version_ = other.version_;
          ref_ = other.ref_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHolder Clone() {
          return new ValueHolder(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private long version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "ref" field.</summary>
        public const int RefFieldNumber = 2;
        private string ref_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ref {
          get { return ref_; }
          set {
            ref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValueHolder);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValueHolder other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Version != other.Version) return false;
          if (Ref != other.Ref) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Version != 0L) hash ^= Version.GetHashCode();
          if (Ref.Length != 0) hash ^= Ref.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Version != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Version);
          }
          if (Ref.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ref);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Version != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
          }
          if (Ref.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValueHolder other) {
          if (other == null) {
            return;
          }
          if (other.Version != 0L) {
            Version = other.Version;
          }
          if (other.Ref.Length != 0) {
            Ref = other.Ref;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Version = input.ReadInt64();
                break;
              }
              case 18: {
                Ref = input.ReadString();
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Bucket : pb::IMessage<Bucket> {
        private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket(Bucket other) : this() {
          Owner = other.owner_ != null ? other.Owner.Clone() : null;
          version_ = other.version_;
          content_ = other.content_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket Clone() {
          return new Bucket(this);
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 1;
        private global::Akka.Remote.Serialization.Proto.Msg.AddressData owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Remote.Serialization.Proto.Msg.AddressData Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private long version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 3;
        private static readonly pbc::MapField<string, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder>.Codec _map_content_codec
            = new pbc::MapField<string, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder.Parser), 26);
        private readonly pbc::MapField<string, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder> content_ = new pbc::MapField<string, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.Delta.Types.ValueHolder> Content {
          get { return content_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Owner, other.Owner)) return false;
          if (Version != other.Version) return false;
          if (!Content.Equals(other.Content)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (owner_ != null) hash ^= Owner.GetHashCode();
          if (Version != 0L) hash ^= Version.GetHashCode();
          hash ^= Content.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (owner_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Owner);
          }
          if (Version != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Version);
          }
          content_.WriteTo(output, _map_content_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (owner_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
          }
          if (Version != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
          }
          size += content_.CalculateSize(_map_content_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bucket other) {
          if (other == null) {
            return;
          }
          if (other.owner_ != null) {
            if (owner_ == null) {
              owner_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();
            }
            Owner.MergeFrom(other.Owner);
          }
          if (other.Version != 0L) {
            Version = other.Version;
          }
          content_.Add(other.content_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (owner_ == null) {
                  owner_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();
                }
                input.ReadMessage(owner_);
                break;
              }
              case 16: {
                Version = input.ReadInt64();
                break;
              }
              case 26: {
                content_.AddEntriesFrom(input, _map_content_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Send normally local, but it is also used by the ClusterClient.
  /// </summary>
  internal sealed partial class Send : pb::IMessage<Send> {
    private static readonly pb::MessageParser<Send> _parser = new pb::MessageParser<Send>(() => new Send());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Send> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Send() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Send(Send other) : this() {
      path_ = other.path_;
      localAffinity_ = other.localAffinity_;
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Send Clone() {
      return new Send(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localAffinity" field.</summary>
    public const int LocalAffinityFieldNumber = 2;
    private bool localAffinity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalAffinity {
      get { return localAffinity_; }
      set {
        localAffinity_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Send);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Send other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (LocalAffinity != other.LocalAffinity) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (LocalAffinity != false) hash ^= LocalAffinity.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (LocalAffinity != false) {
        output.WriteRawTag(16);
        output.WriteBool(LocalAffinity);
      }
      if (payload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (LocalAffinity != false) {
        size += 1 + 1;
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Send other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.LocalAffinity != false) {
        LocalAffinity = other.LocalAffinity;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            LocalAffinity = input.ReadBool();
            break;
          }
          case 26: {
            if (payload_ == null) {
              payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SendToAll normally local, but it is also used by the ClusterClient.
  /// </summary>
  internal sealed partial class SendToAll : pb::IMessage<SendToAll> {
    private static readonly pb::MessageParser<SendToAll> _parser = new pb::MessageParser<SendToAll>(() => new SendToAll());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToAll(SendToAll other) : this() {
      path_ = other.path_;
      allButSelf_ = other.allButSelf_;
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToAll Clone() {
      return new SendToAll(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allButSelf" field.</summary>
    public const int AllButSelfFieldNumber = 2;
    private bool allButSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllButSelf {
      get { return allButSelf_; }
      set {
        allButSelf_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (AllButSelf != other.AllButSelf) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (AllButSelf != false) hash ^= AllButSelf.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (AllButSelf != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllButSelf);
      }
      if (payload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (AllButSelf != false) {
        size += 1 + 1;
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToAll other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.AllButSelf != false) {
        AllButSelf = other.AllButSelf;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            AllButSelf = input.ReadBool();
            break;
          }
          case 26: {
            if (payload_ == null) {
              payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Publish normally local, but it is also used by the ClusterClient.
  /// </summary>
  internal sealed partial class Publish : pb::IMessage<Publish> {
    private static readonly pb::MessageParser<Publish> _parser = new pb::MessageParser<Publish>(() => new Publish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Publish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Publish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Publish(Publish other) : this() {
      topic_ = other.topic_;
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Publish Clone() {
      return new Publish(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Publish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Publish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (payload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Publish other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            if (payload_ == null) {
              payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Send a message to only one subscriber of a group.
  /// </summary>
  internal sealed partial class SendToOneSubscriber : pb::IMessage<SendToOneSubscriber> {
    private static readonly pb::MessageParser<SendToOneSubscriber> _parser = new pb::MessageParser<SendToOneSubscriber>(() => new SendToOneSubscriber());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToOneSubscriber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToOneSubscriber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToOneSubscriber(SendToOneSubscriber other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToOneSubscriber Clone() {
      return new SendToOneSubscriber(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToOneSubscriber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToOneSubscriber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToOneSubscriber other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
