// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MiscMessageSerializer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Remote.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from MiscMessageSerializer.proto</summary>
  internal static partial class MiscMessageSerializerReflection {

    #region Descriptor
    /// <summary>File descriptor for MiscMessageSerializer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiscMessageSerializerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtNaXNjTWVzc2FnZVNlcmlhbGl6ZXIucHJvdG8SI0Fra2EuUmVtb3RlLlNl",
            "cmlhbGl6YXRpb24uUHJvdG8uTXNnGg1BZGRyZXNzLnByb3RvGg1QYXlsb2Fk",
            "LnByb3RvIhgKCEFjdG9yUmVmEgwKBHBhdGgYASABKAkiSwoISWRlbnRpZnkS",
            "PwoJbWVzc2FnZUlkGAEgASgLMiwuQWtrYS5SZW1vdGUuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5Nc2cuUGF5bG9hZCJiCg1BY3RvcklkZW50aXR5EkMKDWNvcnJl",
            "bGF0aW9uSWQYASABKAsyLC5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlBy",
            "b3RvLk1zZy5QYXlsb2FkEgwKBHBhdGgYAiABKAkiLQoeUmVtb3RlV2F0Y2hl",
            "ckhlYXJ0YmVhdFJlc3BvbnNlEgsKA3VpZBgBIAEoBCJJCgtSZW1vdGVTY29w",
            "ZRI6CgRub2RlGAEgASgLMiwuQWtrYS5SZW1vdGUuU2VyaWFsaXphdGlvbi5Q",
            "cm90by5Nc2cuQWRkcmVzcyJlCgpGcm9tQ29uZmlnEj0KB3Jlc2l6ZXIYASAB",
            "KAsyLC5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5QYXls",
            "b2FkEhgKEHJvdXRlckRpc3BhdGNoZXIYAiABKAkisQEKDkRlZmF1bHRSZXNp",
            "emVyEhIKCmxvd2VyQm91bmQYASABKA0SEgoKdXBwZXJCb3VuZBgCIAEoDRIZ",
            "ChFwcmVzc3VyZVRocmVzaG9sZBgDIAEoDRISCgpyYW1wdXBSYXRlGAQgASgB",
            "EhgKEGJhY2tvZmZUaHJlc2hvbGQYBSABKAESEwoLYmFja29mZlJhdGUYBiAB",
            "KAESGQoRbWVzc2FnZXNQZXJSZXNpemUYByABKA0inwEKEkdlbmVyaWNSb3V0",
            "aW5nUG9vbBIVCg1uck9mSW5zdGFuY2VzGAEgASgNEhgKEHJvdXRlckRpc3Bh",
            "dGNoZXIYAiABKAkSGQoRdXNlUG9vbERpc3BhdGNoZXIYAyABKAgSPQoHcmVz",
            "aXplchgEIAEoCzIsLkFra2EuUmVtb3RlLlNlcmlhbGl6YXRpb24uUHJvdG8u",
            "TXNnLlBheWxvYWQinAEKEVNjYXR0ZXJHYXRoZXJQb29sEkgKB2dlbmVyaWMY",
            "ASABKAsyNy5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5H",
            "ZW5lcmljUm91dGluZ1Bvb2wSPQoGd2l0aGluGAIgASgLMi0uQWtrYS5SZW1v",
            "dGUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuVGltZXNwYW4i3AEKEFRhaWxD",
            "aG9wcGluZ1Bvb2wSSAoHZ2VuZXJpYxgBIAEoCzI3LkFra2EuUmVtb3RlLlNl",
            "cmlhbGl6YXRpb24uUHJvdG8uTXNnLkdlbmVyaWNSb3V0aW5nUG9vbBI9CgZ3",
            "aXRoaW4YAiABKAsyLS5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlByb3Rv",
            "Lk1zZy5UaW1lc3BhbhI/CghpbnRlcnZhbBgDIAEoCzItLkFra2EuUmVtb3Rl",
            "LlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLlRpbWVzcGFuIo4BChJSZW1vdGVS",
            "b3V0ZXJDb25maWcSOwoFbG9jYWwYASABKAsyLC5Ba2thLlJlbW90ZS5TZXJp",
            "YWxpemF0aW9uLlByb3RvLk1zZy5QYXlsb2FkEjsKBW5vZGVzGAIgAygLMiwu",
            "QWtrYS5SZW1vdGUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuQWRkcmVzcyIZ",
            "CghUaW1lc3BhbhINCgV0aWNrcxgBIAEoBEICSAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Akka.Remote.Serialization.Proto.Msg.AddressReflection.Descriptor, global::Akka.Remote.Serialization.Proto.Msg.PayloadReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ActorRef), global::Akka.Remote.Serialization.Proto.Msg.ActorRef.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Identify), global::Akka.Remote.Serialization.Proto.Msg.Identify.Parser, new[]{ "MessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ActorIdentity), global::Akka.Remote.Serialization.Proto.Msg.ActorIdentity.Parser, new[]{ "CorrelationId", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.RemoteWatcherHeartbeatResponse), global::Akka.Remote.Serialization.Proto.Msg.RemoteWatcherHeartbeatResponse.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.RemoteScope), global::Akka.Remote.Serialization.Proto.Msg.RemoteScope.Parser, new[]{ "Node" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.FromConfig), global::Akka.Remote.Serialization.Proto.Msg.FromConfig.Parser, new[]{ "Resizer", "RouterDispatcher" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.DefaultResizer), global::Akka.Remote.Serialization.Proto.Msg.DefaultResizer.Parser, new[]{ "LowerBound", "UpperBound", "PressureThreshold", "RampupRate", "BackoffThreshold", "BackoffRate", "MessagesPerResize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool), global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool.Parser, new[]{ "NrOfInstances", "RouterDispatcher", "UsePoolDispatcher", "Resizer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ScatterGatherPool), global::Akka.Remote.Serialization.Proto.Msg.ScatterGatherPool.Parser, new[]{ "Generic", "Within" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.TailChoppingPool), global::Akka.Remote.Serialization.Proto.Msg.TailChoppingPool.Parser, new[]{ "Generic", "Within", "Interval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.RemoteRouterConfig), global::Akka.Remote.Serialization.Proto.Msg.RemoteRouterConfig.Parser, new[]{ "Local", "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Timespan), global::Akka.Remote.Serialization.Proto.Msg.Timespan.Parser, new[]{ "Ticks" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class ActorRef : pb::IMessage<ActorRef> {
    private static readonly pb::MessageParser<ActorRef> _parser = new pb::MessageParser<ActorRef>(() => new ActorRef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRef(ActorRef other) : this() {
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRef Clone() {
      return new ActorRef(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorRef other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Identify : pb::IMessage<Identify> {
    private static readonly pb::MessageParser<Identify> _parser = new pb::MessageParser<Identify>(() => new Identify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Identify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify(Identify other) : this() {
      MessageId = other.messageId_ != null ? other.MessageId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify Clone() {
      return new Identify(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Identify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Identify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MessageId, other.MessageId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageId_ != null) hash ^= MessageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MessageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Identify other) {
      if (other == null) {
        return;
      }
      if (other.messageId_ != null) {
        if (messageId_ == null) {
          messageId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        MessageId.MergeFrom(other.MessageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (messageId_ == null) {
              messageId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(messageId_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ActorIdentity : pb::IMessage<ActorIdentity> {
    private static readonly pb::MessageParser<ActorIdentity> _parser = new pb::MessageParser<ActorIdentity>(() => new ActorIdentity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorIdentity(ActorIdentity other) : this() {
      CorrelationId = other.correlationId_ != null ? other.CorrelationId.Clone() : null;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorIdentity Clone() {
      return new ActorIdentity(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload correlationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CorrelationId, other.CorrelationId)) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (correlationId_ != null) hash ^= CorrelationId.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (correlationId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CorrelationId);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (correlationId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CorrelationId);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorIdentity other) {
      if (other == null) {
        return;
      }
      if (other.correlationId_ != null) {
        if (correlationId_ == null) {
          correlationId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        CorrelationId.MergeFrom(other.CorrelationId);
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (correlationId_ == null) {
              correlationId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(correlationId_);
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoteWatcherHeartbeatResponse : pb::IMessage<RemoteWatcherHeartbeatResponse> {
    private static readonly pb::MessageParser<RemoteWatcherHeartbeatResponse> _parser = new pb::MessageParser<RemoteWatcherHeartbeatResponse>(() => new RemoteWatcherHeartbeatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteWatcherHeartbeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteWatcherHeartbeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteWatcherHeartbeatResponse(RemoteWatcherHeartbeatResponse other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteWatcherHeartbeatResponse Clone() {
      return new RemoteWatcherHeartbeatResponse(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteWatcherHeartbeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteWatcherHeartbeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteWatcherHeartbeatResponse other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoteScope : pb::IMessage<RemoteScope> {
    private static readonly pb::MessageParser<RemoteScope> _parser = new pb::MessageParser<RemoteScope>(() => new RemoteScope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteScope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteScope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteScope(RemoteScope other) : this() {
      Node = other.node_ != null ? other.Node.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteScope Clone() {
      return new RemoteScope(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Address node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Address Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteScope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteScope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteScope other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::Akka.Remote.Serialization.Proto.Msg.Address();
        }
        Node.MergeFrom(other.Node);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::Akka.Remote.Serialization.Proto.Msg.Address();
            }
            input.ReadMessage(node_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class FromConfig : pb::IMessage<FromConfig> {
    private static readonly pb::MessageParser<FromConfig> _parser = new pb::MessageParser<FromConfig>(() => new FromConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromConfig(FromConfig other) : this() {
      Resizer = other.resizer_ != null ? other.Resizer.Clone() : null;
      routerDispatcher_ = other.routerDispatcher_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromConfig Clone() {
      return new FromConfig(this);
    }

    /// <summary>Field number for the "resizer" field.</summary>
    public const int ResizerFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload resizer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Resizer {
      get { return resizer_; }
      set {
        resizer_ = value;
      }
    }

    /// <summary>Field number for the "routerDispatcher" field.</summary>
    public const int RouterDispatcherFieldNumber = 2;
    private string routerDispatcher_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouterDispatcher {
      get { return routerDispatcher_; }
      set {
        routerDispatcher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resizer, other.Resizer)) return false;
      if (RouterDispatcher != other.RouterDispatcher) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resizer_ != null) hash ^= Resizer.GetHashCode();
      if (RouterDispatcher.Length != 0) hash ^= RouterDispatcher.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resizer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resizer);
      }
      if (RouterDispatcher.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RouterDispatcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resizer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resizer);
      }
      if (RouterDispatcher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouterDispatcher);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromConfig other) {
      if (other == null) {
        return;
      }
      if (other.resizer_ != null) {
        if (resizer_ == null) {
          resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Resizer.MergeFrom(other.Resizer);
      }
      if (other.RouterDispatcher.Length != 0) {
        RouterDispatcher = other.RouterDispatcher;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (resizer_ == null) {
              resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(resizer_);
            break;
          }
          case 18: {
            RouterDispatcher = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DefaultResizer : pb::IMessage<DefaultResizer> {
    private static readonly pb::MessageParser<DefaultResizer> _parser = new pb::MessageParser<DefaultResizer>(() => new DefaultResizer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefaultResizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultResizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultResizer(DefaultResizer other) : this() {
      lowerBound_ = other.lowerBound_;
      upperBound_ = other.upperBound_;
      pressureThreshold_ = other.pressureThreshold_;
      rampupRate_ = other.rampupRate_;
      backoffThreshold_ = other.backoffThreshold_;
      backoffRate_ = other.backoffRate_;
      messagesPerResize_ = other.messagesPerResize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultResizer Clone() {
      return new DefaultResizer(this);
    }

    /// <summary>Field number for the "lowerBound" field.</summary>
    public const int LowerBoundFieldNumber = 1;
    private uint lowerBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowerBound {
      get { return lowerBound_; }
      set {
        lowerBound_ = value;
      }
    }

    /// <summary>Field number for the "upperBound" field.</summary>
    public const int UpperBoundFieldNumber = 2;
    private uint upperBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpperBound {
      get { return upperBound_; }
      set {
        upperBound_ = value;
      }
    }

    /// <summary>Field number for the "pressureThreshold" field.</summary>
    public const int PressureThresholdFieldNumber = 3;
    private uint pressureThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PressureThreshold {
      get { return pressureThreshold_; }
      set {
        pressureThreshold_ = value;
      }
    }

    /// <summary>Field number for the "rampupRate" field.</summary>
    public const int RampupRateFieldNumber = 4;
    private double rampupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RampupRate {
      get { return rampupRate_; }
      set {
        rampupRate_ = value;
      }
    }

    /// <summary>Field number for the "backoffThreshold" field.</summary>
    public const int BackoffThresholdFieldNumber = 5;
    private double backoffThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BackoffThreshold {
      get { return backoffThreshold_; }
      set {
        backoffThreshold_ = value;
      }
    }

    /// <summary>Field number for the "backoffRate" field.</summary>
    public const int BackoffRateFieldNumber = 6;
    private double backoffRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BackoffRate {
      get { return backoffRate_; }
      set {
        backoffRate_ = value;
      }
    }

    /// <summary>Field number for the "messagesPerResize" field.</summary>
    public const int MessagesPerResizeFieldNumber = 7;
    private uint messagesPerResize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessagesPerResize {
      get { return messagesPerResize_; }
      set {
        messagesPerResize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefaultResizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefaultResizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LowerBound != other.LowerBound) return false;
      if (UpperBound != other.UpperBound) return false;
      if (PressureThreshold != other.PressureThreshold) return false;
      if (RampupRate != other.RampupRate) return false;
      if (BackoffThreshold != other.BackoffThreshold) return false;
      if (BackoffRate != other.BackoffRate) return false;
      if (MessagesPerResize != other.MessagesPerResize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LowerBound != 0) hash ^= LowerBound.GetHashCode();
      if (UpperBound != 0) hash ^= UpperBound.GetHashCode();
      if (PressureThreshold != 0) hash ^= PressureThreshold.GetHashCode();
      if (RampupRate != 0D) hash ^= RampupRate.GetHashCode();
      if (BackoffThreshold != 0D) hash ^= BackoffThreshold.GetHashCode();
      if (BackoffRate != 0D) hash ^= BackoffRate.GetHashCode();
      if (MessagesPerResize != 0) hash ^= MessagesPerResize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LowerBound != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LowerBound);
      }
      if (UpperBound != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UpperBound);
      }
      if (PressureThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PressureThreshold);
      }
      if (RampupRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RampupRate);
      }
      if (BackoffThreshold != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BackoffThreshold);
      }
      if (BackoffRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BackoffRate);
      }
      if (MessagesPerResize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MessagesPerResize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LowerBound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowerBound);
      }
      if (UpperBound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpperBound);
      }
      if (PressureThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PressureThreshold);
      }
      if (RampupRate != 0D) {
        size += 1 + 8;
      }
      if (BackoffThreshold != 0D) {
        size += 1 + 8;
      }
      if (BackoffRate != 0D) {
        size += 1 + 8;
      }
      if (MessagesPerResize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessagesPerResize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefaultResizer other) {
      if (other == null) {
        return;
      }
      if (other.LowerBound != 0) {
        LowerBound = other.LowerBound;
      }
      if (other.UpperBound != 0) {
        UpperBound = other.UpperBound;
      }
      if (other.PressureThreshold != 0) {
        PressureThreshold = other.PressureThreshold;
      }
      if (other.RampupRate != 0D) {
        RampupRate = other.RampupRate;
      }
      if (other.BackoffThreshold != 0D) {
        BackoffThreshold = other.BackoffThreshold;
      }
      if (other.BackoffRate != 0D) {
        BackoffRate = other.BackoffRate;
      }
      if (other.MessagesPerResize != 0) {
        MessagesPerResize = other.MessagesPerResize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LowerBound = input.ReadUInt32();
            break;
          }
          case 16: {
            UpperBound = input.ReadUInt32();
            break;
          }
          case 24: {
            PressureThreshold = input.ReadUInt32();
            break;
          }
          case 33: {
            RampupRate = input.ReadDouble();
            break;
          }
          case 41: {
            BackoffThreshold = input.ReadDouble();
            break;
          }
          case 49: {
            BackoffRate = input.ReadDouble();
            break;
          }
          case 56: {
            MessagesPerResize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GenericRoutingPool : pb::IMessage<GenericRoutingPool> {
    private static readonly pb::MessageParser<GenericRoutingPool> _parser = new pb::MessageParser<GenericRoutingPool>(() => new GenericRoutingPool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenericRoutingPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenericRoutingPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenericRoutingPool(GenericRoutingPool other) : this() {
      nrOfInstances_ = other.nrOfInstances_;
      routerDispatcher_ = other.routerDispatcher_;
      usePoolDispatcher_ = other.usePoolDispatcher_;
      Resizer = other.resizer_ != null ? other.Resizer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenericRoutingPool Clone() {
      return new GenericRoutingPool(this);
    }

    /// <summary>Field number for the "nrOfInstances" field.</summary>
    public const int NrOfInstancesFieldNumber = 1;
    private uint nrOfInstances_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NrOfInstances {
      get { return nrOfInstances_; }
      set {
        nrOfInstances_ = value;
      }
    }

    /// <summary>Field number for the "routerDispatcher" field.</summary>
    public const int RouterDispatcherFieldNumber = 2;
    private string routerDispatcher_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouterDispatcher {
      get { return routerDispatcher_; }
      set {
        routerDispatcher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usePoolDispatcher" field.</summary>
    public const int UsePoolDispatcherFieldNumber = 3;
    private bool usePoolDispatcher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePoolDispatcher {
      get { return usePoolDispatcher_; }
      set {
        usePoolDispatcher_ = value;
      }
    }

    /// <summary>Field number for the "resizer" field.</summary>
    public const int ResizerFieldNumber = 4;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload resizer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Resizer {
      get { return resizer_; }
      set {
        resizer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenericRoutingPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenericRoutingPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NrOfInstances != other.NrOfInstances) return false;
      if (RouterDispatcher != other.RouterDispatcher) return false;
      if (UsePoolDispatcher != other.UsePoolDispatcher) return false;
      if (!object.Equals(Resizer, other.Resizer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NrOfInstances != 0) hash ^= NrOfInstances.GetHashCode();
      if (RouterDispatcher.Length != 0) hash ^= RouterDispatcher.GetHashCode();
      if (UsePoolDispatcher != false) hash ^= UsePoolDispatcher.GetHashCode();
      if (resizer_ != null) hash ^= Resizer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NrOfInstances != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NrOfInstances);
      }
      if (RouterDispatcher.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RouterDispatcher);
      }
      if (UsePoolDispatcher != false) {
        output.WriteRawTag(24);
        output.WriteBool(UsePoolDispatcher);
      }
      if (resizer_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Resizer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NrOfInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NrOfInstances);
      }
      if (RouterDispatcher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouterDispatcher);
      }
      if (UsePoolDispatcher != false) {
        size += 1 + 1;
      }
      if (resizer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resizer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenericRoutingPool other) {
      if (other == null) {
        return;
      }
      if (other.NrOfInstances != 0) {
        NrOfInstances = other.NrOfInstances;
      }
      if (other.RouterDispatcher.Length != 0) {
        RouterDispatcher = other.RouterDispatcher;
      }
      if (other.UsePoolDispatcher != false) {
        UsePoolDispatcher = other.UsePoolDispatcher;
      }
      if (other.resizer_ != null) {
        if (resizer_ == null) {
          resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Resizer.MergeFrom(other.Resizer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NrOfInstances = input.ReadUInt32();
            break;
          }
          case 18: {
            RouterDispatcher = input.ReadString();
            break;
          }
          case 24: {
            UsePoolDispatcher = input.ReadBool();
            break;
          }
          case 34: {
            if (resizer_ == null) {
              resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(resizer_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ScatterGatherPool : pb::IMessage<ScatterGatherPool> {
    private static readonly pb::MessageParser<ScatterGatherPool> _parser = new pb::MessageParser<ScatterGatherPool>(() => new ScatterGatherPool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScatterGatherPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScatterGatherPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScatterGatherPool(ScatterGatherPool other) : this() {
      Generic = other.generic_ != null ? other.Generic.Clone() : null;
      Within = other.within_ != null ? other.Within.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScatterGatherPool Clone() {
      return new ScatterGatherPool(this);
    }

    /// <summary>Field number for the "generic" field.</summary>
    public const int GenericFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool generic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool Generic {
      get { return generic_; }
      set {
        generic_ = value;
      }
    }

    /// <summary>Field number for the "within" field.</summary>
    public const int WithinFieldNumber = 2;
    private global::Akka.Remote.Serialization.Proto.Msg.Timespan within_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Timespan Within {
      get { return within_; }
      set {
        within_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScatterGatherPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScatterGatherPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Generic, other.Generic)) return false;
      if (!object.Equals(Within, other.Within)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (generic_ != null) hash ^= Generic.GetHashCode();
      if (within_ != null) hash ^= Within.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (generic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Generic);
      }
      if (within_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Within);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (generic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Generic);
      }
      if (within_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Within);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScatterGatherPool other) {
      if (other == null) {
        return;
      }
      if (other.generic_ != null) {
        if (generic_ == null) {
          generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();
        }
        Generic.MergeFrom(other.Generic);
      }
      if (other.within_ != null) {
        if (within_ == null) {
          within_ = new global::Akka.Remote.Serialization.Proto.Msg.Timespan();
        }
        Within.MergeFrom(other.Within);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (generic_ == null) {
              generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();
            }
            input.ReadMessage(generic_);
            break;
          }
          case 18: {
            if (within_ == null) {
              within_ = new global::Akka.Remote.Serialization.Proto.Msg.Timespan();
            }
            input.ReadMessage(within_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TailChoppingPool : pb::IMessage<TailChoppingPool> {
    private static readonly pb::MessageParser<TailChoppingPool> _parser = new pb::MessageParser<TailChoppingPool>(() => new TailChoppingPool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TailChoppingPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TailChoppingPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TailChoppingPool(TailChoppingPool other) : this() {
      Generic = other.generic_ != null ? other.Generic.Clone() : null;
      Within = other.within_ != null ? other.Within.Clone() : null;
      Interval = other.interval_ != null ? other.Interval.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TailChoppingPool Clone() {
      return new TailChoppingPool(this);
    }

    /// <summary>Field number for the "generic" field.</summary>
    public const int GenericFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool generic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool Generic {
      get { return generic_; }
      set {
        generic_ = value;
      }
    }

    /// <summary>Field number for the "within" field.</summary>
    public const int WithinFieldNumber = 2;
    private global::Akka.Remote.Serialization.Proto.Msg.Timespan within_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Timespan Within {
      get { return within_; }
      set {
        within_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 3;
    private global::Akka.Remote.Serialization.Proto.Msg.Timespan interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Timespan Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TailChoppingPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TailChoppingPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Generic, other.Generic)) return false;
      if (!object.Equals(Within, other.Within)) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (generic_ != null) hash ^= Generic.GetHashCode();
      if (within_ != null) hash ^= Within.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (generic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Generic);
      }
      if (within_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Within);
      }
      if (interval_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Interval);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (generic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Generic);
      }
      if (within_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Within);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TailChoppingPool other) {
      if (other == null) {
        return;
      }
      if (other.generic_ != null) {
        if (generic_ == null) {
          generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();
        }
        Generic.MergeFrom(other.Generic);
      }
      if (other.within_ != null) {
        if (within_ == null) {
          within_ = new global::Akka.Remote.Serialization.Proto.Msg.Timespan();
        }
        Within.MergeFrom(other.Within);
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          interval_ = new global::Akka.Remote.Serialization.Proto.Msg.Timespan();
        }
        Interval.MergeFrom(other.Interval);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (generic_ == null) {
              generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();
            }
            input.ReadMessage(generic_);
            break;
          }
          case 18: {
            if (within_ == null) {
              within_ = new global::Akka.Remote.Serialization.Proto.Msg.Timespan();
            }
            input.ReadMessage(within_);
            break;
          }
          case 26: {
            if (interval_ == null) {
              interval_ = new global::Akka.Remote.Serialization.Proto.Msg.Timespan();
            }
            input.ReadMessage(interval_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoteRouterConfig : pb::IMessage<RemoteRouterConfig> {
    private static readonly pb::MessageParser<RemoteRouterConfig> _parser = new pb::MessageParser<RemoteRouterConfig>(() => new RemoteRouterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteRouterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteRouterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteRouterConfig(RemoteRouterConfig other) : this() {
      Local = other.local_ != null ? other.Local.Clone() : null;
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteRouterConfig Clone() {
      return new RemoteRouterConfig(this);
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload local_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.Remote.Serialization.Proto.Msg.Address> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.Remote.Serialization.Proto.Msg.Address.Parser);
    private readonly pbc::RepeatedField<global::Akka.Remote.Serialization.Proto.Msg.Address> nodes_ = new pbc::RepeatedField<global::Akka.Remote.Serialization.Proto.Msg.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Remote.Serialization.Proto.Msg.Address> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteRouterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteRouterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Local, other.Local)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (local_ != null) hash ^= Local.GetHashCode();
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (local_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Local);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (local_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Local);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteRouterConfig other) {
      if (other == null) {
        return;
      }
      if (other.local_ != null) {
        if (local_ == null) {
          local_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Local.MergeFrom(other.Local);
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (local_ == null) {
              local_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(local_);
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Timespan : pb::IMessage<Timespan> {
    private static readonly pb::MessageParser<Timespan> _parser = new pb::MessageParser<Timespan>(() => new Timespan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timespan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.MiscMessageSerializerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timespan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timespan(Timespan other) : this() {
      ticks_ = other.ticks_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timespan Clone() {
      return new Timespan(this);
    }

    /// <summary>Field number for the "ticks" field.</summary>
    public const int TicksFieldNumber = 1;
    private ulong ticks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Ticks {
      get { return ticks_; }
      set {
        ticks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timespan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timespan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticks != other.Ticks) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticks != 0UL) hash ^= Ticks.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticks != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Ticks);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ticks);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timespan other) {
      if (other == null) {
        return;
      }
      if (other.Ticks != 0UL) {
        Ticks = other.Ticks;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ticks = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
