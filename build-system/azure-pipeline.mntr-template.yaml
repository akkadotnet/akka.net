parameters:
  name: ''
  displayName: ''
  vmImage: ''
  dependsOn: 'WindowsBuild'
  artifactName: 'akkaBuild'
  scriptFileName: ''
  scriptArgs: 'all'
  outputDirectory: ''
  timeoutInMinutes: 120

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:      
      - task: UseDotNet@2
        displayName: 'Use .NET 5 SDK 5.0.101'
        inputs:
          version: 5.0.101
      - task: UseDotNet@2
        displayName: 'Use .NET Core Runtime 3.1.10'
        inputs:
          packageType: runtime
          version: 3.1.10
      - script: make --directory=$(build.sourcesDirectory)/lmdb/libraries/liblmdb/
        displayName: 'Build lmdb native lib'
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      - script: echo '##vso[task.setvariable variable=LD_LIBRARY_PATH]$(build.sourcesDirectory)/lmdb/libraries/liblmdb/'
        displayName: Set LMDB Env Variable
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      - task: Bash@3 
        displayName: Linux / OSX Build
        inputs:
          filePath: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      # Windows
      - task: BatchScript@1
        displayName: Windows Build
        inputs:
          filename: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx' #TestResults folder usually
          testRunTitle: ${{ parameters.name }}
          mergeTestResults: true
      - task: CopyFiles@2
        displayName: 'Copy Build Output'
        inputs:
          sourceFolder: ${{ parameters.outputDirectory }}
          contents: '**\*'
          targetFolder: $(Build.ArtifactStagingDirectory)
          continueOnError: boolean  # 'true' if future steps should run even if this step fails; defaults to 'false'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: ${{ parameters.artifactName }}
      - task: CopyFiles@2
        displayName: 'Copy MNTR Failure Logs'
        inputs:
          sourceFolder: ${{ parameters.mntrFailuresDir }}
          contents: 'FAILED_SPECS_LOGS\*'
          cleanTargetFolder: true
          targetFolder: $(Build.ArtifactStagingDirectory)
          continueOnError: boolean  # 'true' if future steps should run even if this step fails; defaults to 'false'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: ${{ parameters.mntrFailuresArtifactName }}
      - script: 'echo 1>&2'
        failOnStderr: true
        displayName: 'If above is partially succeeded, then fail'
        condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')