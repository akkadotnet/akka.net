akka.remote.helios {
  tcp {
    # The class given here must implement the akka.remote.transport.Transport
    # interface and offer a public constructor which takes two arguments:
    #  1) akka.actor.ExtendedActorSystem
    #  2) com.typesafe.config.Config
    transport-class = "Akka.Remote.Transport.Helios.HeliosTcpTransport, Akka.Remote.Transport.Helios"

    # Transport drivers can be augmented with adapters by adding their
    # name to the applied-adapters list. The last adapter in the
    # list is the adapter immediately above the driver, while
    # the first one is the top of the stack below the standard
    # Akka protocol
    applied-adapters = []

    transport-protocol = tcp

    # The default remote server port clients should connect to.
    # Default is 2552 (AKKA), use 0 if you want a random available port
    # This port needs to be unique for each actor system on the same machine.
    port = 2552

    # The hostname or ip to bind the remoting to,
    # InetAddress.getLocalHost.getHostAddress is used if empty
    hostname = ""

	# If this value is set, this becomes the public address for the actor system on this
	# transport, which might be different than the physical ip address (hostname)
	# this is designed to make it easy to support private / public addressing schemes
	public-hostname = ""

	# If set to true, we will use IPV6 addresses upon DNS resolution for host names.
	# Otherwise, we will use IPV4.
	dns-use-ipv6 = false

	# If set to true, we will enforce usage of IPV4 or IPV6 addresses upon DNS resolution for host names.
	# If dns-use-ipv6 = true, we will use IPV6 enforcement
	# Otherwise, we will use IPV4.
	# Warning: when ip family is enforced, any connection between IPV4 and IPV6 is impossible
	#
	# enforce-ip-family setting is used only in some special cases, when default behaviour of 
	# underlying sockets leads to errors. Typically this occurs when an environment doesn't support
	# IPV6 or dual-mode sockets.
	# As of 09/21/2016 there are two known cases: running under Mono and in Azure WebApp  
	# for them we will need enforce-ip-family = true, and for Azure dns-use-ipv6 = false
	# This property is always set to true if Mono runtime is detected.

	enforce-ip-family = false

    # Enables SSL support on this transport
    enable-ssl = false

	# Enables backwards compatibility with Akka.Remote clients running Helios 1.*
	enable-backwards-compatibility = false

    # Sets the connectTimeoutMillis of all outbound connections,
    # i.e. how long a connect may take until it is timed out
    connection-timeout = 15 s

    # If set to "<id.of.dispatcher>" then the specified dispatcher
    # will be used to accept inbound connections, and perform IO. If "" then
    # dedicated threads will be used.
    # Please note that the Helios driver only uses this configuration and does
    # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
    # configured manually to point to the same dispatcher if needed.
    use-dispatcher-for-io = ""

    # Sets the high water mark for the in and outbound sockets,
    # set to 0b for platform default
    write-buffer-high-water-mark = 0b

    # Sets the low water mark for the in and outbound sockets,
    # set to 0b for platform default
    write-buffer-low-water-mark = 0b

    # Sets the send buffer size of the Sockets,
    # set to 0b for platform default
    send-buffer-size = 256000b

    # Sets the receive buffer size of the Sockets,
    # set to 0b for platform default
    receive-buffer-size = 256000b

    # Maximum message size the transport will accept, but at least
    # 32000 bytes.
    # Please note that UDP does not support arbitrary large datagrams,
    # so this setting has to be chosen carefully when using UDP.
    # Both send-buffer-size and receive-buffer-size settings has to
    # be adjusted to be able to buffer messages of maximum size.
    maximum-frame-size = 128000b

    # Sets the size of the connection backlog
    backlog = 4096

    # Enables the TCP_NODELAY flag, i.e. disables Nagleâ€™s algorithm
    tcp-nodelay = on

    # Enables TCP Keepalive, subject to the O/S kernelâ€™s configuration
    tcp-keepalive = on

    # Enables SO_REUSEADDR, which determines when an ActorSystem can open
    # the specified listen port (the meaning differs between *nix and Windows)
    # Valid values are "on", "off" and "off-for-windows"
    # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
    # "off-for-windows" of course means that it's "on" for all other platforms
    tcp-reuse-addr = on

    # Used to configure the number of I/O worker threads on server sockets
    server-socket-worker-pool {
      # Min number of threads to cap factor-based number to
      pool-size-min = 2

      # The pool size factor is used to determine thread pool size
      # using the following formula: ceil(available processors * factor).
      # Resulting size is then bounded by the pool-size-min and
      # pool-size-max values.
      pool-size-factor = 1.0

      # Max number of threads to cap factor-based number to
      pool-size-max = 2
    }

    # Used to configure the number of I/O worker threads on client sockets
    client-socket-worker-pool {
      # Min number of threads to cap factor-based number to
      pool-size-min = 2

      # The pool size factor is used to determine thread pool size
      # using the following formula: ceil(available processors * factor).
      # Resulting size is then bounded by the pool-size-min and
      # pool-size-max values.
      pool-size-factor = 1.0

      # Max number of threads to cap factor-based number to
      pool-size-max = 2
	}
  }
  udp = ${akka.remote.helios.tcp}
  udp {
    transport-protocol = udp
  }
}