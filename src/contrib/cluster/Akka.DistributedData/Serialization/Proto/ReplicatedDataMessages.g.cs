// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReplicatedDataMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.DistributedData.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from ReplicatedDataMessages.proto</summary>
  internal static partial class ReplicatedDataMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for ReplicatedDataMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReplicatedDataMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxSZXBsaWNhdGVkRGF0YU1lc3NhZ2VzLnByb3RvEixBa2thLkRpc3RyaWJ1",
            "dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZxoYUmVwbGljYXRvck1l",
            "c3NhZ2VzLnByb3RvIr4BCgRHU2V0EhYKDnN0cmluZ0VsZW1lbnRzGAEgAygJ",
            "EhcKC2ludEVsZW1lbnRzGAIgAygRQgIQARIYCgxsb25nRWxlbWVudHMYAyAD",
            "KBJCAhABElEKDW90aGVyRWxlbWVudHMYBCADKAsyOi5Ba2thLkRpc3RyaWJ1",
            "dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5PdGhlck1lc3NhZ2US",
            "GAoQYWN0b3JSZWZFbGVtZW50cxgFIAMoCSLYAgoFT1JTZXQSTAoHdnZlY3Rv",
            "chgBIAEoCzI7LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24u",
            "UHJvdG8uTXNnLlZlcnNpb25WZWN0b3ISSQoEZG90cxgCIAMoCzI7LkFra2Eu",
            "RGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLlZlcnNp",
            "b25WZWN0b3ISFgoOc3RyaW5nRWxlbWVudHMYAyADKAkSFwoLaW50RWxlbWVu",
            "dHMYBCADKBFCAhABEhgKDGxvbmdFbGVtZW50cxgFIAMoEkICEAESUQoNb3Ro",
            "ZXJFbGVtZW50cxgGIAMoCzI6LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlh",
            "bGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZRIYChBhY3RvclJlZkVs",
            "ZW1lbnRzGAcgAygJIokCCg9PUlNldERlbHRhR3JvdXASVAoHZW50cmllcxgB",
            "IAMoCzJDLkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJv",
            "dG8uTXNnLk9SU2V0RGVsdGFHcm91cC5FbnRyeRqfAQoFRW50cnkSTQoJb3Bl",
            "cmF0aW9uGAEgASgOMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXph",
            "dGlvbi5Qcm90by5Nc2cuT1JTZXREZWx0YU9wEkcKCnVuZGVybHlpbmcYAiAB",
            "KAsyMy5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3Rv",
            "Lk1zZy5PUlNldCIXCgRGbGFnEg8KB2VuYWJsZWQYASABKAgitgEKC0xXV1Jl",
            "Z2lzdGVyEhEKCXRpbWVzdGFtcBgBIAEoEhJJCgRub2RlGAIgASgLMjsuQWtr",
            "YS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuVW5p",
            "cXVlQWRkcmVzcxJJCgVzdGF0ZRgDIAEoCzI6LkFra2EuRGlzdHJpYnV0ZWRE",
            "YXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZSK8AQoI",
            "R0NvdW50ZXISTQoHZW50cmllcxgBIAMoCzI8LkFra2EuRGlzdHJpYnV0ZWRE",
            "YXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkdDb3VudGVyLkVudHJ5GmEK",
            "BUVudHJ5EkkKBG5vZGUYASABKAsyOy5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLk1zZy5VbmlxdWVBZGRyZXNzEg0KBXZhbHVl",
            "GAIgASgMIqMBCglQTkNvdW50ZXISSgoKaW5jcmVtZW50cxgBIAEoCzI2LkFr",
            "a2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkdD",
            "b3VudGVyEkoKCmRlY3JlbWVudHMYAiABKAsyNi5Ba2thLkRpc3RyaWJ1dGVk",
            "RGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5HQ291bnRlciLtAgoFT1JN",
            "YXASQQoEa2V5cxgBIAEoCzIzLkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlh",
            "bGl6YXRpb24uUHJvdG8uTXNnLk9SU2V0EkoKB2VudHJpZXMYAiADKAsyOS5B",
            "a2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5P",
            "Uk1hcC5FbnRyeRrUAQoFRW50cnkSEQoJc3RyaW5nS2V5GAEgASgJEkkKBXZh",
            "bHVlGAIgASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdlEg4KBmludEtleRgDIAEoERIPCgds",
            "b25nS2V5GAQgASgSEkwKCG90aGVyS2V5GAUgASgLMjouQWtrYS5EaXN0cmli",
            "dXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdl",
            "Is8ECg9PUk1hcERlbHRhR3JvdXASVAoHZW50cmllcxgBIAMoCzJDLkFra2Eu",
            "RGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk9STWFw",
            "RGVsdGFHcm91cC5FbnRyeRrXAQoITWFwRW50cnkSEQoJc3RyaW5nS2V5GAEg",
            "ASgJEkkKBXZhbHVlGAIgASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2Vy",
            "aWFsaXphdGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdlEg4KBmludEtleRgD",
            "IAEoERIPCgdsb25nS2V5GAQgASgSEkwKCG90aGVyS2V5GAUgASgLMjouQWtr",
            "YS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT3Ro",
            "ZXJNZXNzYWdlGosCCgVFbnRyeRJNCglvcGVyYXRpb24YASABKA4yOi5Ba2th",
            "LkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5PUk1h",
            "cERlbHRhT3ASRwoKdW5kZXJseWluZxgCIAEoCzIzLkFra2EuRGlzdHJpYnV0",
            "ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk9SU2V0Eg8KB3plcm9U",
            "YWcYAyABKBESWQoJZW50cnlEYXRhGAQgAygLMkYuQWtrYS5EaXN0cmlidXRl",
            "ZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT1JNYXBEZWx0YUdyb3Vw",
            "Lk1hcEVudHJ5Iu4CCgZMV1dNYXASQQoEa2V5cxgBIAEoCzIzLkFra2EuRGlz",
            "dHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk9SU2V0EksK",
            "B2VudHJpZXMYAiADKAsyOi5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxp",
            "emF0aW9uLlByb3RvLk1zZy5MV1dNYXAuRW50cnka0wEKBUVudHJ5EhEKCXN0",
            "cmluZ0tleRgBIAEoCRJICgV2YWx1ZRgCIAEoCzI5LkFra2EuRGlzdHJpYnV0",
            "ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkxXV1JlZ2lzdGVyEg4K",
            "BmludEtleRgDIAEoERIPCgdsb25nS2V5GAQgASgSEkwKCG90aGVyS2V5GAUg",
            "ASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90",
            "by5Nc2cuT3RoZXJNZXNzYWdlIvgCCgxQTkNvdW50ZXJNYXASQQoEa2V5cxgB",
            "IAEoCzIzLkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJv",
            "dG8uTXNnLk9SU2V0ElEKB2VudHJpZXMYAiADKAsyQC5Ba2thLkRpc3RyaWJ1",
            "dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5QTkNvdW50ZXJNYXAu",
            "RW50cnka0QEKBUVudHJ5EhEKCXN0cmluZ0tleRgBIAEoCRJGCgV2YWx1ZRgC",
            "IAEoCzI3LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJv",
            "dG8uTXNnLlBOQ291bnRlchIOCgZpbnRLZXkYAyABKBESDwoHbG9uZ0tleRgE",
            "IAEoEhJMCghvdGhlcktleRgFIAEoCzI6LkFra2EuRGlzdHJpYnV0ZWREYXRh",
            "LlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZSKJAwoKT1JN",
            "dWx0aU1hcBJBCgRrZXlzGAEgASgLMjMuQWtrYS5EaXN0cmlidXRlZERhdGEu",
            "U2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT1JTZXQSTwoHZW50cmllcxgCIAMo",
            "CzI+LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8u",
            "TXNnLk9STXVsdGlNYXAuRW50cnkSFwoPd2l0aFZhbHVlRGVsdGFzGAMgASgI",
            "Gs0BCgVFbnRyeRIRCglzdHJpbmdLZXkYASABKAkSQgoFdmFsdWUYAiABKAsy",
            "My5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1z",
            "Zy5PUlNldBIOCgZpbnRLZXkYAyABKBESDwoHbG9uZ0tleRgEIAEoEhJMCghv",
            "dGhlcktleRgFIAEoCzI6LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6",
            "YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZSotCgxPUlNldERlbHRhT3AS",
            "BwoDQWRkEAASCgoGUmVtb3ZlEAESCAoERnVsbBACKlIKDE9STWFwRGVsdGFP",
            "cBIMCghPUk1hcFB1dBAAEg8KC09STWFwUmVtb3ZlEAESEgoOT1JNYXBSZW1v",
            "dmVLZXkQAhIPCgtPUk1hcFVwZGF0ZRADQgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaOp), typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaOp), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.GSet), global::Akka.DistributedData.Serialization.Proto.Msg.GSet.Parser, new[]{ "StringElements", "IntElements", "LongElements", "OtherElements", "ActorRefElements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORSet), global::Akka.DistributedData.Serialization.Proto.Msg.ORSet.Parser, new[]{ "Vvector", "Dots", "StringElements", "IntElements", "LongElements", "OtherElements", "ActorRefElements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup), global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Parser, new[]{ "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry.Parser, new[]{ "Operation", "Underlying" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Flag), global::Akka.DistributedData.Serialization.Proto.Msg.Flag.Parser, new[]{ "Enabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.LWWRegister), global::Akka.DistributedData.Serialization.Proto.Msg.LWWRegister.Parser, new[]{ "Timestamp", "Node", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.GCounter), global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Parser, new[]{ "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry.Parser, new[]{ "Node", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.PNCounter), global::Akka.DistributedData.Serialization.Proto.Msg.PNCounter.Parser, new[]{ "Increments", "Decrements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMap), global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Parser, new[]{ "Keys", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry.Parser, new[]{ "StringKey", "Value", "IntKey", "LongKey", "OtherKey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup), global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Parser, new[]{ "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry), global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry.Parser, new[]{ "StringKey", "Value", "IntKey", "LongKey", "OtherKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry.Parser, new[]{ "Operation", "Underlying", "ZeroTag", "EntryData" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap), global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Parser, new[]{ "Keys", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry.Parser, new[]{ "StringKey", "Value", "IntKey", "LongKey", "OtherKey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap), global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Parser, new[]{ "Keys", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry.Parser, new[]{ "StringKey", "Value", "IntKey", "LongKey", "OtherKey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap), global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Parser, new[]{ "Keys", "Entries", "WithValueDeltas" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry.Parser, new[]{ "StringKey", "Value", "IntKey", "LongKey", "OtherKey" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  internal enum ORSetDeltaOp {
    [pbr::OriginalName("Add")] Add = 0,
    [pbr::OriginalName("Remove")] Remove = 1,
    [pbr::OriginalName("Full")] Full = 2,
  }

  internal enum ORMapDeltaOp {
    [pbr::OriginalName("ORMapPut")] OrmapPut = 0,
    [pbr::OriginalName("ORMapRemove")] OrmapRemove = 1,
    [pbr::OriginalName("ORMapRemoveKey")] OrmapRemoveKey = 2,
    [pbr::OriginalName("ORMapUpdate")] OrmapUpdate = 3,
  }

  #endregion

  #region Messages
  internal sealed partial class GSet : pb::IMessage<GSet> {
    private static readonly pb::MessageParser<GSet> _parser = new pb::MessageParser<GSet>(() => new GSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSet(GSet other) : this() {
      stringElements_ = other.stringElements_.Clone();
      intElements_ = other.intElements_.Clone();
      longElements_ = other.longElements_.Clone();
      otherElements_ = other.otherElements_.Clone();
      actorRefElements_ = other.actorRefElements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSet Clone() {
      return new GSet(this);
    }

    /// <summary>Field number for the "stringElements" field.</summary>
    public const int StringElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_stringElements_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> stringElements_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringElements {
      get { return stringElements_; }
    }

    /// <summary>Field number for the "intElements" field.</summary>
    public const int IntElementsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_intElements_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> intElements_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntElements {
      get { return intElements_; }
    }

    /// <summary>Field number for the "longElements" field.</summary>
    public const int LongElementsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_longElements_codec
        = pb::FieldCodec.ForSInt64(26);
    private readonly pbc::RepeatedField<long> longElements_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> LongElements {
      get { return longElements_; }
    }

    /// <summary>Field number for the "otherElements" field.</summary>
    public const int OtherElementsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage> _repeated_otherElements_codec
        = pb::FieldCodec.ForMessage(34, global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage> otherElements_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage> OtherElements {
      get { return otherElements_; }
    }

    /// <summary>Field number for the "actorRefElements" field.</summary>
    public const int ActorRefElementsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_actorRefElements_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> actorRefElements_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ActorRefElements {
      get { return actorRefElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stringElements_.Equals(other.stringElements_)) return false;
      if(!intElements_.Equals(other.intElements_)) return false;
      if(!longElements_.Equals(other.longElements_)) return false;
      if(!otherElements_.Equals(other.otherElements_)) return false;
      if(!actorRefElements_.Equals(other.actorRefElements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stringElements_.GetHashCode();
      hash ^= intElements_.GetHashCode();
      hash ^= longElements_.GetHashCode();
      hash ^= otherElements_.GetHashCode();
      hash ^= actorRefElements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stringElements_.WriteTo(output, _repeated_stringElements_codec);
      intElements_.WriteTo(output, _repeated_intElements_codec);
      longElements_.WriteTo(output, _repeated_longElements_codec);
      otherElements_.WriteTo(output, _repeated_otherElements_codec);
      actorRefElements_.WriteTo(output, _repeated_actorRefElements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stringElements_.CalculateSize(_repeated_stringElements_codec);
      size += intElements_.CalculateSize(_repeated_intElements_codec);
      size += longElements_.CalculateSize(_repeated_longElements_codec);
      size += otherElements_.CalculateSize(_repeated_otherElements_codec);
      size += actorRefElements_.CalculateSize(_repeated_actorRefElements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSet other) {
      if (other == null) {
        return;
      }
      stringElements_.Add(other.stringElements_);
      intElements_.Add(other.intElements_);
      longElements_.Add(other.longElements_);
      otherElements_.Add(other.otherElements_);
      actorRefElements_.Add(other.actorRefElements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stringElements_.AddEntriesFrom(input, _repeated_stringElements_codec);
            break;
          }
          case 18:
          case 16: {
            intElements_.AddEntriesFrom(input, _repeated_intElements_codec);
            break;
          }
          case 26:
          case 24: {
            longElements_.AddEntriesFrom(input, _repeated_longElements_codec);
            break;
          }
          case 34: {
            otherElements_.AddEntriesFrom(input, _repeated_otherElements_codec);
            break;
          }
          case 42: {
            actorRefElements_.AddEntriesFrom(input, _repeated_actorRefElements_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ORSet : pb::IMessage<ORSet> {
    private static readonly pb::MessageParser<ORSet> _parser = new pb::MessageParser<ORSet>(() => new ORSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ORSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORSet(ORSet other) : this() {
      Vvector = other.vvector_ != null ? other.Vvector.Clone() : null;
      dots_ = other.dots_.Clone();
      stringElements_ = other.stringElements_.Clone();
      intElements_ = other.intElements_.Clone();
      longElements_ = other.longElements_.Clone();
      otherElements_ = other.otherElements_.Clone();
      actorRefElements_ = other.actorRefElements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORSet Clone() {
      return new ORSet(this);
    }

    /// <summary>Field number for the "vvector" field.</summary>
    public const int VvectorFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector vvector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector Vvector {
      get { return vvector_; }
      set {
        vvector_ = value;
      }
    }

    /// <summary>Field number for the "dots" field.</summary>
    public const int DotsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector> _repeated_dots_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector> dots_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector> Dots {
      get { return dots_; }
    }

    /// <summary>Field number for the "stringElements" field.</summary>
    public const int StringElementsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_stringElements_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> stringElements_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringElements {
      get { return stringElements_; }
    }

    /// <summary>Field number for the "intElements" field.</summary>
    public const int IntElementsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_intElements_codec
        = pb::FieldCodec.ForSInt32(34);
    private readonly pbc::RepeatedField<int> intElements_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntElements {
      get { return intElements_; }
    }

    /// <summary>Field number for the "longElements" field.</summary>
    public const int LongElementsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_longElements_codec
        = pb::FieldCodec.ForSInt64(42);
    private readonly pbc::RepeatedField<long> longElements_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> LongElements {
      get { return longElements_; }
    }

    /// <summary>Field number for the "otherElements" field.</summary>
    public const int OtherElementsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage> _repeated_otherElements_codec
        = pb::FieldCodec.ForMessage(50, global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage> otherElements_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage> OtherElements {
      get { return otherElements_; }
    }

    /// <summary>Field number for the "actorRefElements" field.</summary>
    public const int ActorRefElementsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_actorRefElements_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> actorRefElements_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ActorRefElements {
      get { return actorRefElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ORSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ORSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Vvector, other.Vvector)) return false;
      if(!dots_.Equals(other.dots_)) return false;
      if(!stringElements_.Equals(other.stringElements_)) return false;
      if(!intElements_.Equals(other.intElements_)) return false;
      if(!longElements_.Equals(other.longElements_)) return false;
      if(!otherElements_.Equals(other.otherElements_)) return false;
      if(!actorRefElements_.Equals(other.actorRefElements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (vvector_ != null) hash ^= Vvector.GetHashCode();
      hash ^= dots_.GetHashCode();
      hash ^= stringElements_.GetHashCode();
      hash ^= intElements_.GetHashCode();
      hash ^= longElements_.GetHashCode();
      hash ^= otherElements_.GetHashCode();
      hash ^= actorRefElements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (vvector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vvector);
      }
      dots_.WriteTo(output, _repeated_dots_codec);
      stringElements_.WriteTo(output, _repeated_stringElements_codec);
      intElements_.WriteTo(output, _repeated_intElements_codec);
      longElements_.WriteTo(output, _repeated_longElements_codec);
      otherElements_.WriteTo(output, _repeated_otherElements_codec);
      actorRefElements_.WriteTo(output, _repeated_actorRefElements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (vvector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vvector);
      }
      size += dots_.CalculateSize(_repeated_dots_codec);
      size += stringElements_.CalculateSize(_repeated_stringElements_codec);
      size += intElements_.CalculateSize(_repeated_intElements_codec);
      size += longElements_.CalculateSize(_repeated_longElements_codec);
      size += otherElements_.CalculateSize(_repeated_otherElements_codec);
      size += actorRefElements_.CalculateSize(_repeated_actorRefElements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ORSet other) {
      if (other == null) {
        return;
      }
      if (other.vvector_ != null) {
        if (vvector_ == null) {
          vvector_ = new global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector();
        }
        Vvector.MergeFrom(other.Vvector);
      }
      dots_.Add(other.dots_);
      stringElements_.Add(other.stringElements_);
      intElements_.Add(other.intElements_);
      longElements_.Add(other.longElements_);
      otherElements_.Add(other.otherElements_);
      actorRefElements_.Add(other.actorRefElements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (vvector_ == null) {
              vvector_ = new global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector();
            }
            input.ReadMessage(vvector_);
            break;
          }
          case 18: {
            dots_.AddEntriesFrom(input, _repeated_dots_codec);
            break;
          }
          case 26: {
            stringElements_.AddEntriesFrom(input, _repeated_stringElements_codec);
            break;
          }
          case 34:
          case 32: {
            intElements_.AddEntriesFrom(input, _repeated_intElements_codec);
            break;
          }
          case 42:
          case 40: {
            longElements_.AddEntriesFrom(input, _repeated_longElements_codec);
            break;
          }
          case 50: {
            otherElements_.AddEntriesFrom(input, _repeated_otherElements_codec);
            break;
          }
          case 58: {
            actorRefElements_.AddEntriesFrom(input, _repeated_actorRefElements_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ORSetDeltaGroup : pb::IMessage<ORSetDeltaGroup> {
    private static readonly pb::MessageParser<ORSetDeltaGroup> _parser = new pb::MessageParser<ORSetDeltaGroup>(() => new ORSetDeltaGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ORSetDeltaGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORSetDeltaGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORSetDeltaGroup(ORSetDeltaGroup other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORSetDeltaGroup Clone() {
      return new ORSetDeltaGroup(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ORSetDeltaGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ORSetDeltaGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ORSetDeltaGroup other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ORSetDeltaGroup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaGroup.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          operation_ = other.operation_;
          Underlying = other.underlying_ != null ? other.Underlying.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "operation" field.</summary>
        public const int OperationFieldNumber = 1;
        private global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaOp operation_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaOp Operation {
          get { return operation_; }
          set {
            operation_ = value;
          }
        }

        /// <summary>Field number for the "underlying" field.</summary>
        public const int UnderlyingFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet underlying_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Underlying {
          get { return underlying_; }
          set {
            underlying_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Operation != other.Operation) return false;
          if (!object.Equals(Underlying, other.Underlying)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Operation != 0) hash ^= Operation.GetHashCode();
          if (underlying_ != null) hash ^= Underlying.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Operation != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Operation);
          }
          if (underlying_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Underlying);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Operation != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
          }
          if (underlying_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Underlying);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.Operation != 0) {
            Operation = other.Operation;
          }
          if (other.underlying_ != null) {
            if (underlying_ == null) {
              underlying_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            Underlying.MergeFrom(other.Underlying);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                operation_ = (global::Akka.DistributedData.Serialization.Proto.Msg.ORSetDeltaOp) input.ReadEnum();
                break;
              }
              case 18: {
                if (underlying_ == null) {
                  underlying_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
                }
                input.ReadMessage(underlying_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Flag : pb::IMessage<Flag> {
    private static readonly pb::MessageParser<Flag> _parser = new pb::MessageParser<Flag>(() => new Flag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flag(Flag other) : this() {
      enabled_ = other.enabled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flag Clone() {
      return new Flag(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flag other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LWWRegister : pb::IMessage<LWWRegister> {
    private static readonly pb::MessageParser<LWWRegister> _parser = new pb::MessageParser<LWWRegister>(() => new LWWRegister());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LWWRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LWWRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LWWRegister(LWWRegister other) : this() {
      timestamp_ = other.timestamp_;
      Node = other.node_ != null ? other.Node.Clone() : null;
      State = other.state_ != null ? other.State.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LWWRegister Clone() {
      return new LWWRegister(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LWWRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LWWRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(State, other.State)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (node_ != null) hash ^= Node.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Timestamp);
      }
      if (node_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (state_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LWWRegister other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        State.MergeFrom(other.State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 18: {
            if (node_ == null) {
              node_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(node_);
            break;
          }
          case 26: {
            if (state_ == null) {
              state_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(state_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GCounter : pb::IMessage<GCounter> {
    private static readonly pb::MessageParser<GCounter> _parser = new pb::MessageParser<GCounter>(() => new GCounter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GCounter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GCounter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GCounter(GCounter other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GCounter Clone() {
      return new GCounter(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GCounter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GCounter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GCounter other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GCounter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.GCounter.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          Node = other.node_ != null ? other.Node.Clone() : null;
          value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "node" field.</summary>
        public const int NodeFieldNumber = 1;
        private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress node_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress Node {
          get { return node_; }
          set {
            node_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Node, other.Node)) return false;
          if (Value != other.Value) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (node_ != null) hash ^= Node.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (node_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Node);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (node_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.node_ != null) {
            if (node_ == null) {
              node_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            Node.MergeFrom(other.Node);
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (node_ == null) {
                  node_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
                }
                input.ReadMessage(node_);
                break;
              }
              case 18: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class PNCounter : pb::IMessage<PNCounter> {
    private static readonly pb::MessageParser<PNCounter> _parser = new pb::MessageParser<PNCounter>(() => new PNCounter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PNCounter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNCounter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNCounter(PNCounter other) : this() {
      Increments = other.increments_ != null ? other.Increments.Clone() : null;
      Decrements = other.decrements_ != null ? other.Decrements.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNCounter Clone() {
      return new PNCounter(this);
    }

    /// <summary>Field number for the "increments" field.</summary>
    public const int IncrementsFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.GCounter increments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.GCounter Increments {
      get { return increments_; }
      set {
        increments_ = value;
      }
    }

    /// <summary>Field number for the "decrements" field.</summary>
    public const int DecrementsFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.GCounter decrements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.GCounter Decrements {
      get { return decrements_; }
      set {
        decrements_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PNCounter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PNCounter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Increments, other.Increments)) return false;
      if (!object.Equals(Decrements, other.Decrements)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (increments_ != null) hash ^= Increments.GetHashCode();
      if (decrements_ != null) hash ^= Decrements.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (increments_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Increments);
      }
      if (decrements_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Decrements);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (increments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Increments);
      }
      if (decrements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decrements);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PNCounter other) {
      if (other == null) {
        return;
      }
      if (other.increments_ != null) {
        if (increments_ == null) {
          increments_ = new global::Akka.DistributedData.Serialization.Proto.Msg.GCounter();
        }
        Increments.MergeFrom(other.Increments);
      }
      if (other.decrements_ != null) {
        if (decrements_ == null) {
          decrements_ = new global::Akka.DistributedData.Serialization.Proto.Msg.GCounter();
        }
        Decrements.MergeFrom(other.Decrements);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (increments_ == null) {
              increments_ = new global::Akka.DistributedData.Serialization.Proto.Msg.GCounter();
            }
            input.ReadMessage(increments_);
            break;
          }
          case 18: {
            if (decrements_ == null) {
              decrements_ = new global::Akka.DistributedData.Serialization.Proto.Msg.GCounter();
            }
            input.ReadMessage(decrements_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ORMap : pb::IMessage<ORMap> {
    private static readonly pb::MessageParser<ORMap> _parser = new pb::MessageParser<ORMap>(() => new ORMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ORMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMap(ORMap other) : this() {
      Keys = other.keys_ != null ? other.Keys.Clone() : null;
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMap Clone() {
      return new ORMap(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet keys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ORMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ORMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Keys, other.Keys)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keys_ != null) hash ^= Keys.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keys_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Keys);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ORMap other) {
      if (other == null) {
        return;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
        }
        Keys.MergeFrom(other.Keys);
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (keys_ == null) {
              keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            input.ReadMessage(keys_);
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ORMap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.ORMap.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          stringKey_ = other.stringKey_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          intKey_ = other.intKey_;
          longKey_ = other.longKey_;
          OtherKey = other.otherKey_ != null ? other.OtherKey.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "stringKey" field.</summary>
        public const int StringKeyFieldNumber = 1;
        private string stringKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringKey {
          get { return stringKey_; }
          set {
            stringKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "intKey" field.</summary>
        public const int IntKeyFieldNumber = 3;
        private int intKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntKey {
          get { return intKey_; }
          set {
            intKey_ = value;
          }
        }

        /// <summary>Field number for the "longKey" field.</summary>
        public const int LongKeyFieldNumber = 4;
        private long longKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongKey {
          get { return longKey_; }
          set {
            longKey_ = value;
          }
        }

        /// <summary>Field number for the "otherKey" field.</summary>
        public const int OtherKeyFieldNumber = 5;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage otherKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage OtherKey {
          get { return otherKey_; }
          set {
            otherKey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringKey != other.StringKey) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (IntKey != other.IntKey) return false;
          if (LongKey != other.LongKey) return false;
          if (!object.Equals(OtherKey, other.OtherKey)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StringKey.Length != 0) hash ^= StringKey.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (IntKey != 0) hash ^= IntKey.GetHashCode();
          if (LongKey != 0L) hash ^= LongKey.GetHashCode();
          if (otherKey_ != null) hash ^= OtherKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StringKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(StringKey);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (IntKey != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(IntKey);
          }
          if (LongKey != 0L) {
            output.WriteRawTag(32);
            output.WriteSInt64(LongKey);
          }
          if (otherKey_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StringKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringKey);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (IntKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IntKey);
          }
          if (LongKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongKey);
          }
          if (otherKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.StringKey.Length != 0) {
            StringKey = other.StringKey;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.IntKey != 0) {
            IntKey = other.IntKey;
          }
          if (other.LongKey != 0L) {
            LongKey = other.LongKey;
          }
          if (other.otherKey_ != null) {
            if (otherKey_ == null) {
              otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            OtherKey.MergeFrom(other.OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringKey = input.ReadString();
                break;
              }
              case 18: {
                if (value_ == null) {
                  value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(value_);
                break;
              }
              case 24: {
                IntKey = input.ReadSInt32();
                break;
              }
              case 32: {
                LongKey = input.ReadSInt64();
                break;
              }
              case 42: {
                if (otherKey_ == null) {
                  otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(otherKey_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class ORMapDeltaGroup : pb::IMessage<ORMapDeltaGroup> {
    private static readonly pb::MessageParser<ORMapDeltaGroup> _parser = new pb::MessageParser<ORMapDeltaGroup>(() => new ORMapDeltaGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ORMapDeltaGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMapDeltaGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMapDeltaGroup(ORMapDeltaGroup other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMapDeltaGroup Clone() {
      return new ORMapDeltaGroup(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ORMapDeltaGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ORMapDeltaGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ORMapDeltaGroup other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ORMapDeltaGroup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class MapEntry : pb::IMessage<MapEntry> {
        private static readonly pb::MessageParser<MapEntry> _parser = new pb::MessageParser<MapEntry>(() => new MapEntry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapEntry(MapEntry other) : this() {
          stringKey_ = other.stringKey_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          intKey_ = other.intKey_;
          longKey_ = other.longKey_;
          OtherKey = other.otherKey_ != null ? other.OtherKey.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapEntry Clone() {
          return new MapEntry(this);
        }

        /// <summary>Field number for the "stringKey" field.</summary>
        public const int StringKeyFieldNumber = 1;
        private string stringKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringKey {
          get { return stringKey_; }
          set {
            stringKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "intKey" field.</summary>
        public const int IntKeyFieldNumber = 3;
        private int intKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntKey {
          get { return intKey_; }
          set {
            intKey_ = value;
          }
        }

        /// <summary>Field number for the "longKey" field.</summary>
        public const int LongKeyFieldNumber = 4;
        private long longKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongKey {
          get { return longKey_; }
          set {
            longKey_ = value;
          }
        }

        /// <summary>Field number for the "otherKey" field.</summary>
        public const int OtherKeyFieldNumber = 5;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage otherKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage OtherKey {
          get { return otherKey_; }
          set {
            otherKey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringKey != other.StringKey) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (IntKey != other.IntKey) return false;
          if (LongKey != other.LongKey) return false;
          if (!object.Equals(OtherKey, other.OtherKey)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StringKey.Length != 0) hash ^= StringKey.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (IntKey != 0) hash ^= IntKey.GetHashCode();
          if (LongKey != 0L) hash ^= LongKey.GetHashCode();
          if (otherKey_ != null) hash ^= OtherKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StringKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(StringKey);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (IntKey != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(IntKey);
          }
          if (LongKey != 0L) {
            output.WriteRawTag(32);
            output.WriteSInt64(LongKey);
          }
          if (otherKey_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StringKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringKey);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (IntKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IntKey);
          }
          if (LongKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongKey);
          }
          if (otherKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapEntry other) {
          if (other == null) {
            return;
          }
          if (other.StringKey.Length != 0) {
            StringKey = other.StringKey;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.IntKey != 0) {
            IntKey = other.IntKey;
          }
          if (other.LongKey != 0L) {
            LongKey = other.LongKey;
          }
          if (other.otherKey_ != null) {
            if (otherKey_ == null) {
              otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            OtherKey.MergeFrom(other.OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringKey = input.ReadString();
                break;
              }
              case 18: {
                if (value_ == null) {
                  value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(value_);
                break;
              }
              case 24: {
                IntKey = input.ReadSInt32();
                break;
              }
              case 32: {
                LongKey = input.ReadSInt64();
                break;
              }
              case 42: {
                if (otherKey_ == null) {
                  otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(otherKey_);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          operation_ = other.operation_;
          Underlying = other.underlying_ != null ? other.Underlying.Clone() : null;
          zeroTag_ = other.zeroTag_;
          entryData_ = other.entryData_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "operation" field.</summary>
        public const int OperationFieldNumber = 1;
        private global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaOp operation_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaOp Operation {
          get { return operation_; }
          set {
            operation_ = value;
          }
        }

        /// <summary>Field number for the "underlying" field.</summary>
        public const int UnderlyingFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet underlying_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Underlying {
          get { return underlying_; }
          set {
            underlying_ = value;
          }
        }

        /// <summary>Field number for the "zeroTag" field.</summary>
        public const int ZeroTagFieldNumber = 3;
        private int zeroTag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ZeroTag {
          get { return zeroTag_; }
          set {
            zeroTag_ = value;
          }
        }

        /// <summary>Field number for the "entryData" field.</summary>
        public const int EntryDataFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry> _repeated_entryData_codec
            = pb::FieldCodec.ForMessage(34, global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry.Parser);
        private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry> entryData_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaGroup.Types.MapEntry> EntryData {
          get { return entryData_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Operation != other.Operation) return false;
          if (!object.Equals(Underlying, other.Underlying)) return false;
          if (ZeroTag != other.ZeroTag) return false;
          if(!entryData_.Equals(other.entryData_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Operation != 0) hash ^= Operation.GetHashCode();
          if (underlying_ != null) hash ^= Underlying.GetHashCode();
          if (ZeroTag != 0) hash ^= ZeroTag.GetHashCode();
          hash ^= entryData_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Operation != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Operation);
          }
          if (underlying_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Underlying);
          }
          if (ZeroTag != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(ZeroTag);
          }
          entryData_.WriteTo(output, _repeated_entryData_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Operation != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
          }
          if (underlying_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Underlying);
          }
          if (ZeroTag != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ZeroTag);
          }
          size += entryData_.CalculateSize(_repeated_entryData_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.Operation != 0) {
            Operation = other.Operation;
          }
          if (other.underlying_ != null) {
            if (underlying_ == null) {
              underlying_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            Underlying.MergeFrom(other.Underlying);
          }
          if (other.ZeroTag != 0) {
            ZeroTag = other.ZeroTag;
          }
          entryData_.Add(other.entryData_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                operation_ = (global::Akka.DistributedData.Serialization.Proto.Msg.ORMapDeltaOp) input.ReadEnum();
                break;
              }
              case 18: {
                if (underlying_ == null) {
                  underlying_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
                }
                input.ReadMessage(underlying_);
                break;
              }
              case 24: {
                ZeroTag = input.ReadSInt32();
                break;
              }
              case 34: {
                entryData_.AddEntriesFrom(input, _repeated_entryData_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class LWWMap : pb::IMessage<LWWMap> {
    private static readonly pb::MessageParser<LWWMap> _parser = new pb::MessageParser<LWWMap>(() => new LWWMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LWWMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LWWMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LWWMap(LWWMap other) : this() {
      Keys = other.keys_ != null ? other.Keys.Clone() : null;
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LWWMap Clone() {
      return new LWWMap(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet keys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LWWMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LWWMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Keys, other.Keys)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keys_ != null) hash ^= Keys.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keys_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Keys);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LWWMap other) {
      if (other == null) {
        return;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
        }
        Keys.MergeFrom(other.Keys);
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (keys_ == null) {
              keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            input.ReadMessage(keys_);
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LWWMap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.LWWMap.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          stringKey_ = other.stringKey_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          intKey_ = other.intKey_;
          longKey_ = other.longKey_;
          OtherKey = other.otherKey_ != null ? other.OtherKey.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "stringKey" field.</summary>
        public const int StringKeyFieldNumber = 1;
        private string stringKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringKey {
          get { return stringKey_; }
          set {
            stringKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.LWWRegister value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.LWWRegister Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "intKey" field.</summary>
        public const int IntKeyFieldNumber = 3;
        private int intKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntKey {
          get { return intKey_; }
          set {
            intKey_ = value;
          }
        }

        /// <summary>Field number for the "longKey" field.</summary>
        public const int LongKeyFieldNumber = 4;
        private long longKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongKey {
          get { return longKey_; }
          set {
            longKey_ = value;
          }
        }

        /// <summary>Field number for the "otherKey" field.</summary>
        public const int OtherKeyFieldNumber = 5;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage otherKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage OtherKey {
          get { return otherKey_; }
          set {
            otherKey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringKey != other.StringKey) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (IntKey != other.IntKey) return false;
          if (LongKey != other.LongKey) return false;
          if (!object.Equals(OtherKey, other.OtherKey)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StringKey.Length != 0) hash ^= StringKey.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (IntKey != 0) hash ^= IntKey.GetHashCode();
          if (LongKey != 0L) hash ^= LongKey.GetHashCode();
          if (otherKey_ != null) hash ^= OtherKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StringKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(StringKey);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (IntKey != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(IntKey);
          }
          if (LongKey != 0L) {
            output.WriteRawTag(32);
            output.WriteSInt64(LongKey);
          }
          if (otherKey_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StringKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringKey);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (IntKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IntKey);
          }
          if (LongKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongKey);
          }
          if (otherKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.StringKey.Length != 0) {
            StringKey = other.StringKey;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.LWWRegister();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.IntKey != 0) {
            IntKey = other.IntKey;
          }
          if (other.LongKey != 0L) {
            LongKey = other.LongKey;
          }
          if (other.otherKey_ != null) {
            if (otherKey_ == null) {
              otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            OtherKey.MergeFrom(other.OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringKey = input.ReadString();
                break;
              }
              case 18: {
                if (value_ == null) {
                  value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.LWWRegister();
                }
                input.ReadMessage(value_);
                break;
              }
              case 24: {
                IntKey = input.ReadSInt32();
                break;
              }
              case 32: {
                LongKey = input.ReadSInt64();
                break;
              }
              case 42: {
                if (otherKey_ == null) {
                  otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(otherKey_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class PNCounterMap : pb::IMessage<PNCounterMap> {
    private static readonly pb::MessageParser<PNCounterMap> _parser = new pb::MessageParser<PNCounterMap>(() => new PNCounterMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PNCounterMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNCounterMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNCounterMap(PNCounterMap other) : this() {
      Keys = other.keys_ != null ? other.Keys.Clone() : null;
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNCounterMap Clone() {
      return new PNCounterMap(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet keys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PNCounterMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PNCounterMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Keys, other.Keys)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keys_ != null) hash ^= Keys.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keys_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Keys);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PNCounterMap other) {
      if (other == null) {
        return;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
        }
        Keys.MergeFrom(other.Keys);
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (keys_ == null) {
              keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            input.ReadMessage(keys_);
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PNCounterMap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.PNCounterMap.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          stringKey_ = other.stringKey_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          intKey_ = other.intKey_;
          longKey_ = other.longKey_;
          OtherKey = other.otherKey_ != null ? other.OtherKey.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "stringKey" field.</summary>
        public const int StringKeyFieldNumber = 1;
        private string stringKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringKey {
          get { return stringKey_; }
          set {
            stringKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.PNCounter value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.PNCounter Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "intKey" field.</summary>
        public const int IntKeyFieldNumber = 3;
        private int intKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntKey {
          get { return intKey_; }
          set {
            intKey_ = value;
          }
        }

        /// <summary>Field number for the "longKey" field.</summary>
        public const int LongKeyFieldNumber = 4;
        private long longKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongKey {
          get { return longKey_; }
          set {
            longKey_ = value;
          }
        }

        /// <summary>Field number for the "otherKey" field.</summary>
        public const int OtherKeyFieldNumber = 5;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage otherKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage OtherKey {
          get { return otherKey_; }
          set {
            otherKey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringKey != other.StringKey) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (IntKey != other.IntKey) return false;
          if (LongKey != other.LongKey) return false;
          if (!object.Equals(OtherKey, other.OtherKey)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StringKey.Length != 0) hash ^= StringKey.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (IntKey != 0) hash ^= IntKey.GetHashCode();
          if (LongKey != 0L) hash ^= LongKey.GetHashCode();
          if (otherKey_ != null) hash ^= OtherKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StringKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(StringKey);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (IntKey != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(IntKey);
          }
          if (LongKey != 0L) {
            output.WriteRawTag(32);
            output.WriteSInt64(LongKey);
          }
          if (otherKey_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StringKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringKey);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (IntKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IntKey);
          }
          if (LongKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongKey);
          }
          if (otherKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.StringKey.Length != 0) {
            StringKey = other.StringKey;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.PNCounter();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.IntKey != 0) {
            IntKey = other.IntKey;
          }
          if (other.LongKey != 0L) {
            LongKey = other.LongKey;
          }
          if (other.otherKey_ != null) {
            if (otherKey_ == null) {
              otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            OtherKey.MergeFrom(other.OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringKey = input.ReadString();
                break;
              }
              case 18: {
                if (value_ == null) {
                  value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.PNCounter();
                }
                input.ReadMessage(value_);
                break;
              }
              case 24: {
                IntKey = input.ReadSInt32();
                break;
              }
              case 32: {
                LongKey = input.ReadSInt64();
                break;
              }
              case 42: {
                if (otherKey_ == null) {
                  otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(otherKey_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class ORMultiMap : pb::IMessage<ORMultiMap> {
    private static readonly pb::MessageParser<ORMultiMap> _parser = new pb::MessageParser<ORMultiMap>(() => new ORMultiMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ORMultiMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatedDataMessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMultiMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMultiMap(ORMultiMap other) : this() {
      Keys = other.keys_ != null ? other.Keys.Clone() : null;
      entries_ = other.entries_.Clone();
      withValueDeltas_ = other.withValueDeltas_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ORMultiMap Clone() {
      return new ORMultiMap(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet keys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Types.Entry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "withValueDeltas" field.</summary>
    public const int WithValueDeltasFieldNumber = 3;
    private bool withValueDeltas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithValueDeltas {
      get { return withValueDeltas_; }
      set {
        withValueDeltas_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ORMultiMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ORMultiMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Keys, other.Keys)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      if (WithValueDeltas != other.WithValueDeltas) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keys_ != null) hash ^= Keys.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (WithValueDeltas != false) hash ^= WithValueDeltas.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keys_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Keys);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (WithValueDeltas != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithValueDeltas);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (WithValueDeltas != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ORMultiMap other) {
      if (other == null) {
        return;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
        }
        Keys.MergeFrom(other.Keys);
      }
      entries_.Add(other.entries_);
      if (other.WithValueDeltas != false) {
        WithValueDeltas = other.WithValueDeltas;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (keys_ == null) {
              keys_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            input.ReadMessage(keys_);
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 24: {
            WithValueDeltas = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ORMultiMap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.ORMultiMap.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          stringKey_ = other.stringKey_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          intKey_ = other.intKey_;
          longKey_ = other.longKey_;
          OtherKey = other.otherKey_ != null ? other.OtherKey.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "stringKey" field.</summary>
        public const int StringKeyFieldNumber = 1;
        private string stringKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringKey {
          get { return stringKey_; }
          set {
            stringKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.ORSet value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.ORSet Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "intKey" field.</summary>
        public const int IntKeyFieldNumber = 3;
        private int intKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IntKey {
          get { return intKey_; }
          set {
            intKey_ = value;
          }
        }

        /// <summary>Field number for the "longKey" field.</summary>
        public const int LongKeyFieldNumber = 4;
        private long longKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LongKey {
          get { return longKey_; }
          set {
            longKey_ = value;
          }
        }

        /// <summary>Field number for the "otherKey" field.</summary>
        public const int OtherKeyFieldNumber = 5;
        private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage otherKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage OtherKey {
          get { return otherKey_; }
          set {
            otherKey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringKey != other.StringKey) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (IntKey != other.IntKey) return false;
          if (LongKey != other.LongKey) return false;
          if (!object.Equals(OtherKey, other.OtherKey)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StringKey.Length != 0) hash ^= StringKey.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (IntKey != 0) hash ^= IntKey.GetHashCode();
          if (LongKey != 0L) hash ^= LongKey.GetHashCode();
          if (otherKey_ != null) hash ^= OtherKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StringKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(StringKey);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (IntKey != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(IntKey);
          }
          if (LongKey != 0L) {
            output.WriteRawTag(32);
            output.WriteSInt64(LongKey);
          }
          if (otherKey_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StringKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringKey);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (IntKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IntKey);
          }
          if (LongKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LongKey);
          }
          if (otherKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.StringKey.Length != 0) {
            StringKey = other.StringKey;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
            }
            Value.MergeFrom(other.Value);
          }
          if (other.IntKey != 0) {
            IntKey = other.IntKey;
          }
          if (other.LongKey != 0L) {
            LongKey = other.LongKey;
          }
          if (other.otherKey_ != null) {
            if (otherKey_ == null) {
              otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            OtherKey.MergeFrom(other.OtherKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringKey = input.ReadString();
                break;
              }
              case 18: {
                if (value_ == null) {
                  value_ = new global::Akka.DistributedData.Serialization.Proto.Msg.ORSet();
                }
                input.ReadMessage(value_);
                break;
              }
              case 24: {
                IntKey = input.ReadSInt32();
                break;
              }
              case 32: {
                LongKey = input.ReadSInt64();
                break;
              }
              case 42: {
                if (otherKey_ == null) {
                  otherKey_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
                }
                input.ReadMessage(otherKey_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
