// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.Proto.Msg {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class ClusterMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Join__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Join, global::Akka.Cluster.Proto.Msg.Join.Builder> internal__static_Join__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Welcome__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Welcome, global::Akka.Cluster.Proto.Msg.Welcome.Builder> internal__static_Welcome__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_GossipEnvelope__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.GossipEnvelope, global::Akka.Cluster.Proto.Msg.GossipEnvelope.Builder> internal__static_GossipEnvelope__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_GossipStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.GossipStatus, global::Akka.Cluster.Proto.Msg.GossipStatus.Builder> internal__static_GossipStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gossip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Gossip, global::Akka.Cluster.Proto.Msg.Gossip.Builder> internal__static_Gossip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_GossipOverview__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.GossipOverview, global::Akka.Cluster.Proto.Msg.GossipOverview.Builder> internal__static_GossipOverview__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ObserverReachability__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.ObserverReachability, global::Akka.Cluster.Proto.Msg.ObserverReachability.Builder> internal__static_ObserverReachability__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_SubjectReachability__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.SubjectReachability, global::Akka.Cluster.Proto.Msg.SubjectReachability.Builder> internal__static_SubjectReachability__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Member__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Member, global::Akka.Cluster.Proto.Msg.Member.Builder> internal__static_Member__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_VectorClock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.VectorClock, global::Akka.Cluster.Proto.Msg.VectorClock.Builder> internal__static_VectorClock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_VectorClock_Version__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version, global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.Builder> internal__static_VectorClock_Version__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MetricsGossipEnvelope__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope, global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope.Builder> internal__static_MetricsGossipEnvelope__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MetricsGossip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.MetricsGossip, global::Akka.Cluster.Proto.Msg.MetricsGossip.Builder> internal__static_MetricsGossip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics, global::Akka.Cluster.Proto.Msg.NodeMetrics.Builder> internal__static_NodeMetrics__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics_Number__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.Builder> internal__static_NodeMetrics_Number__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics_EWMA__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.Builder> internal__static_NodeMetrics_EWMA__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics_Metric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.Builder> internal__static_NodeMetrics_Metric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Empty__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Empty, global::Akka.Cluster.Proto.Msg.Empty.Builder> internal__static_Empty__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Address__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Address, global::Akka.Cluster.Proto.Msg.Address.Builder> internal__static_Address__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_UniqueAddress__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.UniqueAddress, global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder> internal__static_UniqueAddress__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ClusterMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChVDbHVzdGVyTWVzc2FnZXMucHJvdG8iMwoESm9pbhIcCgRub2RlGAEgAigL" + 
          "Mg4uVW5pcXVlQWRkcmVzcxINCgVyb2xlcxgCIAMoCSJACgdXZWxjb21lEhwK" + 
          "BGZyb20YASACKAsyDi5VbmlxdWVBZGRyZXNzEhcKBmdvc3NpcBgCIAIoCzIH" + 
          "Lkdvc3NpcCJkCg5Hb3NzaXBFbnZlbG9wZRIcCgRmcm9tGAEgAigLMg4uVW5p" + 
          "cXVlQWRkcmVzcxIaCgJ0bxgCIAIoCzIOLlVuaXF1ZUFkZHJlc3MSGAoQc2Vy" + 
          "aWFsaXplZEdvc3NpcBgDIAIoDCJeCgxHb3NzaXBTdGF0dXMSHAoEZnJvbRgB" + 
          "IAIoCzIOLlVuaXF1ZUFkZHJlc3MSEQoJYWxsSGFzaGVzGAIgAygJEh0KB3Zl" + 
          "cnNpb24YAyACKAsyDC5WZWN0b3JDbG9jayKvAQoGR29zc2lwEiQKDGFsbEFk" + 
          "ZHJlc3NlcxgBIAMoCzIOLlVuaXF1ZUFkZHJlc3MSEAoIYWxsUm9sZXMYAiAD" + 
          "KAkSEQoJYWxsSGFzaGVzGAMgAygJEhgKB21lbWJlcnMYBCADKAsyBy5NZW1i" + 
          "ZXISIQoIb3ZlcnZpZXcYBSACKAsyDy5Hb3NzaXBPdmVydmlldxIdCgd2ZXJz" + 
          "aW9uGAYgAigLMgwuVmVjdG9yQ2xvY2siUwoOR29zc2lwT3ZlcnZpZXcSDAoE" + 
          "c2VlbhgBIAMoBRIzChRvYnNlcnZlclJlYWNoYWJpbGl0eRgCIAMoCzIVLk9i" + 
          "c2VydmVyUmVhY2hhYmlsaXR5InAKFE9ic2VydmVyUmVhY2hhYmlsaXR5EhQK" + 
          "DGFkZHJlc3NJbmRleBgBIAIoBRIPCgd2ZXJzaW9uGAQgAigDEjEKE3N1Ympl" + 
          "Y3RSZWFjaGFiaWxpdHkYAiADKAsyFC5TdWJqZWN0UmVhY2hhYmlsaXR5ImEK" + 
          "E1N1YmplY3RSZWFjaGFiaWxpdHkSFAoMYWRkcmVzc0luZGV4GAEgAigFEiMK" + 
          "BnN0YXR1cxgDIAIoDjITLlJlYWNoYWJpbGl0eVN0YXR1cxIPCgd2ZXJzaW9u" + 
          "GAQgAigDImkKBk1lbWJlchIUCgxhZGRyZXNzSW5kZXgYASACKAUSEAoIdXBO" + 
          "dW1iZXIYAiACKAUSHQoGc3RhdHVzGAMgAigOMg0uTWVtYmVyU3RhdHVzEhgK" + 
          "DHJvbGVzSW5kZXhlcxgEIAMoBUICEAEieQoLVmVjdG9yQ2xvY2sSEQoJdGlt" + 
          "ZXN0YW1wGAEgASgDEiYKCHZlcnNpb25zGAIgAygLMhQuVmVjdG9yQ2xvY2su" + 
          "VmVyc2lvbhovCgdWZXJzaW9uEhEKCWhhc2hJbmRleBgBIAIoBRIRCgl0aW1l" + 
          "c3RhbXAYAiACKAMiXgoVTWV0cmljc0dvc3NpcEVudmVsb3BlEhYKBGZyb20Y" + 
          "ASACKAsyCC5BZGRyZXNzEh4KBmdvc3NpcBgCIAIoCzIOLk1ldHJpY3NHb3Nz" + 
          "aXASDQoFcmVwbHkYAyACKAgiagoNTWV0cmljc0dvc3NpcBIeCgxhbGxBZGRy" + 
          "ZXNzZXMYASADKAsyCC5BZGRyZXNzEhYKDmFsbE1ldHJpY05hbWVzGAIgAygJ" + 
          "EiEKC25vZGVNZXRyaWNzGAMgAygLMgwuTm9kZU1ldHJpY3MimAMKC05vZGVN" + 
          "ZXRyaWNzEhQKDGFkZHJlc3NJbmRleBgBIAIoBRIRCgl0aW1lc3RhbXAYAiAC" + 
          "KAMSJAoHbWV0cmljcxgDIAMoCzITLk5vZGVNZXRyaWNzLk1ldHJpYxplCgZO" + 
          "dW1iZXISJQoEdHlwZRgBIAIoDjIXLk5vZGVNZXRyaWNzLk51bWJlclR5cGUS" + 
          "DwoHdmFsdWUzMhgCIAEoDRIPCgd2YWx1ZTY0GAMgASgEEhIKCnNlcmlhbGl6" + 
          "ZWQYBCABKAwaJAoERVdNQRINCgV2YWx1ZRgBIAIoARINCgVhbHBoYRgCIAIo" + 
          "ARphCgZNZXRyaWMSEQoJbmFtZUluZGV4GAEgAigFEiMKBm51bWJlchgCIAIo" + 
          "CzITLk5vZGVNZXRyaWNzLk51bWJlchIfCgRld21hGAMgASgLMhEuTm9kZU1l" + 
          "dHJpY3MuRVdNQSJKCgpOdW1iZXJUeXBlEg4KClNlcmlhbGl6ZWQQABIKCgZE" + 
          "b3VibGUQARIJCgVGbG9hdBACEgsKB0ludGVnZXIQAxIICgRMb25nEAQiBwoF" + 
          "RW1wdHkiSwoHQWRkcmVzcxIOCgZzeXN0ZW0YASACKAkSEAoIaG9zdG5hbWUY" + 
          "AiACKAkSDAoEcG9ydBgDIAIoDRIQCghwcm90b2NvbBgEIAEoCSJFCg1Vbmlx" + 
          "dWVBZGRyZXNzEhkKB2FkZHJlc3MYASACKAsyCC5BZGRyZXNzEgsKA3VpZBgC" + 
          "IAIoDRIMCgR1aWQyGAMgASgNKkQKElJlYWNoYWJpbGl0eVN0YXR1cxINCglS" + 
          "ZWFjaGFibGUQABIPCgtVbnJlYWNoYWJsZRABEg4KClRlcm1pbmF0ZWQQAipi" + 
          "CgxNZW1iZXJTdGF0dXMSCwoHSm9pbmluZxAAEgYKAlVwEAESCwoHTGVhdmlu" + 
          "ZxACEgsKB0V4aXRpbmcQAxIICgREb3duEAQSCwoHUmVtb3ZlZBAFEgwKCFdl" + 
          "YWtseVVwEAZCHQoZYWtrYS5jbHVzdGVyLnByb3RvYnVmLm1zZ0gB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Join__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Join__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Join, global::Akka.Cluster.Proto.Msg.Join.Builder>(internal__static_Join__Descriptor,
                new string[] { "Node", "Roles", });
        internal__static_Welcome__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Welcome__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Welcome, global::Akka.Cluster.Proto.Msg.Welcome.Builder>(internal__static_Welcome__Descriptor,
                new string[] { "From", "Gossip", });
        internal__static_GossipEnvelope__Descriptor = Descriptor.MessageTypes[2];
        internal__static_GossipEnvelope__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.GossipEnvelope, global::Akka.Cluster.Proto.Msg.GossipEnvelope.Builder>(internal__static_GossipEnvelope__Descriptor,
                new string[] { "From", "To", "SerializedGossip", });
        internal__static_GossipStatus__Descriptor = Descriptor.MessageTypes[3];
        internal__static_GossipStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.GossipStatus, global::Akka.Cluster.Proto.Msg.GossipStatus.Builder>(internal__static_GossipStatus__Descriptor,
                new string[] { "From", "AllHashes", "Version", });
        internal__static_Gossip__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gossip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Gossip, global::Akka.Cluster.Proto.Msg.Gossip.Builder>(internal__static_Gossip__Descriptor,
                new string[] { "AllAddresses", "AllRoles", "AllHashes", "Members", "Overview", "Version", });
        internal__static_GossipOverview__Descriptor = Descriptor.MessageTypes[5];
        internal__static_GossipOverview__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.GossipOverview, global::Akka.Cluster.Proto.Msg.GossipOverview.Builder>(internal__static_GossipOverview__Descriptor,
                new string[] { "Seen", "ObserverReachability", });
        internal__static_ObserverReachability__Descriptor = Descriptor.MessageTypes[6];
        internal__static_ObserverReachability__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.ObserverReachability, global::Akka.Cluster.Proto.Msg.ObserverReachability.Builder>(internal__static_ObserverReachability__Descriptor,
                new string[] { "AddressIndex", "Version", "SubjectReachability", });
        internal__static_SubjectReachability__Descriptor = Descriptor.MessageTypes[7];
        internal__static_SubjectReachability__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.SubjectReachability, global::Akka.Cluster.Proto.Msg.SubjectReachability.Builder>(internal__static_SubjectReachability__Descriptor,
                new string[] { "AddressIndex", "Status", "Version", });
        internal__static_Member__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Member__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Member, global::Akka.Cluster.Proto.Msg.Member.Builder>(internal__static_Member__Descriptor,
                new string[] { "AddressIndex", "UpNumber", "Status", "RolesIndexes", });
        internal__static_VectorClock__Descriptor = Descriptor.MessageTypes[9];
        internal__static_VectorClock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.VectorClock, global::Akka.Cluster.Proto.Msg.VectorClock.Builder>(internal__static_VectorClock__Descriptor,
                new string[] { "Timestamp", "Versions", });
        internal__static_VectorClock_Version__Descriptor = internal__static_VectorClock__Descriptor.NestedTypes[0];
        internal__static_VectorClock_Version__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version, global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.Builder>(internal__static_VectorClock_Version__Descriptor,
                new string[] { "HashIndex", "Timestamp", });
        internal__static_MetricsGossipEnvelope__Descriptor = Descriptor.MessageTypes[10];
        internal__static_MetricsGossipEnvelope__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope, global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope.Builder>(internal__static_MetricsGossipEnvelope__Descriptor,
                new string[] { "From", "Gossip", "Reply", });
        internal__static_MetricsGossip__Descriptor = Descriptor.MessageTypes[11];
        internal__static_MetricsGossip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.MetricsGossip, global::Akka.Cluster.Proto.Msg.MetricsGossip.Builder>(internal__static_MetricsGossip__Descriptor,
                new string[] { "AllAddresses", "AllMetricNames", "NodeMetrics", });
        internal__static_NodeMetrics__Descriptor = Descriptor.MessageTypes[12];
        internal__static_NodeMetrics__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics, global::Akka.Cluster.Proto.Msg.NodeMetrics.Builder>(internal__static_NodeMetrics__Descriptor,
                new string[] { "AddressIndex", "Timestamp", "Metrics", });
        internal__static_NodeMetrics_Number__Descriptor = internal__static_NodeMetrics__Descriptor.NestedTypes[0];
        internal__static_NodeMetrics_Number__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.Builder>(internal__static_NodeMetrics_Number__Descriptor,
                new string[] { "Type", "Value32", "Value64", "Serialized", });
        internal__static_NodeMetrics_EWMA__Descriptor = internal__static_NodeMetrics__Descriptor.NestedTypes[1];
        internal__static_NodeMetrics_EWMA__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.Builder>(internal__static_NodeMetrics_EWMA__Descriptor,
                new string[] { "Value", "Alpha", });
        internal__static_NodeMetrics_Metric__Descriptor = internal__static_NodeMetrics__Descriptor.NestedTypes[2];
        internal__static_NodeMetrics_Metric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.Builder>(internal__static_NodeMetrics_Metric__Descriptor,
                new string[] { "NameIndex", "Number", "Ewma", });
        internal__static_Empty__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Empty__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Empty, global::Akka.Cluster.Proto.Msg.Empty.Builder>(internal__static_Empty__Descriptor,
                new string[] { });
        internal__static_Address__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Address__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.Address, global::Akka.Cluster.Proto.Msg.Address.Builder>(internal__static_Address__Descriptor,
                new string[] { "System", "Hostname", "Port", "Protocol", });
        internal__static_UniqueAddress__Descriptor = Descriptor.MessageTypes[15];
        internal__static_UniqueAddress__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Proto.Msg.UniqueAddress, global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder>(internal__static_UniqueAddress__Descriptor,
                new string[] { "Address", "Uid", "Uid2", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  internal enum ReachabilityStatus {
    Reachable = 0,
    Unreachable = 1,
    Terminated = 2,
  }
  
  internal enum MemberStatus {
    Joining = 0,
    Up = 1,
    Leaving = 2,
    Exiting = 3,
    Down = 4,
    Removed = 5,
    WeaklyUp = 6,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Join : pb::GeneratedMessage<Join, Join.Builder> {
    private Join() { }
    private static readonly Join defaultInstance = new Join().MakeReadOnly();
    private static readonly string[] _joinFieldNames = new string[] { "node", "roles" };
    private static readonly uint[] _joinFieldTags = new uint[] { 10, 18 };
    public static Join DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Join DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Join ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Join__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Join, Join.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Join__FieldAccessorTable; }
    }
    
    public const int NodeFieldNumber = 1;
    private bool hasNode;
    private global::Akka.Cluster.Proto.Msg.UniqueAddress node_;
    public bool HasNode {
      get { return hasNode; }
    }
    public global::Akka.Cluster.Proto.Msg.UniqueAddress Node {
      get { return node_ ?? global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance; }
    }
    
    public const int RolesFieldNumber = 2;
    private pbc::PopsicleList<string> roles_ = new pbc::PopsicleList<string>();
    public scg::IList<string> RolesList {
      get { return pbc::Lists.AsReadOnly(roles_); }
    }
    public int RolesCount {
      get { return roles_.Count; }
    }
    public string GetRoles(int index) {
      return roles_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNode) return false;
        if (!Node.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinFieldNames;
      if (hasNode) {
        output.WriteMessage(1, field_names[0], Node);
      }
      if (roles_.Count > 0) {
        output.WriteStringArray(2, field_names[1], roles_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNode) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
        }
        {
          int dataSize = 0;
          foreach (string element in RolesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * roles_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Join ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Join ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Join ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Join ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Join ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Join ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Join ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Join ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Join ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Join ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Join MakeReadOnly() {
      roles_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Join prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Join, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Join cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Join result;
      
      private Join PrepareBuilder() {
        if (resultIsReadOnly) {
          Join original = result;
          result = new Join();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Join MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.Join.Descriptor; }
      }
      
      public override Join DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.Join.DefaultInstance; }
      }
      
      public override Join BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Join) {
          return MergeFrom((Join) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Join other) {
        if (other == global::Akka.Cluster.Proto.Msg.Join.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNode) {
          MergeNode(other.Node);
        }
        if (other.roles_.Count != 0) {
          result.roles_.Add(other.roles_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder subBuilder = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder();
              if (result.hasNode) {
                subBuilder.MergeFrom(Node);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Node = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.roles_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNode {
       get { return result.hasNode; }
      }
      public global::Akka.Cluster.Proto.Msg.UniqueAddress Node {
        get { return result.Node; }
        set { SetNode(value); }
      }
      public Builder SetNode(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNode = true;
        result.node_ = value;
        return this;
      }
      public Builder SetNode(global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNode = true;
        result.node_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNode(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNode &&
            result.node_ != global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance) {
            result.node_ = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
        } else {
          result.node_ = value;
        }
        result.hasNode = true;
        return this;
      }
      public Builder ClearNode() {
        PrepareBuilder();
        result.hasNode = false;
        result.node_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<string> RolesList {
        get { return PrepareBuilder().roles_; }
      }
      public int RolesCount {
        get { return result.RolesCount; }
      }
      public string GetRoles(int index) {
        return result.GetRoles(index);
      }
      public Builder SetRoles(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.roles_[index] = value;
        return this;
      }
      public Builder AddRoles(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.roles_.Add(value);
        return this;
      }
      public Builder AddRangeRoles(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.roles_.Add(values);
        return this;
      }
      public Builder ClearRoles() {
        PrepareBuilder();
        result.roles_.Clear();
        return this;
      }
    }
    static Join() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Welcome : pb::GeneratedMessage<Welcome, Welcome.Builder> {
    private Welcome() { }
    private static readonly Welcome defaultInstance = new Welcome().MakeReadOnly();
    private static readonly string[] _welcomeFieldNames = new string[] { "from", "gossip" };
    private static readonly uint[] _welcomeFieldTags = new uint[] { 10, 18 };
    public static Welcome DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Welcome DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Welcome ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Welcome__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Welcome, Welcome.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Welcome__FieldAccessorTable; }
    }
    
    public const int FromFieldNumber = 1;
    private bool hasFrom;
    private global::Akka.Cluster.Proto.Msg.UniqueAddress from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public global::Akka.Cluster.Proto.Msg.UniqueAddress From {
      get { return from_ ?? global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance; }
    }
    
    public const int GossipFieldNumber = 2;
    private bool hasGossip;
    private global::Akka.Cluster.Proto.Msg.Gossip gossip_;
    public bool HasGossip {
      get { return hasGossip; }
    }
    public global::Akka.Cluster.Proto.Msg.Gossip Gossip {
      get { return gossip_ ?? global::Akka.Cluster.Proto.Msg.Gossip.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFrom) return false;
        if (!hasGossip) return false;
        if (!From.IsInitialized) return false;
        if (!Gossip.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _welcomeFieldNames;
      if (hasFrom) {
        output.WriteMessage(1, field_names[0], From);
      }
      if (hasGossip) {
        output.WriteMessage(2, field_names[1], Gossip);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, From);
        }
        if (hasGossip) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Gossip);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Welcome ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Welcome ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Welcome ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Welcome ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Welcome ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Welcome ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Welcome ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Welcome ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Welcome ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Welcome ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Welcome MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Welcome prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Welcome, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Welcome cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Welcome result;
      
      private Welcome PrepareBuilder() {
        if (resultIsReadOnly) {
          Welcome original = result;
          result = new Welcome();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Welcome MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.Welcome.Descriptor; }
      }
      
      public override Welcome DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.Welcome.DefaultInstance; }
      }
      
      public override Welcome BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Welcome) {
          return MergeFrom((Welcome) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Welcome other) {
        if (other == global::Akka.Cluster.Proto.Msg.Welcome.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrom) {
          MergeFrom(other.From);
        }
        if (other.HasGossip) {
          MergeGossip(other.Gossip);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_welcomeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _welcomeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder subBuilder = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder();
              if (result.hasFrom) {
                subBuilder.MergeFrom(From);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              From = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Akka.Cluster.Proto.Msg.Gossip.Builder subBuilder = global::Akka.Cluster.Proto.Msg.Gossip.CreateBuilder();
              if (result.hasGossip) {
                subBuilder.MergeFrom(Gossip);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gossip = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrom {
       get { return result.hasFrom; }
      }
      public global::Akka.Cluster.Proto.Msg.UniqueAddress From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrom &&
            result.from_ != global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance) {
            result.from_ = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder(result.from_).MergeFrom(value).BuildPartial();
        } else {
          result.from_ = value;
        }
        result.hasFrom = true;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = null;
        return this;
      }
      
      public bool HasGossip {
       get { return result.hasGossip; }
      }
      public global::Akka.Cluster.Proto.Msg.Gossip Gossip {
        get { return result.Gossip; }
        set { SetGossip(value); }
      }
      public Builder SetGossip(global::Akka.Cluster.Proto.Msg.Gossip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGossip = true;
        result.gossip_ = value;
        return this;
      }
      public Builder SetGossip(global::Akka.Cluster.Proto.Msg.Gossip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGossip = true;
        result.gossip_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGossip(global::Akka.Cluster.Proto.Msg.Gossip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGossip &&
            result.gossip_ != global::Akka.Cluster.Proto.Msg.Gossip.DefaultInstance) {
            result.gossip_ = global::Akka.Cluster.Proto.Msg.Gossip.CreateBuilder(result.gossip_).MergeFrom(value).BuildPartial();
        } else {
          result.gossip_ = value;
        }
        result.hasGossip = true;
        return this;
      }
      public Builder ClearGossip() {
        PrepareBuilder();
        result.hasGossip = false;
        result.gossip_ = null;
        return this;
      }
    }
    static Welcome() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class GossipEnvelope : pb::GeneratedMessage<GossipEnvelope, GossipEnvelope.Builder> {
    private GossipEnvelope() { }
    private static readonly GossipEnvelope defaultInstance = new GossipEnvelope().MakeReadOnly();
    private static readonly string[] _gossipEnvelopeFieldNames = new string[] { "from", "serializedGossip", "to" };
    private static readonly uint[] _gossipEnvelopeFieldTags = new uint[] { 10, 26, 18 };
    public static GossipEnvelope DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GossipEnvelope DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GossipEnvelope ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_GossipEnvelope__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GossipEnvelope, GossipEnvelope.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_GossipEnvelope__FieldAccessorTable; }
    }
    
    public const int FromFieldNumber = 1;
    private bool hasFrom;
    private global::Akka.Cluster.Proto.Msg.UniqueAddress from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public global::Akka.Cluster.Proto.Msg.UniqueAddress From {
      get { return from_ ?? global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance; }
    }
    
    public const int ToFieldNumber = 2;
    private bool hasTo;
    private global::Akka.Cluster.Proto.Msg.UniqueAddress to_;
    public bool HasTo {
      get { return hasTo; }
    }
    public global::Akka.Cluster.Proto.Msg.UniqueAddress To {
      get { return to_ ?? global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance; }
    }
    
    public const int SerializedGossipFieldNumber = 3;
    private bool hasSerializedGossip;
    private pb::ByteString serializedGossip_ = pb::ByteString.Empty;
    public bool HasSerializedGossip {
      get { return hasSerializedGossip; }
    }
    public pb::ByteString SerializedGossip {
      get { return serializedGossip_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFrom) return false;
        if (!hasTo) return false;
        if (!hasSerializedGossip) return false;
        if (!From.IsInitialized) return false;
        if (!To.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gossipEnvelopeFieldNames;
      if (hasFrom) {
        output.WriteMessage(1, field_names[0], From);
      }
      if (hasTo) {
        output.WriteMessage(2, field_names[2], To);
      }
      if (hasSerializedGossip) {
        output.WriteBytes(3, field_names[1], SerializedGossip);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, From);
        }
        if (hasTo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, To);
        }
        if (hasSerializedGossip) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, SerializedGossip);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GossipEnvelope ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GossipEnvelope ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GossipEnvelope ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GossipEnvelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GossipEnvelope MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GossipEnvelope prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<GossipEnvelope, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GossipEnvelope cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GossipEnvelope result;
      
      private GossipEnvelope PrepareBuilder() {
        if (resultIsReadOnly) {
          GossipEnvelope original = result;
          result = new GossipEnvelope();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GossipEnvelope MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.GossipEnvelope.Descriptor; }
      }
      
      public override GossipEnvelope DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.GossipEnvelope.DefaultInstance; }
      }
      
      public override GossipEnvelope BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GossipEnvelope) {
          return MergeFrom((GossipEnvelope) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GossipEnvelope other) {
        if (other == global::Akka.Cluster.Proto.Msg.GossipEnvelope.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrom) {
          MergeFrom(other.From);
        }
        if (other.HasTo) {
          MergeTo(other.To);
        }
        if (other.HasSerializedGossip) {
          SerializedGossip = other.SerializedGossip;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gossipEnvelopeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gossipEnvelopeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder subBuilder = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder();
              if (result.hasFrom) {
                subBuilder.MergeFrom(From);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              From = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder subBuilder = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder();
              if (result.hasTo) {
                subBuilder.MergeFrom(To);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              To = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasSerializedGossip = input.ReadBytes(ref result.serializedGossip_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrom {
       get { return result.hasFrom; }
      }
      public global::Akka.Cluster.Proto.Msg.UniqueAddress From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrom &&
            result.from_ != global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance) {
            result.from_ = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder(result.from_).MergeFrom(value).BuildPartial();
        } else {
          result.from_ = value;
        }
        result.hasFrom = true;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = null;
        return this;
      }
      
      public bool HasTo {
       get { return result.hasTo; }
      }
      public global::Akka.Cluster.Proto.Msg.UniqueAddress To {
        get { return result.To; }
        set { SetTo(value); }
      }
      public Builder SetTo(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = value;
        return this;
      }
      public Builder SetTo(global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTo(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTo &&
            result.to_ != global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance) {
            result.to_ = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder(result.to_).MergeFrom(value).BuildPartial();
        } else {
          result.to_ = value;
        }
        result.hasTo = true;
        return this;
      }
      public Builder ClearTo() {
        PrepareBuilder();
        result.hasTo = false;
        result.to_ = null;
        return this;
      }
      
      public bool HasSerializedGossip {
        get { return result.hasSerializedGossip; }
      }
      public pb::ByteString SerializedGossip {
        get { return result.SerializedGossip; }
        set { SetSerializedGossip(value); }
      }
      public Builder SetSerializedGossip(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSerializedGossip = true;
        result.serializedGossip_ = value;
        return this;
      }
      public Builder ClearSerializedGossip() {
        PrepareBuilder();
        result.hasSerializedGossip = false;
        result.serializedGossip_ = pb::ByteString.Empty;
        return this;
      }
    }
    static GossipEnvelope() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class GossipStatus : pb::GeneratedMessage<GossipStatus, GossipStatus.Builder> {
    private GossipStatus() { }
    private static readonly GossipStatus defaultInstance = new GossipStatus().MakeReadOnly();
    private static readonly string[] _gossipStatusFieldNames = new string[] { "allHashes", "from", "version" };
    private static readonly uint[] _gossipStatusFieldTags = new uint[] { 18, 10, 26 };
    public static GossipStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GossipStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GossipStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_GossipStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GossipStatus, GossipStatus.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_GossipStatus__FieldAccessorTable; }
    }
    
    public const int FromFieldNumber = 1;
    private bool hasFrom;
    private global::Akka.Cluster.Proto.Msg.UniqueAddress from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public global::Akka.Cluster.Proto.Msg.UniqueAddress From {
      get { return from_ ?? global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance; }
    }
    
    public const int AllHashesFieldNumber = 2;
    private pbc::PopsicleList<string> allHashes_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllHashesList {
      get { return pbc::Lists.AsReadOnly(allHashes_); }
    }
    public int AllHashesCount {
      get { return allHashes_.Count; }
    }
    public string GetAllHashes(int index) {
      return allHashes_[index];
    }
    
    public const int VersionFieldNumber = 3;
    private bool hasVersion;
    private global::Akka.Cluster.Proto.Msg.VectorClock version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public global::Akka.Cluster.Proto.Msg.VectorClock Version {
      get { return version_ ?? global::Akka.Cluster.Proto.Msg.VectorClock.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFrom) return false;
        if (!hasVersion) return false;
        if (!From.IsInitialized) return false;
        if (!Version.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gossipStatusFieldNames;
      if (hasFrom) {
        output.WriteMessage(1, field_names[1], From);
      }
      if (allHashes_.Count > 0) {
        output.WriteStringArray(2, field_names[0], allHashes_);
      }
      if (hasVersion) {
        output.WriteMessage(3, field_names[2], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, From);
        }
        {
          int dataSize = 0;
          foreach (string element in AllHashesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * allHashes_.Count;
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GossipStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GossipStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GossipStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GossipStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GossipStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GossipStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GossipStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GossipStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GossipStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GossipStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GossipStatus MakeReadOnly() {
      allHashes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GossipStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<GossipStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GossipStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GossipStatus result;
      
      private GossipStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          GossipStatus original = result;
          result = new GossipStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GossipStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.GossipStatus.Descriptor; }
      }
      
      public override GossipStatus DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.GossipStatus.DefaultInstance; }
      }
      
      public override GossipStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GossipStatus) {
          return MergeFrom((GossipStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GossipStatus other) {
        if (other == global::Akka.Cluster.Proto.Msg.GossipStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrom) {
          MergeFrom(other.From);
        }
        if (other.allHashes_.Count != 0) {
          result.allHashes_.Add(other.allHashes_);
        }
        if (other.HasVersion) {
          MergeVersion(other.Version);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gossipStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gossipStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder subBuilder = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder();
              if (result.hasFrom) {
                subBuilder.MergeFrom(From);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              From = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.allHashes_);
              break;
            }
            case 26: {
              global::Akka.Cluster.Proto.Msg.VectorClock.Builder subBuilder = global::Akka.Cluster.Proto.Msg.VectorClock.CreateBuilder();
              if (result.hasVersion) {
                subBuilder.MergeFrom(Version);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Version = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrom {
       get { return result.hasFrom; }
      }
      public global::Akka.Cluster.Proto.Msg.UniqueAddress From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrom(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrom &&
            result.from_ != global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance) {
            result.from_ = global::Akka.Cluster.Proto.Msg.UniqueAddress.CreateBuilder(result.from_).MergeFrom(value).BuildPartial();
        } else {
          result.from_ = value;
        }
        result.hasFrom = true;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<string> AllHashesList {
        get { return PrepareBuilder().allHashes_; }
      }
      public int AllHashesCount {
        get { return result.AllHashesCount; }
      }
      public string GetAllHashes(int index) {
        return result.GetAllHashes(index);
      }
      public Builder SetAllHashes(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allHashes_[index] = value;
        return this;
      }
      public Builder AddAllHashes(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allHashes_.Add(value);
        return this;
      }
      public Builder AddRangeAllHashes(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allHashes_.Add(values);
        return this;
      }
      public Builder ClearAllHashes() {
        PrepareBuilder();
        result.allHashes_.Clear();
        return this;
      }
      
      public bool HasVersion {
       get { return result.hasVersion; }
      }
      public global::Akka.Cluster.Proto.Msg.VectorClock Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(global::Akka.Cluster.Proto.Msg.VectorClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder SetVersion(global::Akka.Cluster.Proto.Msg.VectorClock.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVersion(global::Akka.Cluster.Proto.Msg.VectorClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVersion &&
            result.version_ != global::Akka.Cluster.Proto.Msg.VectorClock.DefaultInstance) {
            result.version_ = global::Akka.Cluster.Proto.Msg.VectorClock.CreateBuilder(result.version_).MergeFrom(value).BuildPartial();
        } else {
          result.version_ = value;
        }
        result.hasVersion = true;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = null;
        return this;
      }
    }
    static GossipStatus() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Gossip : pb::GeneratedMessage<Gossip, Gossip.Builder> {
    private Gossip() { }
    private static readonly Gossip defaultInstance = new Gossip().MakeReadOnly();
    private static readonly string[] _gossipFieldNames = new string[] { "allAddresses", "allHashes", "allRoles", "members", "overview", "version" };
    private static readonly uint[] _gossipFieldTags = new uint[] { 10, 26, 18, 34, 42, 50 };
    public static Gossip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Gossip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Gossip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Gossip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Gossip, Gossip.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Gossip__FieldAccessorTable; }
    }
    
    public const int AllAddressesFieldNumber = 1;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.UniqueAddress> allAddresses_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.UniqueAddress>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.UniqueAddress> AllAddressesList {
      get { return allAddresses_; }
    }
    public int AllAddressesCount {
      get { return allAddresses_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.UniqueAddress GetAllAddresses(int index) {
      return allAddresses_[index];
    }
    
    public const int AllRolesFieldNumber = 2;
    private pbc::PopsicleList<string> allRoles_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllRolesList {
      get { return pbc::Lists.AsReadOnly(allRoles_); }
    }
    public int AllRolesCount {
      get { return allRoles_.Count; }
    }
    public string GetAllRoles(int index) {
      return allRoles_[index];
    }
    
    public const int AllHashesFieldNumber = 3;
    private pbc::PopsicleList<string> allHashes_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllHashesList {
      get { return pbc::Lists.AsReadOnly(allHashes_); }
    }
    public int AllHashesCount {
      get { return allHashes_.Count; }
    }
    public string GetAllHashes(int index) {
      return allHashes_[index];
    }
    
    public const int MembersFieldNumber = 4;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.Member> members_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.Member>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.Member> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.Member GetMembers(int index) {
      return members_[index];
    }
    
    public const int OverviewFieldNumber = 5;
    private bool hasOverview;
    private global::Akka.Cluster.Proto.Msg.GossipOverview overview_;
    public bool HasOverview {
      get { return hasOverview; }
    }
    public global::Akka.Cluster.Proto.Msg.GossipOverview Overview {
      get { return overview_ ?? global::Akka.Cluster.Proto.Msg.GossipOverview.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 6;
    private bool hasVersion;
    private global::Akka.Cluster.Proto.Msg.VectorClock version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public global::Akka.Cluster.Proto.Msg.VectorClock Version {
      get { return version_ ?? global::Akka.Cluster.Proto.Msg.VectorClock.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOverview) return false;
        if (!hasVersion) return false;
        foreach (global::Akka.Cluster.Proto.Msg.UniqueAddress element in AllAddressesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Akka.Cluster.Proto.Msg.Member element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        if (!Overview.IsInitialized) return false;
        if (!Version.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gossipFieldNames;
      if (allAddresses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], allAddresses_);
      }
      if (allRoles_.Count > 0) {
        output.WriteStringArray(2, field_names[2], allRoles_);
      }
      if (allHashes_.Count > 0) {
        output.WriteStringArray(3, field_names[1], allHashes_);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], members_);
      }
      if (hasOverview) {
        output.WriteMessage(5, field_names[4], Overview);
      }
      if (hasVersion) {
        output.WriteMessage(6, field_names[5], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Akka.Cluster.Proto.Msg.UniqueAddress element in AllAddressesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (string element in AllRolesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * allRoles_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in AllHashesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * allHashes_.Count;
        }
        foreach (global::Akka.Cluster.Proto.Msg.Member element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasOverview) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Overview);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Gossip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gossip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gossip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gossip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gossip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gossip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Gossip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Gossip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Gossip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gossip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Gossip MakeReadOnly() {
      allAddresses_.MakeReadOnly();
      allRoles_.MakeReadOnly();
      allHashes_.MakeReadOnly();
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Gossip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Gossip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Gossip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Gossip result;
      
      private Gossip PrepareBuilder() {
        if (resultIsReadOnly) {
          Gossip original = result;
          result = new Gossip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Gossip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.Gossip.Descriptor; }
      }
      
      public override Gossip DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.Gossip.DefaultInstance; }
      }
      
      public override Gossip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Gossip) {
          return MergeFrom((Gossip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Gossip other) {
        if (other == global::Akka.Cluster.Proto.Msg.Gossip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.allAddresses_.Count != 0) {
          result.allAddresses_.Add(other.allAddresses_);
        }
        if (other.allRoles_.Count != 0) {
          result.allRoles_.Add(other.allRoles_);
        }
        if (other.allHashes_.Count != 0) {
          result.allHashes_.Add(other.allHashes_);
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        if (other.HasOverview) {
          MergeOverview(other.Overview);
        }
        if (other.HasVersion) {
          MergeVersion(other.Version);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gossipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gossipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.allAddresses_, global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.allRoles_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.allHashes_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.members_, global::Akka.Cluster.Proto.Msg.Member.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              global::Akka.Cluster.Proto.Msg.GossipOverview.Builder subBuilder = global::Akka.Cluster.Proto.Msg.GossipOverview.CreateBuilder();
              if (result.hasOverview) {
                subBuilder.MergeFrom(Overview);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Overview = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Akka.Cluster.Proto.Msg.VectorClock.Builder subBuilder = global::Akka.Cluster.Proto.Msg.VectorClock.CreateBuilder();
              if (result.hasVersion) {
                subBuilder.MergeFrom(Version);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Version = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.UniqueAddress> AllAddressesList {
        get { return PrepareBuilder().allAddresses_; }
      }
      public int AllAddressesCount {
        get { return result.AllAddressesCount; }
      }
      public global::Akka.Cluster.Proto.Msg.UniqueAddress GetAllAddresses(int index) {
        return result.GetAllAddresses(index);
      }
      public Builder SetAllAddresses(int index, global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allAddresses_[index] = value;
        return this;
      }
      public Builder SetAllAddresses(int index, global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allAddresses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllAddresses(global::Akka.Cluster.Proto.Msg.UniqueAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allAddresses_.Add(value);
        return this;
      }
      public Builder AddAllAddresses(global::Akka.Cluster.Proto.Msg.UniqueAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allAddresses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllAddresses(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.UniqueAddress> values) {
        PrepareBuilder();
        result.allAddresses_.Add(values);
        return this;
      }
      public Builder ClearAllAddresses() {
        PrepareBuilder();
        result.allAddresses_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllRolesList {
        get { return PrepareBuilder().allRoles_; }
      }
      public int AllRolesCount {
        get { return result.AllRolesCount; }
      }
      public string GetAllRoles(int index) {
        return result.GetAllRoles(index);
      }
      public Builder SetAllRoles(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allRoles_[index] = value;
        return this;
      }
      public Builder AddAllRoles(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allRoles_.Add(value);
        return this;
      }
      public Builder AddRangeAllRoles(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allRoles_.Add(values);
        return this;
      }
      public Builder ClearAllRoles() {
        PrepareBuilder();
        result.allRoles_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllHashesList {
        get { return PrepareBuilder().allHashes_; }
      }
      public int AllHashesCount {
        get { return result.AllHashesCount; }
      }
      public string GetAllHashes(int index) {
        return result.GetAllHashes(index);
      }
      public Builder SetAllHashes(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allHashes_[index] = value;
        return this;
      }
      public Builder AddAllHashes(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allHashes_.Add(value);
        return this;
      }
      public Builder AddRangeAllHashes(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allHashes_.Add(values);
        return this;
      }
      public Builder ClearAllHashes() {
        PrepareBuilder();
        result.allHashes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.Member> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::Akka.Cluster.Proto.Msg.Member GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::Akka.Cluster.Proto.Msg.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::Akka.Cluster.Proto.Msg.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::Akka.Cluster.Proto.Msg.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::Akka.Cluster.Proto.Msg.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.Member> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
      
      public bool HasOverview {
       get { return result.hasOverview; }
      }
      public global::Akka.Cluster.Proto.Msg.GossipOverview Overview {
        get { return result.Overview; }
        set { SetOverview(value); }
      }
      public Builder SetOverview(global::Akka.Cluster.Proto.Msg.GossipOverview value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOverview = true;
        result.overview_ = value;
        return this;
      }
      public Builder SetOverview(global::Akka.Cluster.Proto.Msg.GossipOverview.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOverview = true;
        result.overview_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOverview(global::Akka.Cluster.Proto.Msg.GossipOverview value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOverview &&
            result.overview_ != global::Akka.Cluster.Proto.Msg.GossipOverview.DefaultInstance) {
            result.overview_ = global::Akka.Cluster.Proto.Msg.GossipOverview.CreateBuilder(result.overview_).MergeFrom(value).BuildPartial();
        } else {
          result.overview_ = value;
        }
        result.hasOverview = true;
        return this;
      }
      public Builder ClearOverview() {
        PrepareBuilder();
        result.hasOverview = false;
        result.overview_ = null;
        return this;
      }
      
      public bool HasVersion {
       get { return result.hasVersion; }
      }
      public global::Akka.Cluster.Proto.Msg.VectorClock Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(global::Akka.Cluster.Proto.Msg.VectorClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder SetVersion(global::Akka.Cluster.Proto.Msg.VectorClock.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVersion(global::Akka.Cluster.Proto.Msg.VectorClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVersion &&
            result.version_ != global::Akka.Cluster.Proto.Msg.VectorClock.DefaultInstance) {
            result.version_ = global::Akka.Cluster.Proto.Msg.VectorClock.CreateBuilder(result.version_).MergeFrom(value).BuildPartial();
        } else {
          result.version_ = value;
        }
        result.hasVersion = true;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = null;
        return this;
      }
    }
    static Gossip() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class GossipOverview : pb::GeneratedMessage<GossipOverview, GossipOverview.Builder> {
    private GossipOverview() { }
    private static readonly GossipOverview defaultInstance = new GossipOverview().MakeReadOnly();
    private static readonly string[] _gossipOverviewFieldNames = new string[] { "observerReachability", "seen" };
    private static readonly uint[] _gossipOverviewFieldTags = new uint[] { 18, 8 };
    public static GossipOverview DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GossipOverview DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GossipOverview ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_GossipOverview__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GossipOverview, GossipOverview.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_GossipOverview__FieldAccessorTable; }
    }
    
    public const int SeenFieldNumber = 1;
    private pbc::PopsicleList<int> seen_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SeenList {
      get { return pbc::Lists.AsReadOnly(seen_); }
    }
    public int SeenCount {
      get { return seen_.Count; }
    }
    public int GetSeen(int index) {
      return seen_[index];
    }
    
    public const int ObserverReachabilityFieldNumber = 2;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.ObserverReachability> observerReachability_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.ObserverReachability>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.ObserverReachability> ObserverReachabilityList {
      get { return observerReachability_; }
    }
    public int ObserverReachabilityCount {
      get { return observerReachability_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.ObserverReachability GetObserverReachability(int index) {
      return observerReachability_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Akka.Cluster.Proto.Msg.ObserverReachability element in ObserverReachabilityList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gossipOverviewFieldNames;
      if (seen_.Count > 0) {
        output.WriteInt32Array(1, field_names[1], seen_);
      }
      if (observerReachability_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], observerReachability_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in SeenList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * seen_.Count;
        }
        foreach (global::Akka.Cluster.Proto.Msg.ObserverReachability element in ObserverReachabilityList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GossipOverview ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GossipOverview ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GossipOverview ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GossipOverview ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GossipOverview ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GossipOverview ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GossipOverview ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GossipOverview ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GossipOverview ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GossipOverview ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GossipOverview MakeReadOnly() {
      seen_.MakeReadOnly();
      observerReachability_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GossipOverview prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<GossipOverview, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GossipOverview cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GossipOverview result;
      
      private GossipOverview PrepareBuilder() {
        if (resultIsReadOnly) {
          GossipOverview original = result;
          result = new GossipOverview();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GossipOverview MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.GossipOverview.Descriptor; }
      }
      
      public override GossipOverview DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.GossipOverview.DefaultInstance; }
      }
      
      public override GossipOverview BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GossipOverview) {
          return MergeFrom((GossipOverview) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GossipOverview other) {
        if (other == global::Akka.Cluster.Proto.Msg.GossipOverview.DefaultInstance) return this;
        PrepareBuilder();
        if (other.seen_.Count != 0) {
          result.seen_.Add(other.seen_);
        }
        if (other.observerReachability_.Count != 0) {
          result.observerReachability_.Add(other.observerReachability_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gossipOverviewFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gossipOverviewFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.seen_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.observerReachability_, global::Akka.Cluster.Proto.Msg.ObserverReachability.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> SeenList {
        get { return PrepareBuilder().seen_; }
      }
      public int SeenCount {
        get { return result.SeenCount; }
      }
      public int GetSeen(int index) {
        return result.GetSeen(index);
      }
      public Builder SetSeen(int index, int value) {
        PrepareBuilder();
        result.seen_[index] = value;
        return this;
      }
      public Builder AddSeen(int value) {
        PrepareBuilder();
        result.seen_.Add(value);
        return this;
      }
      public Builder AddRangeSeen(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.seen_.Add(values);
        return this;
      }
      public Builder ClearSeen() {
        PrepareBuilder();
        result.seen_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.ObserverReachability> ObserverReachabilityList {
        get { return PrepareBuilder().observerReachability_; }
      }
      public int ObserverReachabilityCount {
        get { return result.ObserverReachabilityCount; }
      }
      public global::Akka.Cluster.Proto.Msg.ObserverReachability GetObserverReachability(int index) {
        return result.GetObserverReachability(index);
      }
      public Builder SetObserverReachability(int index, global::Akka.Cluster.Proto.Msg.ObserverReachability value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.observerReachability_[index] = value;
        return this;
      }
      public Builder SetObserverReachability(int index, global::Akka.Cluster.Proto.Msg.ObserverReachability.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.observerReachability_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddObserverReachability(global::Akka.Cluster.Proto.Msg.ObserverReachability value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.observerReachability_.Add(value);
        return this;
      }
      public Builder AddObserverReachability(global::Akka.Cluster.Proto.Msg.ObserverReachability.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.observerReachability_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeObserverReachability(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.ObserverReachability> values) {
        PrepareBuilder();
        result.observerReachability_.Add(values);
        return this;
      }
      public Builder ClearObserverReachability() {
        PrepareBuilder();
        result.observerReachability_.Clear();
        return this;
      }
    }
    static GossipOverview() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class ObserverReachability : pb::GeneratedMessage<ObserverReachability, ObserverReachability.Builder> {
    private ObserverReachability() { }
    private static readonly ObserverReachability defaultInstance = new ObserverReachability().MakeReadOnly();
    private static readonly string[] _observerReachabilityFieldNames = new string[] { "addressIndex", "subjectReachability", "version" };
    private static readonly uint[] _observerReachabilityFieldTags = new uint[] { 8, 18, 32 };
    public static ObserverReachability DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ObserverReachability DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ObserverReachability ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_ObserverReachability__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ObserverReachability, ObserverReachability.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_ObserverReachability__FieldAccessorTable; }
    }
    
    public const int AddressIndexFieldNumber = 1;
    private bool hasAddressIndex;
    private int addressIndex_;
    public bool HasAddressIndex {
      get { return hasAddressIndex; }
    }
    public int AddressIndex {
      get { return addressIndex_; }
    }
    
    public const int VersionFieldNumber = 4;
    private bool hasVersion;
    private long version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public long Version {
      get { return version_; }
    }
    
    public const int SubjectReachabilityFieldNumber = 2;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.SubjectReachability> subjectReachability_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.SubjectReachability>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.SubjectReachability> SubjectReachabilityList {
      get { return subjectReachability_; }
    }
    public int SubjectReachabilityCount {
      get { return subjectReachability_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.SubjectReachability GetSubjectReachability(int index) {
      return subjectReachability_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddressIndex) return false;
        if (!hasVersion) return false;
        foreach (global::Akka.Cluster.Proto.Msg.SubjectReachability element in SubjectReachabilityList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _observerReachabilityFieldNames;
      if (hasAddressIndex) {
        output.WriteInt32(1, field_names[0], AddressIndex);
      }
      if (subjectReachability_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], subjectReachability_);
      }
      if (hasVersion) {
        output.WriteInt64(4, field_names[2], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddressIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, AddressIndex);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, Version);
        }
        foreach (global::Akka.Cluster.Proto.Msg.SubjectReachability element in SubjectReachabilityList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ObserverReachability ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ObserverReachability ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ObserverReachability ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ObserverReachability ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ObserverReachability ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ObserverReachability ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ObserverReachability ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ObserverReachability ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ObserverReachability ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ObserverReachability ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ObserverReachability MakeReadOnly() {
      subjectReachability_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ObserverReachability prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<ObserverReachability, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ObserverReachability cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ObserverReachability result;
      
      private ObserverReachability PrepareBuilder() {
        if (resultIsReadOnly) {
          ObserverReachability original = result;
          result = new ObserverReachability();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ObserverReachability MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.ObserverReachability.Descriptor; }
      }
      
      public override ObserverReachability DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.ObserverReachability.DefaultInstance; }
      }
      
      public override ObserverReachability BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ObserverReachability) {
          return MergeFrom((ObserverReachability) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ObserverReachability other) {
        if (other == global::Akka.Cluster.Proto.Msg.ObserverReachability.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddressIndex) {
          AddressIndex = other.AddressIndex;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.subjectReachability_.Count != 0) {
          result.subjectReachability_.Add(other.subjectReachability_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_observerReachabilityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _observerReachabilityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddressIndex = input.ReadInt32(ref result.addressIndex_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.subjectReachability_, global::Akka.Cluster.Proto.Msg.SubjectReachability.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasVersion = input.ReadInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddressIndex {
        get { return result.hasAddressIndex; }
      }
      public int AddressIndex {
        get { return result.AddressIndex; }
        set { SetAddressIndex(value); }
      }
      public Builder SetAddressIndex(int value) {
        PrepareBuilder();
        result.hasAddressIndex = true;
        result.addressIndex_ = value;
        return this;
      }
      public Builder ClearAddressIndex() {
        PrepareBuilder();
        result.hasAddressIndex = false;
        result.addressIndex_ = 0;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public long Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(long value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.SubjectReachability> SubjectReachabilityList {
        get { return PrepareBuilder().subjectReachability_; }
      }
      public int SubjectReachabilityCount {
        get { return result.SubjectReachabilityCount; }
      }
      public global::Akka.Cluster.Proto.Msg.SubjectReachability GetSubjectReachability(int index) {
        return result.GetSubjectReachability(index);
      }
      public Builder SetSubjectReachability(int index, global::Akka.Cluster.Proto.Msg.SubjectReachability value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subjectReachability_[index] = value;
        return this;
      }
      public Builder SetSubjectReachability(int index, global::Akka.Cluster.Proto.Msg.SubjectReachability.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subjectReachability_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSubjectReachability(global::Akka.Cluster.Proto.Msg.SubjectReachability value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subjectReachability_.Add(value);
        return this;
      }
      public Builder AddSubjectReachability(global::Akka.Cluster.Proto.Msg.SubjectReachability.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subjectReachability_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSubjectReachability(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.SubjectReachability> values) {
        PrepareBuilder();
        result.subjectReachability_.Add(values);
        return this;
      }
      public Builder ClearSubjectReachability() {
        PrepareBuilder();
        result.subjectReachability_.Clear();
        return this;
      }
    }
    static ObserverReachability() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class SubjectReachability : pb::GeneratedMessage<SubjectReachability, SubjectReachability.Builder> {
    private SubjectReachability() { }
    private static readonly SubjectReachability defaultInstance = new SubjectReachability().MakeReadOnly();
    private static readonly string[] _subjectReachabilityFieldNames = new string[] { "addressIndex", "status", "version" };
    private static readonly uint[] _subjectReachabilityFieldTags = new uint[] { 8, 24, 32 };
    public static SubjectReachability DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubjectReachability DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubjectReachability ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_SubjectReachability__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubjectReachability, SubjectReachability.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_SubjectReachability__FieldAccessorTable; }
    }
    
    public const int AddressIndexFieldNumber = 1;
    private bool hasAddressIndex;
    private int addressIndex_;
    public bool HasAddressIndex {
      get { return hasAddressIndex; }
    }
    public int AddressIndex {
      get { return addressIndex_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private global::Akka.Cluster.Proto.Msg.ReachabilityStatus status_ = global::Akka.Cluster.Proto.Msg.ReachabilityStatus.Reachable;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::Akka.Cluster.Proto.Msg.ReachabilityStatus Status {
      get { return status_; }
    }
    
    public const int VersionFieldNumber = 4;
    private bool hasVersion;
    private long version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public long Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddressIndex) return false;
        if (!hasStatus) return false;
        if (!hasVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _subjectReachabilityFieldNames;
      if (hasAddressIndex) {
        output.WriteInt32(1, field_names[0], AddressIndex);
      }
      if (hasStatus) {
        output.WriteEnum(3, field_names[1], (int) Status, Status);
      }
      if (hasVersion) {
        output.WriteInt64(4, field_names[2], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddressIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, AddressIndex);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Status);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubjectReachability ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubjectReachability ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubjectReachability ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubjectReachability ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubjectReachability ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubjectReachability ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubjectReachability ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubjectReachability ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubjectReachability ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubjectReachability ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubjectReachability MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubjectReachability prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<SubjectReachability, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubjectReachability cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubjectReachability result;
      
      private SubjectReachability PrepareBuilder() {
        if (resultIsReadOnly) {
          SubjectReachability original = result;
          result = new SubjectReachability();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubjectReachability MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.SubjectReachability.Descriptor; }
      }
      
      public override SubjectReachability DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.SubjectReachability.DefaultInstance; }
      }
      
      public override SubjectReachability BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubjectReachability) {
          return MergeFrom((SubjectReachability) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubjectReachability other) {
        if (other == global::Akka.Cluster.Proto.Msg.SubjectReachability.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddressIndex) {
          AddressIndex = other.AddressIndex;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_subjectReachabilityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _subjectReachabilityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddressIndex = input.ReadInt32(ref result.addressIndex_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasVersion = input.ReadInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddressIndex {
        get { return result.hasAddressIndex; }
      }
      public int AddressIndex {
        get { return result.AddressIndex; }
        set { SetAddressIndex(value); }
      }
      public Builder SetAddressIndex(int value) {
        PrepareBuilder();
        result.hasAddressIndex = true;
        result.addressIndex_ = value;
        return this;
      }
      public Builder ClearAddressIndex() {
        PrepareBuilder();
        result.hasAddressIndex = false;
        result.addressIndex_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::Akka.Cluster.Proto.Msg.ReachabilityStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::Akka.Cluster.Proto.Msg.ReachabilityStatus value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::Akka.Cluster.Proto.Msg.ReachabilityStatus.Reachable;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public long Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(long value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0L;
        return this;
      }
    }
    static SubjectReachability() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder> {
    private Member() { }
    private static readonly Member defaultInstance = new Member().MakeReadOnly();
    private static readonly string[] _memberFieldNames = new string[] { "addressIndex", "rolesIndexes", "status", "upNumber" };
    private static readonly uint[] _memberFieldTags = new uint[] { 8, 34, 24, 16 };
    public static Member DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Member DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Member ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Member__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Member__FieldAccessorTable; }
    }
    
    public const int AddressIndexFieldNumber = 1;
    private bool hasAddressIndex;
    private int addressIndex_;
    public bool HasAddressIndex {
      get { return hasAddressIndex; }
    }
    public int AddressIndex {
      get { return addressIndex_; }
    }
    
    public const int UpNumberFieldNumber = 2;
    private bool hasUpNumber;
    private int upNumber_;
    public bool HasUpNumber {
      get { return hasUpNumber; }
    }
    public int UpNumber {
      get { return upNumber_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private global::Akka.Cluster.Proto.Msg.MemberStatus status_ = global::Akka.Cluster.Proto.Msg.MemberStatus.Joining;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::Akka.Cluster.Proto.Msg.MemberStatus Status {
      get { return status_; }
    }
    
    public const int RolesIndexesFieldNumber = 4;
    private int rolesIndexesMemoizedSerializedSize;
    private pbc::PopsicleList<int> rolesIndexes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RolesIndexesList {
      get { return pbc::Lists.AsReadOnly(rolesIndexes_); }
    }
    public int RolesIndexesCount {
      get { return rolesIndexes_.Count; }
    }
    public int GetRolesIndexes(int index) {
      return rolesIndexes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddressIndex) return false;
        if (!hasUpNumber) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberFieldNames;
      if (hasAddressIndex) {
        output.WriteInt32(1, field_names[0], AddressIndex);
      }
      if (hasUpNumber) {
        output.WriteInt32(2, field_names[3], UpNumber);
      }
      if (hasStatus) {
        output.WriteEnum(3, field_names[2], (int) Status, Status);
      }
      if (rolesIndexes_.Count > 0) {
        output.WritePackedInt32Array(4, field_names[1], rolesIndexesMemoizedSerializedSize, rolesIndexes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddressIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, AddressIndex);
        }
        if (hasUpNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, UpNumber);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Status);
        }
        {
          int dataSize = 0;
          foreach (int element in RolesIndexesList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (rolesIndexes_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          rolesIndexesMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Member ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Member MakeReadOnly() {
      rolesIndexes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Member prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Member, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Member cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Member result;
      
      private Member PrepareBuilder() {
        if (resultIsReadOnly) {
          Member original = result;
          result = new Member();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Member MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.Member.Descriptor; }
      }
      
      public override Member DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.Member.DefaultInstance; }
      }
      
      public override Member BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Member) {
          return MergeFrom((Member) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Member other) {
        if (other == global::Akka.Cluster.Proto.Msg.Member.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddressIndex) {
          AddressIndex = other.AddressIndex;
        }
        if (other.HasUpNumber) {
          UpNumber = other.UpNumber;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.rolesIndexes_.Count != 0) {
          result.rolesIndexes_.Add(other.rolesIndexes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddressIndex = input.ReadInt32(ref result.addressIndex_);
              break;
            }
            case 16: {
              result.hasUpNumber = input.ReadInt32(ref result.upNumber_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.rolesIndexes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddressIndex {
        get { return result.hasAddressIndex; }
      }
      public int AddressIndex {
        get { return result.AddressIndex; }
        set { SetAddressIndex(value); }
      }
      public Builder SetAddressIndex(int value) {
        PrepareBuilder();
        result.hasAddressIndex = true;
        result.addressIndex_ = value;
        return this;
      }
      public Builder ClearAddressIndex() {
        PrepareBuilder();
        result.hasAddressIndex = false;
        result.addressIndex_ = 0;
        return this;
      }
      
      public bool HasUpNumber {
        get { return result.hasUpNumber; }
      }
      public int UpNumber {
        get { return result.UpNumber; }
        set { SetUpNumber(value); }
      }
      public Builder SetUpNumber(int value) {
        PrepareBuilder();
        result.hasUpNumber = true;
        result.upNumber_ = value;
        return this;
      }
      public Builder ClearUpNumber() {
        PrepareBuilder();
        result.hasUpNumber = false;
        result.upNumber_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::Akka.Cluster.Proto.Msg.MemberStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::Akka.Cluster.Proto.Msg.MemberStatus value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::Akka.Cluster.Proto.Msg.MemberStatus.Joining;
        return this;
      }
      
      public pbc::IPopsicleList<int> RolesIndexesList {
        get { return PrepareBuilder().rolesIndexes_; }
      }
      public int RolesIndexesCount {
        get { return result.RolesIndexesCount; }
      }
      public int GetRolesIndexes(int index) {
        return result.GetRolesIndexes(index);
      }
      public Builder SetRolesIndexes(int index, int value) {
        PrepareBuilder();
        result.rolesIndexes_[index] = value;
        return this;
      }
      public Builder AddRolesIndexes(int value) {
        PrepareBuilder();
        result.rolesIndexes_.Add(value);
        return this;
      }
      public Builder AddRangeRolesIndexes(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.rolesIndexes_.Add(values);
        return this;
      }
      public Builder ClearRolesIndexes() {
        PrepareBuilder();
        result.rolesIndexes_.Clear();
        return this;
      }
    }
    static Member() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class VectorClock : pb::GeneratedMessage<VectorClock, VectorClock.Builder> {
    private VectorClock() { }
    private static readonly VectorClock defaultInstance = new VectorClock().MakeReadOnly();
    private static readonly string[] _vectorClockFieldNames = new string[] { "timestamp", "versions" };
    private static readonly uint[] _vectorClockFieldTags = new uint[] { 8, 18 };
    public static VectorClock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VectorClock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VectorClock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_VectorClock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VectorClock, VectorClock.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_VectorClock__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class Version : pb::GeneratedMessage<Version, Version.Builder> {
        private Version() { }
        private static readonly Version defaultInstance = new Version().MakeReadOnly();
        private static readonly string[] _versionFieldNames = new string[] { "hashIndex", "timestamp" };
        private static readonly uint[] _versionFieldTags = new uint[] { 8, 16 };
        public static Version DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Version DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Version ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_VectorClock_Version__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Version, Version.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_VectorClock_Version__FieldAccessorTable; }
        }
        
        public const int HashIndexFieldNumber = 1;
        private bool hasHashIndex;
        private int hashIndex_;
        public bool HasHashIndex {
          get { return hasHashIndex; }
        }
        public int HashIndex {
          get { return hashIndex_; }
        }
        
        public const int TimestampFieldNumber = 2;
        private bool hasTimestamp;
        private long timestamp_;
        public bool HasTimestamp {
          get { return hasTimestamp; }
        }
        public long Timestamp {
          get { return timestamp_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasHashIndex) return false;
            if (!hasTimestamp) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _versionFieldNames;
          if (hasHashIndex) {
            output.WriteInt32(1, field_names[0], HashIndex);
          }
          if (hasTimestamp) {
            output.WriteInt64(2, field_names[1], Timestamp);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasHashIndex) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, HashIndex);
            }
            if (hasTimestamp) {
              size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Version ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Version ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Version ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Version ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Version ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Version ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Version ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Version ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Version ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Version ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Version MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Version prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<Version, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Version cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Version result;
          
          private Version PrepareBuilder() {
            if (resultIsReadOnly) {
              Version original = result;
              result = new Version();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Version MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.Descriptor; }
          }
          
          public override Version DefaultInstanceForType {
            get { return global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.DefaultInstance; }
          }
          
          public override Version BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Version) {
              return MergeFrom((Version) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Version other) {
            if (other == global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasHashIndex) {
              HashIndex = other.HashIndex;
            }
            if (other.HasTimestamp) {
              Timestamp = other.Timestamp;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_versionFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _versionFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasHashIndex = input.ReadInt32(ref result.hashIndex_);
                  break;
                }
                case 16: {
                  result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasHashIndex {
            get { return result.hasHashIndex; }
          }
          public int HashIndex {
            get { return result.HashIndex; }
            set { SetHashIndex(value); }
          }
          public Builder SetHashIndex(int value) {
            PrepareBuilder();
            result.hasHashIndex = true;
            result.hashIndex_ = value;
            return this;
          }
          public Builder ClearHashIndex() {
            PrepareBuilder();
            result.hasHashIndex = false;
            result.hashIndex_ = 0;
            return this;
          }
          
          public bool HasTimestamp {
            get { return result.hasTimestamp; }
          }
          public long Timestamp {
            get { return result.Timestamp; }
            set { SetTimestamp(value); }
          }
          public Builder SetTimestamp(long value) {
            PrepareBuilder();
            result.hasTimestamp = true;
            result.timestamp_ = value;
            return this;
          }
          public Builder ClearTimestamp() {
            PrepareBuilder();
            result.hasTimestamp = false;
            result.timestamp_ = 0L;
            return this;
          }
        }
        static Version() {
          object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int VersionsFieldNumber = 2;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version> versions_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version> VersionsList {
      get { return versions_; }
    }
    public int VersionsCount {
      get { return versions_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version GetVersions(int index) {
      return versions_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version element in VersionsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _vectorClockFieldNames;
      if (hasTimestamp) {
        output.WriteInt64(1, field_names[0], Timestamp);
      }
      if (versions_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], versions_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Timestamp);
        }
        foreach (global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version element in VersionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VectorClock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VectorClock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VectorClock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VectorClock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VectorClock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VectorClock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VectorClock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VectorClock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VectorClock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VectorClock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VectorClock MakeReadOnly() {
      versions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VectorClock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<VectorClock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VectorClock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VectorClock result;
      
      private VectorClock PrepareBuilder() {
        if (resultIsReadOnly) {
          VectorClock original = result;
          result = new VectorClock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VectorClock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.VectorClock.Descriptor; }
      }
      
      public override VectorClock DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.VectorClock.DefaultInstance; }
      }
      
      public override VectorClock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VectorClock) {
          return MergeFrom((VectorClock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VectorClock other) {
        if (other == global::Akka.Cluster.Proto.Msg.VectorClock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.versions_.Count != 0) {
          result.versions_.Add(other.versions_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vectorClockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vectorClockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.versions_, global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version> VersionsList {
        get { return PrepareBuilder().versions_; }
      }
      public int VersionsCount {
        get { return result.VersionsCount; }
      }
      public global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version GetVersions(int index) {
        return result.GetVersions(index);
      }
      public Builder SetVersions(int index, global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.versions_[index] = value;
        return this;
      }
      public Builder SetVersions(int index, global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.versions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVersions(global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.versions_.Add(value);
        return this;
      }
      public Builder AddVersions(global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.versions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVersions(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.VectorClock.Types.Version> values) {
        PrepareBuilder();
        result.versions_.Add(values);
        return this;
      }
      public Builder ClearVersions() {
        PrepareBuilder();
        result.versions_.Clear();
        return this;
      }
    }
    static VectorClock() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class MetricsGossipEnvelope : pb::GeneratedMessage<MetricsGossipEnvelope, MetricsGossipEnvelope.Builder> {
    private MetricsGossipEnvelope() { }
    private static readonly MetricsGossipEnvelope defaultInstance = new MetricsGossipEnvelope().MakeReadOnly();
    private static readonly string[] _metricsGossipEnvelopeFieldNames = new string[] { "from", "gossip", "reply" };
    private static readonly uint[] _metricsGossipEnvelopeFieldTags = new uint[] { 10, 18, 24 };
    public static MetricsGossipEnvelope DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricsGossipEnvelope DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricsGossipEnvelope ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_MetricsGossipEnvelope__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricsGossipEnvelope, MetricsGossipEnvelope.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_MetricsGossipEnvelope__FieldAccessorTable; }
    }
    
    public const int FromFieldNumber = 1;
    private bool hasFrom;
    private global::Akka.Cluster.Proto.Msg.Address from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public global::Akka.Cluster.Proto.Msg.Address From {
      get { return from_ ?? global::Akka.Cluster.Proto.Msg.Address.DefaultInstance; }
    }
    
    public const int GossipFieldNumber = 2;
    private bool hasGossip;
    private global::Akka.Cluster.Proto.Msg.MetricsGossip gossip_;
    public bool HasGossip {
      get { return hasGossip; }
    }
    public global::Akka.Cluster.Proto.Msg.MetricsGossip Gossip {
      get { return gossip_ ?? global::Akka.Cluster.Proto.Msg.MetricsGossip.DefaultInstance; }
    }
    
    public const int ReplyFieldNumber = 3;
    private bool hasReply;
    private bool reply_;
    public bool HasReply {
      get { return hasReply; }
    }
    public bool Reply {
      get { return reply_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFrom) return false;
        if (!hasGossip) return false;
        if (!hasReply) return false;
        if (!From.IsInitialized) return false;
        if (!Gossip.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metricsGossipEnvelopeFieldNames;
      if (hasFrom) {
        output.WriteMessage(1, field_names[0], From);
      }
      if (hasGossip) {
        output.WriteMessage(2, field_names[1], Gossip);
      }
      if (hasReply) {
        output.WriteBool(3, field_names[2], Reply);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, From);
        }
        if (hasGossip) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Gossip);
        }
        if (hasReply) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Reply);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MetricsGossipEnvelope ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricsGossipEnvelope MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricsGossipEnvelope prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<MetricsGossipEnvelope, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricsGossipEnvelope cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricsGossipEnvelope result;
      
      private MetricsGossipEnvelope PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricsGossipEnvelope original = result;
          result = new MetricsGossipEnvelope();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricsGossipEnvelope MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope.Descriptor; }
      }
      
      public override MetricsGossipEnvelope DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope.DefaultInstance; }
      }
      
      public override MetricsGossipEnvelope BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricsGossipEnvelope) {
          return MergeFrom((MetricsGossipEnvelope) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricsGossipEnvelope other) {
        if (other == global::Akka.Cluster.Proto.Msg.MetricsGossipEnvelope.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrom) {
          MergeFrom(other.From);
        }
        if (other.HasGossip) {
          MergeGossip(other.Gossip);
        }
        if (other.HasReply) {
          Reply = other.Reply;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricsGossipEnvelopeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricsGossipEnvelopeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Proto.Msg.Address.Builder subBuilder = global::Akka.Cluster.Proto.Msg.Address.CreateBuilder();
              if (result.hasFrom) {
                subBuilder.MergeFrom(From);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              From = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Akka.Cluster.Proto.Msg.MetricsGossip.Builder subBuilder = global::Akka.Cluster.Proto.Msg.MetricsGossip.CreateBuilder();
              if (result.hasGossip) {
                subBuilder.MergeFrom(Gossip);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gossip = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasReply = input.ReadBool(ref result.reply_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrom {
       get { return result.hasFrom; }
      }
      public global::Akka.Cluster.Proto.Msg.Address From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder SetFrom(global::Akka.Cluster.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrom(global::Akka.Cluster.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrom &&
            result.from_ != global::Akka.Cluster.Proto.Msg.Address.DefaultInstance) {
            result.from_ = global::Akka.Cluster.Proto.Msg.Address.CreateBuilder(result.from_).MergeFrom(value).BuildPartial();
        } else {
          result.from_ = value;
        }
        result.hasFrom = true;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = null;
        return this;
      }
      
      public bool HasGossip {
       get { return result.hasGossip; }
      }
      public global::Akka.Cluster.Proto.Msg.MetricsGossip Gossip {
        get { return result.Gossip; }
        set { SetGossip(value); }
      }
      public Builder SetGossip(global::Akka.Cluster.Proto.Msg.MetricsGossip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGossip = true;
        result.gossip_ = value;
        return this;
      }
      public Builder SetGossip(global::Akka.Cluster.Proto.Msg.MetricsGossip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGossip = true;
        result.gossip_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGossip(global::Akka.Cluster.Proto.Msg.MetricsGossip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGossip &&
            result.gossip_ != global::Akka.Cluster.Proto.Msg.MetricsGossip.DefaultInstance) {
            result.gossip_ = global::Akka.Cluster.Proto.Msg.MetricsGossip.CreateBuilder(result.gossip_).MergeFrom(value).BuildPartial();
        } else {
          result.gossip_ = value;
        }
        result.hasGossip = true;
        return this;
      }
      public Builder ClearGossip() {
        PrepareBuilder();
        result.hasGossip = false;
        result.gossip_ = null;
        return this;
      }
      
      public bool HasReply {
        get { return result.hasReply; }
      }
      public bool Reply {
        get { return result.Reply; }
        set { SetReply(value); }
      }
      public Builder SetReply(bool value) {
        PrepareBuilder();
        result.hasReply = true;
        result.reply_ = value;
        return this;
      }
      public Builder ClearReply() {
        PrepareBuilder();
        result.hasReply = false;
        result.reply_ = false;
        return this;
      }
    }
    static MetricsGossipEnvelope() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class MetricsGossip : pb::GeneratedMessage<MetricsGossip, MetricsGossip.Builder> {
    private MetricsGossip() { }
    private static readonly MetricsGossip defaultInstance = new MetricsGossip().MakeReadOnly();
    private static readonly string[] _metricsGossipFieldNames = new string[] { "allAddresses", "allMetricNames", "nodeMetrics" };
    private static readonly uint[] _metricsGossipFieldTags = new uint[] { 10, 18, 26 };
    public static MetricsGossip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricsGossip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricsGossip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_MetricsGossip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricsGossip, MetricsGossip.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_MetricsGossip__FieldAccessorTable; }
    }
    
    public const int AllAddressesFieldNumber = 1;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.Address> allAddresses_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.Address>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.Address> AllAddressesList {
      get { return allAddresses_; }
    }
    public int AllAddressesCount {
      get { return allAddresses_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.Address GetAllAddresses(int index) {
      return allAddresses_[index];
    }
    
    public const int AllMetricNamesFieldNumber = 2;
    private pbc::PopsicleList<string> allMetricNames_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllMetricNamesList {
      get { return pbc::Lists.AsReadOnly(allMetricNames_); }
    }
    public int AllMetricNamesCount {
      get { return allMetricNames_.Count; }
    }
    public string GetAllMetricNames(int index) {
      return allMetricNames_[index];
    }
    
    public const int NodeMetricsFieldNumber = 3;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.NodeMetrics> nodeMetrics_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.NodeMetrics>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.NodeMetrics> NodeMetricsList {
      get { return nodeMetrics_; }
    }
    public int NodeMetricsCount {
      get { return nodeMetrics_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.NodeMetrics GetNodeMetrics(int index) {
      return nodeMetrics_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Akka.Cluster.Proto.Msg.Address element in AllAddressesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Akka.Cluster.Proto.Msg.NodeMetrics element in NodeMetricsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metricsGossipFieldNames;
      if (allAddresses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], allAddresses_);
      }
      if (allMetricNames_.Count > 0) {
        output.WriteStringArray(2, field_names[1], allMetricNames_);
      }
      if (nodeMetrics_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], nodeMetrics_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Akka.Cluster.Proto.Msg.Address element in AllAddressesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (string element in AllMetricNamesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * allMetricNames_.Count;
        }
        foreach (global::Akka.Cluster.Proto.Msg.NodeMetrics element in NodeMetricsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MetricsGossip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricsGossip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricsGossip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricsGossip MakeReadOnly() {
      allAddresses_.MakeReadOnly();
      allMetricNames_.MakeReadOnly();
      nodeMetrics_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricsGossip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<MetricsGossip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricsGossip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricsGossip result;
      
      private MetricsGossip PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricsGossip original = result;
          result = new MetricsGossip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricsGossip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.MetricsGossip.Descriptor; }
      }
      
      public override MetricsGossip DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.MetricsGossip.DefaultInstance; }
      }
      
      public override MetricsGossip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricsGossip) {
          return MergeFrom((MetricsGossip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricsGossip other) {
        if (other == global::Akka.Cluster.Proto.Msg.MetricsGossip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.allAddresses_.Count != 0) {
          result.allAddresses_.Add(other.allAddresses_);
        }
        if (other.allMetricNames_.Count != 0) {
          result.allMetricNames_.Add(other.allMetricNames_);
        }
        if (other.nodeMetrics_.Count != 0) {
          result.nodeMetrics_.Add(other.nodeMetrics_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricsGossipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricsGossipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.allAddresses_, global::Akka.Cluster.Proto.Msg.Address.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.allMetricNames_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.nodeMetrics_, global::Akka.Cluster.Proto.Msg.NodeMetrics.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.Address> AllAddressesList {
        get { return PrepareBuilder().allAddresses_; }
      }
      public int AllAddressesCount {
        get { return result.AllAddressesCount; }
      }
      public global::Akka.Cluster.Proto.Msg.Address GetAllAddresses(int index) {
        return result.GetAllAddresses(index);
      }
      public Builder SetAllAddresses(int index, global::Akka.Cluster.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allAddresses_[index] = value;
        return this;
      }
      public Builder SetAllAddresses(int index, global::Akka.Cluster.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allAddresses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllAddresses(global::Akka.Cluster.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allAddresses_.Add(value);
        return this;
      }
      public Builder AddAllAddresses(global::Akka.Cluster.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allAddresses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllAddresses(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.Address> values) {
        PrepareBuilder();
        result.allAddresses_.Add(values);
        return this;
      }
      public Builder ClearAllAddresses() {
        PrepareBuilder();
        result.allAddresses_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllMetricNamesList {
        get { return PrepareBuilder().allMetricNames_; }
      }
      public int AllMetricNamesCount {
        get { return result.AllMetricNamesCount; }
      }
      public string GetAllMetricNames(int index) {
        return result.GetAllMetricNames(index);
      }
      public Builder SetAllMetricNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allMetricNames_[index] = value;
        return this;
      }
      public Builder AddAllMetricNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allMetricNames_.Add(value);
        return this;
      }
      public Builder AddRangeAllMetricNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allMetricNames_.Add(values);
        return this;
      }
      public Builder ClearAllMetricNames() {
        PrepareBuilder();
        result.allMetricNames_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.NodeMetrics> NodeMetricsList {
        get { return PrepareBuilder().nodeMetrics_; }
      }
      public int NodeMetricsCount {
        get { return result.NodeMetricsCount; }
      }
      public global::Akka.Cluster.Proto.Msg.NodeMetrics GetNodeMetrics(int index) {
        return result.GetNodeMetrics(index);
      }
      public Builder SetNodeMetrics(int index, global::Akka.Cluster.Proto.Msg.NodeMetrics value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodeMetrics_[index] = value;
        return this;
      }
      public Builder SetNodeMetrics(int index, global::Akka.Cluster.Proto.Msg.NodeMetrics.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodeMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNodeMetrics(global::Akka.Cluster.Proto.Msg.NodeMetrics value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodeMetrics_.Add(value);
        return this;
      }
      public Builder AddNodeMetrics(global::Akka.Cluster.Proto.Msg.NodeMetrics.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodeMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNodeMetrics(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.NodeMetrics> values) {
        PrepareBuilder();
        result.nodeMetrics_.Add(values);
        return this;
      }
      public Builder ClearNodeMetrics() {
        PrepareBuilder();
        result.nodeMetrics_.Clear();
        return this;
      }
    }
    static MetricsGossip() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class NodeMetrics : pb::GeneratedMessage<NodeMetrics, NodeMetrics.Builder> {
    private NodeMetrics() { }
    private static readonly NodeMetrics defaultInstance = new NodeMetrics().MakeReadOnly();
    private static readonly string[] _nodeMetricsFieldNames = new string[] { "addressIndex", "metrics", "timestamp" };
    private static readonly uint[] _nodeMetricsFieldTags = new uint[] { 8, 26, 16 };
    public static NodeMetrics DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NodeMetrics DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NodeMetrics ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NodeMetrics, NodeMetrics.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      internal enum NumberType {
        Serialized = 0,
        Double = 1,
        Float = 2,
        Integer = 3,
        Long = 4,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class Number : pb::GeneratedMessage<Number, Number.Builder> {
        private Number() { }
        private static readonly Number defaultInstance = new Number().MakeReadOnly();
        private static readonly string[] _numberFieldNames = new string[] { "serialized", "type", "value32", "value64" };
        private static readonly uint[] _numberFieldTags = new uint[] { 34, 8, 16, 24 };
        public static Number DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Number DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Number ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics_Number__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Number, Number.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics_Number__FieldAccessorTable; }
        }
        
        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.NumberType type_ = global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.NumberType.Serialized;
        public bool HasType {
          get { return hasType; }
        }
        public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.NumberType Type {
          get { return type_; }
        }
        
        public const int Value32FieldNumber = 2;
        private bool hasValue32;
        private uint value32_;
        public bool HasValue32 {
          get { return hasValue32; }
        }
        [global::System.CLSCompliant(false)]
        public uint Value32 {
          get { return value32_; }
        }
        
        public const int Value64FieldNumber = 3;
        private bool hasValue64;
        private ulong value64_;
        public bool HasValue64 {
          get { return hasValue64; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Value64 {
          get { return value64_; }
        }
        
        public const int SerializedFieldNumber = 4;
        private bool hasSerialized;
        private pb::ByteString serialized_ = pb::ByteString.Empty;
        public bool HasSerialized {
          get { return hasSerialized; }
        }
        public pb::ByteString Serialized {
          get { return serialized_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasType) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _numberFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[1], (int) Type, Type);
          }
          if (hasValue32) {
            output.WriteUInt32(2, field_names[2], Value32);
          }
          if (hasValue64) {
            output.WriteUInt64(3, field_names[3], Value64);
          }
          if (hasSerialized) {
            output.WriteBytes(4, field_names[0], Serialized);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            if (hasValue32) {
              size += pb::CodedOutputStream.ComputeUInt32Size(2, Value32);
            }
            if (hasValue64) {
              size += pb::CodedOutputStream.ComputeUInt64Size(3, Value64);
            }
            if (hasSerialized) {
              size += pb::CodedOutputStream.ComputeBytesSize(4, Serialized);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Number ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Number ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Number ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Number ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Number ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Number ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Number ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Number ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Number ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Number ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Number MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Number prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<Number, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Number cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Number result;
          
          private Number PrepareBuilder() {
            if (resultIsReadOnly) {
              Number original = result;
              result = new Number();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Number MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.Descriptor; }
          }
          
          public override Number DefaultInstanceForType {
            get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance; }
          }
          
          public override Number BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Number) {
              return MergeFrom((Number) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Number other) {
            if (other == global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasValue32) {
              Value32 = other.Value32;
            }
            if (other.HasValue64) {
              Value64 = other.Value64;
            }
            if (other.HasSerialized) {
              Serialized = other.Serialized;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_numberFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _numberFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  result.hasValue32 = input.ReadUInt32(ref result.value32_);
                  break;
                }
                case 24: {
                  result.hasValue64 = input.ReadUInt64(ref result.value64_);
                  break;
                }
                case 34: {
                  result.hasSerialized = input.ReadBytes(ref result.serialized_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasType {
           get { return result.hasType; }
          }
          public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.NumberType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.NumberType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.NumberType.Serialized;
            return this;
          }
          
          public bool HasValue32 {
            get { return result.hasValue32; }
          }
          [global::System.CLSCompliant(false)]
          public uint Value32 {
            get { return result.Value32; }
            set { SetValue32(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetValue32(uint value) {
            PrepareBuilder();
            result.hasValue32 = true;
            result.value32_ = value;
            return this;
          }
          public Builder ClearValue32() {
            PrepareBuilder();
            result.hasValue32 = false;
            result.value32_ = 0;
            return this;
          }
          
          public bool HasValue64 {
            get { return result.hasValue64; }
          }
          [global::System.CLSCompliant(false)]
          public ulong Value64 {
            get { return result.Value64; }
            set { SetValue64(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetValue64(ulong value) {
            PrepareBuilder();
            result.hasValue64 = true;
            result.value64_ = value;
            return this;
          }
          public Builder ClearValue64() {
            PrepareBuilder();
            result.hasValue64 = false;
            result.value64_ = 0UL;
            return this;
          }
          
          public bool HasSerialized {
            get { return result.hasSerialized; }
          }
          public pb::ByteString Serialized {
            get { return result.Serialized; }
            set { SetSerialized(value); }
          }
          public Builder SetSerialized(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSerialized = true;
            result.serialized_ = value;
            return this;
          }
          public Builder ClearSerialized() {
            PrepareBuilder();
            result.hasSerialized = false;
            result.serialized_ = pb::ByteString.Empty;
            return this;
          }
        }
        static Number() {
          object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class EWMA : pb::GeneratedMessage<EWMA, EWMA.Builder> {
        private EWMA() { }
        private static readonly EWMA defaultInstance = new EWMA().MakeReadOnly();
        private static readonly string[] _eWMAFieldNames = new string[] { "alpha", "value" };
        private static readonly uint[] _eWMAFieldTags = new uint[] { 17, 9 };
        public static EWMA DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override EWMA DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override EWMA ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics_EWMA__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<EWMA, EWMA.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics_EWMA__FieldAccessorTable; }
        }
        
        public const int ValueFieldNumber = 1;
        private bool hasValue;
        private double value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public double Value {
          get { return value_; }
        }
        
        public const int AlphaFieldNumber = 2;
        private bool hasAlpha;
        private double alpha_;
        public bool HasAlpha {
          get { return hasAlpha; }
        }
        public double Alpha {
          get { return alpha_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasValue) return false;
            if (!hasAlpha) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _eWMAFieldNames;
          if (hasValue) {
            output.WriteDouble(1, field_names[1], Value);
          }
          if (hasAlpha) {
            output.WriteDouble(2, field_names[0], Alpha);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeDoubleSize(1, Value);
            }
            if (hasAlpha) {
              size += pb::CodedOutputStream.ComputeDoubleSize(2, Alpha);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static EWMA ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EWMA ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EWMA ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EWMA ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EWMA ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EWMA ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EWMA ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EWMA ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EWMA ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EWMA ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EWMA MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EWMA prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<EWMA, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EWMA cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private EWMA result;
          
          private EWMA PrepareBuilder() {
            if (resultIsReadOnly) {
              EWMA original = result;
              result = new EWMA();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override EWMA MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.Descriptor; }
          }
          
          public override EWMA DefaultInstanceForType {
            get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance; }
          }
          
          public override EWMA BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is EWMA) {
              return MergeFrom((EWMA) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(EWMA other) {
            if (other == global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasValue) {
              Value = other.Value;
            }
            if (other.HasAlpha) {
              Alpha = other.Alpha;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_eWMAFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _eWMAFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 9: {
                  result.hasValue = input.ReadDouble(ref result.value_);
                  break;
                }
                case 17: {
                  result.hasAlpha = input.ReadDouble(ref result.alpha_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public double Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(double value) {
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = 0D;
            return this;
          }
          
          public bool HasAlpha {
            get { return result.hasAlpha; }
          }
          public double Alpha {
            get { return result.Alpha; }
            set { SetAlpha(value); }
          }
          public Builder SetAlpha(double value) {
            PrepareBuilder();
            result.hasAlpha = true;
            result.alpha_ = value;
            return this;
          }
          public Builder ClearAlpha() {
            PrepareBuilder();
            result.hasAlpha = false;
            result.alpha_ = 0D;
            return this;
          }
        }
        static EWMA() {
          object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class Metric : pb::GeneratedMessage<Metric, Metric.Builder> {
        private Metric() { }
        private static readonly Metric defaultInstance = new Metric().MakeReadOnly();
        private static readonly string[] _metricFieldNames = new string[] { "ewma", "nameIndex", "number" };
        private static readonly uint[] _metricFieldTags = new uint[] { 26, 8, 18 };
        public static Metric DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Metric DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Metric ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics_Metric__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Metric, Metric.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_NodeMetrics_Metric__FieldAccessorTable; }
        }
        
        public const int NameIndexFieldNumber = 1;
        private bool hasNameIndex;
        private int nameIndex_;
        public bool HasNameIndex {
          get { return hasNameIndex; }
        }
        public int NameIndex {
          get { return nameIndex_; }
        }
        
        public const int NumberFieldNumber = 2;
        private bool hasNumber;
        private global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number number_;
        public bool HasNumber {
          get { return hasNumber; }
        }
        public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number Number {
          get { return number_ ?? global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance; }
        }
        
        public const int EwmaFieldNumber = 3;
        private bool hasEwma;
        private global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA ewma_;
        public bool HasEwma {
          get { return hasEwma; }
        }
        public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA Ewma {
          get { return ewma_ ?? global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasNameIndex) return false;
            if (!hasNumber) return false;
            if (!Number.IsInitialized) return false;
            if (HasEwma) {
              if (!Ewma.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _metricFieldNames;
          if (hasNameIndex) {
            output.WriteInt32(1, field_names[1], NameIndex);
          }
          if (hasNumber) {
            output.WriteMessage(2, field_names[2], Number);
          }
          if (hasEwma) {
            output.WriteMessage(3, field_names[0], Ewma);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasNameIndex) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, NameIndex);
            }
            if (hasNumber) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Number);
            }
            if (hasEwma) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Ewma);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Metric ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Metric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Metric ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Metric MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Metric prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<Metric, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Metric cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Metric result;
          
          private Metric PrepareBuilder() {
            if (resultIsReadOnly) {
              Metric original = result;
              result = new Metric();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Metric MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.Descriptor; }
          }
          
          public override Metric DefaultInstanceForType {
            get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.DefaultInstance; }
          }
          
          public override Metric BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Metric) {
              return MergeFrom((Metric) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Metric other) {
            if (other == global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNameIndex) {
              NameIndex = other.NameIndex;
            }
            if (other.HasNumber) {
              MergeNumber(other.Number);
            }
            if (other.HasEwma) {
              MergeEwma(other.Ewma);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_metricFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _metricFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNameIndex = input.ReadInt32(ref result.nameIndex_);
                  break;
                }
                case 18: {
                  global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.Builder subBuilder = global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.CreateBuilder();
                  if (result.hasNumber) {
                    subBuilder.MergeFrom(Number);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Number = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.Builder subBuilder = global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.CreateBuilder();
                  if (result.hasEwma) {
                    subBuilder.MergeFrom(Ewma);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Ewma = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNameIndex {
            get { return result.hasNameIndex; }
          }
          public int NameIndex {
            get { return result.NameIndex; }
            set { SetNameIndex(value); }
          }
          public Builder SetNameIndex(int value) {
            PrepareBuilder();
            result.hasNameIndex = true;
            result.nameIndex_ = value;
            return this;
          }
          public Builder ClearNameIndex() {
            PrepareBuilder();
            result.hasNameIndex = false;
            result.nameIndex_ = 0;
            return this;
          }
          
          public bool HasNumber {
           get { return result.hasNumber; }
          }
          public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number Number {
            get { return result.Number; }
            set { SetNumber(value); }
          }
          public Builder SetNumber(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasNumber = true;
            result.number_ = value;
            return this;
          }
          public Builder SetNumber(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasNumber = true;
            result.number_ = builderForValue.Build();
            return this;
          }
          public Builder MergeNumber(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasNumber &&
                result.number_ != global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance) {
                result.number_ = global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Number.CreateBuilder(result.number_).MergeFrom(value).BuildPartial();
            } else {
              result.number_ = value;
            }
            result.hasNumber = true;
            return this;
          }
          public Builder ClearNumber() {
            PrepareBuilder();
            result.hasNumber = false;
            result.number_ = null;
            return this;
          }
          
          public bool HasEwma {
           get { return result.hasEwma; }
          }
          public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA Ewma {
            get { return result.Ewma; }
            set { SetEwma(value); }
          }
          public Builder SetEwma(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEwma = true;
            result.ewma_ = value;
            return this;
          }
          public Builder SetEwma(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasEwma = true;
            result.ewma_ = builderForValue.Build();
            return this;
          }
          public Builder MergeEwma(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasEwma &&
                result.ewma_ != global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance) {
                result.ewma_ = global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.EWMA.CreateBuilder(result.ewma_).MergeFrom(value).BuildPartial();
            } else {
              result.ewma_ = value;
            }
            result.hasEwma = true;
            return this;
          }
          public Builder ClearEwma() {
            PrepareBuilder();
            result.hasEwma = false;
            result.ewma_ = null;
            return this;
          }
        }
        static Metric() {
          object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int AddressIndexFieldNumber = 1;
    private bool hasAddressIndex;
    private int addressIndex_;
    public bool HasAddressIndex {
      get { return hasAddressIndex; }
    }
    public int AddressIndex {
      get { return addressIndex_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int MetricsFieldNumber = 3;
    private pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric> metrics_ = new pbc::PopsicleList<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric>();
    public scg::IList<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric> MetricsList {
      get { return metrics_; }
    }
    public int MetricsCount {
      get { return metrics_.Count; }
    }
    public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric GetMetrics(int index) {
      return metrics_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddressIndex) return false;
        if (!hasTimestamp) return false;
        foreach (global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric element in MetricsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nodeMetricsFieldNames;
      if (hasAddressIndex) {
        output.WriteInt32(1, field_names[0], AddressIndex);
      }
      if (hasTimestamp) {
        output.WriteInt64(2, field_names[2], Timestamp);
      }
      if (metrics_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], metrics_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddressIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, AddressIndex);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
        }
        foreach (global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric element in MetricsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NodeMetrics ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NodeMetrics ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NodeMetrics ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NodeMetrics ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NodeMetrics MakeReadOnly() {
      metrics_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NodeMetrics prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<NodeMetrics, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NodeMetrics cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NodeMetrics result;
      
      private NodeMetrics PrepareBuilder() {
        if (resultIsReadOnly) {
          NodeMetrics original = result;
          result = new NodeMetrics();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NodeMetrics MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.Descriptor; }
      }
      
      public override NodeMetrics DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.NodeMetrics.DefaultInstance; }
      }
      
      public override NodeMetrics BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NodeMetrics) {
          return MergeFrom((NodeMetrics) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NodeMetrics other) {
        if (other == global::Akka.Cluster.Proto.Msg.NodeMetrics.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddressIndex) {
          AddressIndex = other.AddressIndex;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.metrics_.Count != 0) {
          result.metrics_.Add(other.metrics_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nodeMetricsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nodeMetricsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddressIndex = input.ReadInt32(ref result.addressIndex_);
              break;
            }
            case 16: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.metrics_, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddressIndex {
        get { return result.hasAddressIndex; }
      }
      public int AddressIndex {
        get { return result.AddressIndex; }
        set { SetAddressIndex(value); }
      }
      public Builder SetAddressIndex(int value) {
        PrepareBuilder();
        result.hasAddressIndex = true;
        result.addressIndex_ = value;
        return this;
      }
      public Builder ClearAddressIndex() {
        PrepareBuilder();
        result.hasAddressIndex = false;
        result.addressIndex_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric> MetricsList {
        get { return PrepareBuilder().metrics_; }
      }
      public int MetricsCount {
        get { return result.MetricsCount; }
      }
      public global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric GetMetrics(int index) {
        return result.GetMetrics(index);
      }
      public Builder SetMetrics(int index, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.metrics_[index] = value;
        return this;
      }
      public Builder SetMetrics(int index, global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.metrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMetrics(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.metrics_.Add(value);
        return this;
      }
      public Builder AddMetrics(global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.metrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMetrics(scg::IEnumerable<global::Akka.Cluster.Proto.Msg.NodeMetrics.Types.Metric> values) {
        PrepareBuilder();
        result.metrics_.Add(values);
        return this;
      }
      public Builder ClearMetrics() {
        PrepareBuilder();
        result.metrics_.Clear();
        return this;
      }
    }
    static NodeMetrics() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Empty : pb::GeneratedMessage<Empty, Empty.Builder> {
    private Empty() { }
    private static readonly Empty defaultInstance = new Empty().MakeReadOnly();
    private static readonly string[] _emptyFieldNames = new string[] {  };
    private static readonly uint[] _emptyFieldTags = new uint[] {  };
    public static Empty DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Empty DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Empty ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Empty__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Empty, Empty.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Empty__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _emptyFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Empty ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Empty ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Empty ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Empty ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Empty ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Empty ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Empty ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Empty ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Empty ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Empty ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Empty MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Empty prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Empty, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Empty cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Empty result;
      
      private Empty PrepareBuilder() {
        if (resultIsReadOnly) {
          Empty original = result;
          result = new Empty();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Empty MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.Empty.Descriptor; }
      }
      
      public override Empty DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.Empty.DefaultInstance; }
      }
      
      public override Empty BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Empty) {
          return MergeFrom((Empty) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Empty other) {
        if (other == global::Akka.Cluster.Proto.Msg.Empty.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_emptyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _emptyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Empty() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Address : pb::GeneratedMessage<Address, Address.Builder> {
    private Address() { }
    private static readonly Address defaultInstance = new Address().MakeReadOnly();
    private static readonly string[] _addressFieldNames = new string[] { "hostname", "port", "protocol", "system" };
    private static readonly uint[] _addressFieldTags = new uint[] { 18, 24, 34, 10 };
    public static Address DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Address DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Address ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Address__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Address, Address.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_Address__FieldAccessorTable; }
    }
    
    public const int SystemFieldNumber = 1;
    private bool hasSystem;
    private string system_ = "";
    public bool HasSystem {
      get { return hasSystem; }
    }
    public string System {
      get { return system_; }
    }
    
    public const int HostnameFieldNumber = 2;
    private bool hasHostname;
    private string hostname_ = "";
    public bool HasHostname {
      get { return hasHostname; }
    }
    public string Hostname {
      get { return hostname_; }
    }
    
    public const int PortFieldNumber = 3;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return port_; }
    }
    
    public const int ProtocolFieldNumber = 4;
    private bool hasProtocol;
    private string protocol_ = "";
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    public string Protocol {
      get { return protocol_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSystem) return false;
        if (!hasHostname) return false;
        if (!hasPort) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _addressFieldNames;
      if (hasSystem) {
        output.WriteString(1, field_names[3], System);
      }
      if (hasHostname) {
        output.WriteString(2, field_names[0], Hostname);
      }
      if (hasPort) {
        output.WriteUInt32(3, field_names[1], Port);
      }
      if (hasProtocol) {
        output.WriteString(4, field_names[2], Protocol);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSystem) {
          size += pb::CodedOutputStream.ComputeStringSize(1, System);
        }
        if (hasHostname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Hostname);
        }
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Port);
        }
        if (hasProtocol) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Protocol);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Address ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Address ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Address ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Address ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Address ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Address ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Address ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Address ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Address ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Address ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Address MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Address prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Address, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Address cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Address result;
      
      private Address PrepareBuilder() {
        if (resultIsReadOnly) {
          Address original = result;
          result = new Address();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Address MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.Address.Descriptor; }
      }
      
      public override Address DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.Address.DefaultInstance; }
      }
      
      public override Address BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Address) {
          return MergeFrom((Address) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Address other) {
        if (other == global::Akka.Cluster.Proto.Msg.Address.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSystem) {
          System = other.System;
        }
        if (other.HasHostname) {
          Hostname = other.Hostname;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSystem = input.ReadString(ref result.system_);
              break;
            }
            case 18: {
              result.hasHostname = input.ReadString(ref result.hostname_);
              break;
            }
            case 24: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
            case 34: {
              result.hasProtocol = input.ReadString(ref result.protocol_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSystem {
        get { return result.hasSystem; }
      }
      public string System {
        get { return result.System; }
        set { SetSystem(value); }
      }
      public Builder SetSystem(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSystem = true;
        result.system_ = value;
        return this;
      }
      public Builder ClearSystem() {
        PrepareBuilder();
        result.hasSystem = false;
        result.system_ = "";
        return this;
      }
      
      public bool HasHostname {
        get { return result.hasHostname; }
      }
      public string Hostname {
        get { return result.Hostname; }
        set { SetHostname(value); }
      }
      public Builder SetHostname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHostname = true;
        result.hostname_ = value;
        return this;
      }
      public Builder ClearHostname() {
        PrepareBuilder();
        result.hasHostname = false;
        result.hostname_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      public string Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      public Builder SetProtocol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = "";
        return this;
      }
    }
    static Address() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class UniqueAddress : pb::GeneratedMessage<UniqueAddress, UniqueAddress.Builder> {
    private UniqueAddress() { }
    private static readonly UniqueAddress defaultInstance = new UniqueAddress().MakeReadOnly();
    private static readonly string[] _uniqueAddressFieldNames = new string[] { "address", "uid", "uid2" };
    private static readonly uint[] _uniqueAddressFieldTags = new uint[] { 10, 16, 24 };
    public static UniqueAddress DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UniqueAddress DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UniqueAddress ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_UniqueAddress__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UniqueAddress, UniqueAddress.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Proto.Msg.ClusterMessages.internal__static_UniqueAddress__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private global::Akka.Cluster.Proto.Msg.Address address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    public global::Akka.Cluster.Proto.Msg.Address Address {
      get { return address_ ?? global::Akka.Cluster.Proto.Msg.Address.DefaultInstance; }
    }
    
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private uint uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Uid {
      get { return uid_; }
    }
    
    public const int Uid2FieldNumber = 3;
    private bool hasUid2;
    private uint uid2_;
    public bool HasUid2 {
      get { return hasUid2; }
    }
    [global::System.CLSCompliant(false)]
    public uint Uid2 {
      get { return uid2_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress) return false;
        if (!hasUid) return false;
        if (!Address.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uniqueAddressFieldNames;
      if (hasAddress) {
        output.WriteMessage(1, field_names[0], Address);
      }
      if (hasUid) {
        output.WriteUInt32(2, field_names[1], Uid);
      }
      if (hasUid2) {
        output.WriteUInt32(3, field_names[2], Uid2);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Address);
        }
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Uid);
        }
        if (hasUid2) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Uid2);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UniqueAddress ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UniqueAddress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UniqueAddress ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UniqueAddress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UniqueAddress ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UniqueAddress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UniqueAddress ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UniqueAddress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UniqueAddress ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UniqueAddress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UniqueAddress MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UniqueAddress prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<UniqueAddress, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UniqueAddress cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UniqueAddress result;
      
      private UniqueAddress PrepareBuilder() {
        if (resultIsReadOnly) {
          UniqueAddress original = result;
          result = new UniqueAddress();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UniqueAddress MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Proto.Msg.UniqueAddress.Descriptor; }
      }
      
      public override UniqueAddress DefaultInstanceForType {
        get { return global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance; }
      }
      
      public override UniqueAddress BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UniqueAddress) {
          return MergeFrom((UniqueAddress) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UniqueAddress other) {
        if (other == global::Akka.Cluster.Proto.Msg.UniqueAddress.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          MergeAddress(other.Address);
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasUid2) {
          Uid2 = other.Uid2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uniqueAddressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uniqueAddressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Proto.Msg.Address.Builder subBuilder = global::Akka.Cluster.Proto.Msg.Address.CreateBuilder();
              if (result.hasAddress) {
                subBuilder.MergeFrom(Address);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Address = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasUid = input.ReadUInt32(ref result.uid_);
              break;
            }
            case 24: {
              result.hasUid2 = input.ReadUInt32(ref result.uid2_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
       get { return result.hasAddress; }
      }
      public global::Akka.Cluster.Proto.Msg.Address Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(global::Akka.Cluster.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder SetAddress(global::Akka.Cluster.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAddress(global::Akka.Cluster.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAddress &&
            result.address_ != global::Akka.Cluster.Proto.Msg.Address.DefaultInstance) {
            result.address_ = global::Akka.Cluster.Proto.Msg.Address.CreateBuilder(result.address_).MergeFrom(value).BuildPartial();
        } else {
          result.address_ = value;
        }
        result.hasAddress = true;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = null;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      [global::System.CLSCompliant(false)]
      public uint Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUid(uint value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0;
        return this;
      }
      
      public bool HasUid2 {
        get { return result.hasUid2; }
      }
      [global::System.CLSCompliant(false)]
      public uint Uid2 {
        get { return result.Uid2; }
        set { SetUid2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUid2(uint value) {
        PrepareBuilder();
        result.hasUid2 = true;
        result.uid2_ = value;
        return this;
      }
      public Builder ClearUid2() {
        PrepareBuilder();
        result.hasUid2 = false;
        result.uid2_ = 0;
        return this;
      }
    }
    static UniqueAddress() {
      object.ReferenceEquals(global::Akka.Cluster.Proto.Msg.ClusterMessages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
