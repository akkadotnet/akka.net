// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContainerFormats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Remote.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from ContainerFormats.proto</summary>
  internal static partial class ContainerFormatsReflection {

    #region Descriptor
    /// <summary>File descriptor for ContainerFormats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContainerFormatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZDb250YWluZXJGb3JtYXRzLnByb3RvEiNBa2thLlJlbW90ZS5TZXJpYWxp",
            "emF0aW9uLlByb3RvLk1zZyKTAQoRU2VsZWN0aW9uRW52ZWxvcGUSPQoHcGF5",
            "bG9hZBgBIAEoCzIsLkFra2EuUmVtb3RlLlNlcmlhbGl6YXRpb24uUHJvdG8u",
            "TXNnLlBheWxvYWQSPwoHcGF0dGVybhgCIAMoCzIuLkFra2EuUmVtb3RlLlNl",
            "cmlhbGl6YXRpb24uUHJvdG8uTXNnLlNlbGVjdGlvbiKzAQoJU2VsZWN0aW9u",
            "EkgKBHR5cGUYASABKA4yOi5Ba2thLlJlbW90ZS5TZXJpYWxpemF0aW9uLlBy",
            "b3RvLk1zZy5TZWxlY3Rpb24uUGF0dGVyblR5cGUSDwoHbWF0Y2hlchgCIAEo",
            "CSJLCgtQYXR0ZXJuVHlwZRINCglOT19QQVRFUk4QABIKCgZQQVJFTlQQARIO",
            "CgpDSElMRF9OQU1FEAISEQoNQ0hJTERfUEFUVEVSThADIhwKDEFjdG9yUmVm",
            "RGF0YRIMCgRwYXRoGAEgASgJIk8KC0FkZHJlc3NEYXRhEg4KBnN5c3RlbRgB",
            "IAEoCRIQCghob3N0bmFtZRgCIAEoCRIMCgRwb3J0GAMgASgNEhAKCHByb3Rv",
            "Y29sGAQgASgJIkkKB1BheWxvYWQSDwoHbWVzc2FnZRgBIAEoDBIUCgxzZXJp",
            "YWxpemVySWQYAiABKAUSFwoPbWVzc2FnZU1hbmlmZXN0GAMgASgMIksKCElk",
            "ZW50aWZ5Ej8KCW1lc3NhZ2VJZBgBIAEoCzIsLkFra2EuUmVtb3RlLlNlcmlh",
            "bGl6YXRpb24uUHJvdG8uTXNnLlBheWxvYWQiYgoNQWN0b3JJZGVudGl0eRJD",
            "Cg1jb3JyZWxhdGlvbklkGAEgASgLMiwuQWtrYS5SZW1vdGUuU2VyaWFsaXph",
            "dGlvbi5Qcm90by5Nc2cuUGF5bG9hZBIMCgRwYXRoGAIgASgJIi0KHlJlbW90",
            "ZVdhdGNoZXJIZWFydGJlYXRSZXNwb25zZRILCgN1aWQYASABKAQi4QIKDUV4",
            "Y2VwdGlvbkRhdGESEAoIdHlwZU5hbWUYASABKAkSDwoHbWVzc2FnZRgCIAEo",
            "CRISCgpzdGFja1RyYWNlGAMgASgJEg4KBnNvdXJjZRgEIAEoCRJKCg5pbm5l",
            "ckV4Y2VwdGlvbhgFIAEoCzIyLkFra2EuUmVtb3RlLlNlcmlhbGl6YXRpb24u",
            "UHJvdG8uTXNnLkV4Y2VwdGlvbkRhdGESWgoMY3VzdG9tRmllbGRzGAYgAygL",
            "MkQuQWtrYS5SZW1vdGUuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuRXhjZXB0",
            "aW9uRGF0YS5DdXN0b21GaWVsZHNFbnRyeRphChFDdXN0b21GaWVsZHNFbnRy",
            "eRILCgNrZXkYASABKAkSOwoFdmFsdWUYAiABKAsyLC5Ba2thLlJlbW90ZS5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLk1zZy5QYXlsb2FkOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.SelectionEnvelope), global::Akka.Remote.Serialization.Proto.Msg.SelectionEnvelope.Parser, new[]{ "Payload", "Pattern" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Selection), global::Akka.Remote.Serialization.Proto.Msg.Selection.Parser, new[]{ "Type", "Matcher" }, null, new[]{ typeof(global::Akka.Remote.Serialization.Proto.Msg.Selection.Types.PatternType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ActorRefData), global::Akka.Remote.Serialization.Proto.Msg.ActorRefData.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.AddressData), global::Akka.Remote.Serialization.Proto.Msg.AddressData.Parser, new[]{ "System", "Hostname", "Port", "Protocol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Payload), global::Akka.Remote.Serialization.Proto.Msg.Payload.Parser, new[]{ "Message", "SerializerId", "MessageManifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.Identify), global::Akka.Remote.Serialization.Proto.Msg.Identify.Parser, new[]{ "MessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ActorIdentity), global::Akka.Remote.Serialization.Proto.Msg.ActorIdentity.Parser, new[]{ "CorrelationId", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.RemoteWatcherHeartbeatResponse), global::Akka.Remote.Serialization.Proto.Msg.RemoteWatcherHeartbeatResponse.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Remote.Serialization.Proto.Msg.ExceptionData), global::Akka.Remote.Serialization.Proto.Msg.ExceptionData.Parser, new[]{ "TypeName", "Message", "StackTrace", "Source", "InnerException", "CustomFields" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class SelectionEnvelope : pb::IMessage<SelectionEnvelope> {
    private static readonly pb::MessageParser<SelectionEnvelope> _parser = new pb::MessageParser<SelectionEnvelope>(() => new SelectionEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectionEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectionEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectionEnvelope(SelectionEnvelope other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      pattern_ = other.pattern_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectionEnvelope Clone() {
      return new SelectionEnvelope(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.Remote.Serialization.Proto.Msg.Selection> _repeated_pattern_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.Remote.Serialization.Proto.Msg.Selection.Parser);
    private readonly pbc::RepeatedField<global::Akka.Remote.Serialization.Proto.Msg.Selection> pattern_ = new pbc::RepeatedField<global::Akka.Remote.Serialization.Proto.Msg.Selection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Remote.Serialization.Proto.Msg.Selection> Pattern {
      get { return pattern_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectionEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectionEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if(!pattern_.Equals(other.pattern_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      hash ^= pattern_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      pattern_.WriteTo(output, _repeated_pattern_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      size += pattern_.CalculateSize(_repeated_pattern_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectionEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
      pattern_.Add(other.pattern_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 18: {
            pattern_.AddEntriesFrom(input, _repeated_pattern_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Selection : pb::IMessage<Selection> {
    private static readonly pb::MessageParser<Selection> _parser = new pb::MessageParser<Selection>(() => new Selection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Selection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selection(Selection other) : this() {
      type_ = other.type_;
      matcher_ = other.matcher_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selection Clone() {
      return new Selection(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Selection.Types.PatternType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Selection.Types.PatternType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "matcher" field.</summary>
    public const int MatcherFieldNumber = 2;
    private string matcher_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Matcher {
      get { return matcher_; }
      set {
        matcher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Selection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Selection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Matcher != other.Matcher) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Matcher.Length != 0) hash ^= Matcher.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Matcher.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Matcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Matcher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Matcher);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Selection other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Matcher.Length != 0) {
        Matcher = other.Matcher;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Akka.Remote.Serialization.Proto.Msg.Selection.Types.PatternType) input.ReadEnum();
            break;
          }
          case 18: {
            Matcher = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Selection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum PatternType {
        [pbr::OriginalName("NO_PATERN")] NoPatern = 0,
        [pbr::OriginalName("PARENT")] Parent = 1,
        [pbr::OriginalName("CHILD_NAME")] ChildName = 2,
        [pbr::OriginalName("CHILD_PATTERN")] ChildPattern = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Defines a remote ActorRef that "remembers" and uses its original Actor instance on the original node.
  /// </summary>
  internal sealed partial class ActorRefData : pb::IMessage<ActorRefData> {
    private static readonly pb::MessageParser<ActorRefData> _parser = new pb::MessageParser<ActorRefData>(() => new ActorRefData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorRefData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefData(ActorRefData other) : this() {
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRefData Clone() {
      return new ActorRefData(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorRefData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorRefData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorRefData other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a remote address.
  /// </summary>
  internal sealed partial class AddressData : pb::IMessage<AddressData> {
    private static readonly pb::MessageParser<AddressData> _parser = new pb::MessageParser<AddressData>(() => new AddressData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressData(AddressData other) : this() {
      system_ = other.system_;
      hostname_ = other.hostname_;
      port_ = other.port_;
      protocol_ = other.protocol_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressData Clone() {
      return new AddressData(this);
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 1;
    private string system_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string System {
      get { return system_; }
      set {
        system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 2;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 4;
    private string protocol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (System != other.System) return false;
      if (Hostname != other.Hostname) return false;
      if (Port != other.Port) return false;
      if (Protocol != other.Protocol) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (System.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(System);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Hostname);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressData other) {
      if (other == null) {
        return;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Protocol.Length != 0) {
        Protocol = other.Protocol;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            System = input.ReadString();
            break;
          }
          case 18: {
            Hostname = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 34: {
            Protocol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a payload.
  /// </summary>
  internal sealed partial class Payload : pb::IMessage<Payload> {
    private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload(Payload other) : this() {
      message_ = other.message_;
      serializerId_ = other.serializerId_;
      messageManifest_ = other.messageManifest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload Clone() {
      return new Payload(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 2;
    private int serializerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "messageManifest" field.</summary>
    public const int MessageManifestFieldNumber = 3;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageManifest {
      get { return messageManifest_; }
      set {
        messageManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (SerializerId != other.SerializerId) return false;
      if (MessageManifest != other.MessageManifest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (MessageManifest.Length != 0) hash ^= MessageManifest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
      if (SerializerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageManifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageManifest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.MessageManifest.Length != 0) {
        MessageManifest = other.MessageManifest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
          case 16: {
            SerializerId = input.ReadInt32();
            break;
          }
          case 26: {
            MessageManifest = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Identify : pb::IMessage<Identify> {
    private static readonly pb::MessageParser<Identify> _parser = new pb::MessageParser<Identify>(() => new Identify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Identify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify(Identify other) : this() {
      MessageId = other.messageId_ != null ? other.MessageId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify Clone() {
      return new Identify(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Identify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Identify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MessageId, other.MessageId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageId_ != null) hash ^= MessageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MessageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Identify other) {
      if (other == null) {
        return;
      }
      if (other.messageId_ != null) {
        if (messageId_ == null) {
          messageId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        MessageId.MergeFrom(other.MessageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (messageId_ == null) {
              messageId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(messageId_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ActorIdentity : pb::IMessage<ActorIdentity> {
    private static readonly pb::MessageParser<ActorIdentity> _parser = new pb::MessageParser<ActorIdentity>(() => new ActorIdentity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorIdentity(ActorIdentity other) : this() {
      CorrelationId = other.correlationId_ != null ? other.CorrelationId.Clone() : null;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorIdentity Clone() {
      return new ActorIdentity(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private global::Akka.Remote.Serialization.Proto.Msg.Payload correlationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.Payload CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CorrelationId, other.CorrelationId)) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (correlationId_ != null) hash ^= CorrelationId.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (correlationId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CorrelationId);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (correlationId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CorrelationId);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorIdentity other) {
      if (other == null) {
        return;
      }
      if (other.correlationId_ != null) {
        if (correlationId_ == null) {
          correlationId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
        }
        CorrelationId.MergeFrom(other.CorrelationId);
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (correlationId_ == null) {
              correlationId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(correlationId_);
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoteWatcherHeartbeatResponse : pb::IMessage<RemoteWatcherHeartbeatResponse> {
    private static readonly pb::MessageParser<RemoteWatcherHeartbeatResponse> _parser = new pb::MessageParser<RemoteWatcherHeartbeatResponse>(() => new RemoteWatcherHeartbeatResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteWatcherHeartbeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteWatcherHeartbeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteWatcherHeartbeatResponse(RemoteWatcherHeartbeatResponse other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteWatcherHeartbeatResponse Clone() {
      return new RemoteWatcherHeartbeatResponse(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteWatcherHeartbeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteWatcherHeartbeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteWatcherHeartbeatResponse other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ExceptionData : pb::IMessage<ExceptionData> {
    private static readonly pb::MessageParser<ExceptionData> _parser = new pb::MessageParser<ExceptionData>(() => new ExceptionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExceptionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExceptionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExceptionData(ExceptionData other) : this() {
      typeName_ = other.typeName_;
      message_ = other.message_;
      stackTrace_ = other.stackTrace_;
      source_ = other.source_;
      InnerException = other.innerException_ != null ? other.InnerException.Clone() : null;
      customFields_ = other.customFields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExceptionData Clone() {
      return new ExceptionData(this);
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stackTrace" field.</summary>
    public const int StackTraceFieldNumber = 3;
    private string stackTrace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "innerException" field.</summary>
    public const int InnerExceptionFieldNumber = 5;
    private global::Akka.Remote.Serialization.Proto.Msg.ExceptionData innerException_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Remote.Serialization.Proto.Msg.ExceptionData InnerException {
      get { return innerException_; }
      set {
        innerException_ = value;
      }
    }

    /// <summary>Field number for the "customFields" field.</summary>
    public const int CustomFieldsFieldNumber = 6;
    private static readonly pbc::MapField<string, global::Akka.Remote.Serialization.Proto.Msg.Payload>.Codec _map_customFields_codec
        = new pbc::MapField<string, global::Akka.Remote.Serialization.Proto.Msg.Payload>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Akka.Remote.Serialization.Proto.Msg.Payload.Parser), 50);
    private readonly pbc::MapField<string, global::Akka.Remote.Serialization.Proto.Msg.Payload> customFields_ = new pbc::MapField<string, global::Akka.Remote.Serialization.Proto.Msg.Payload>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Akka.Remote.Serialization.Proto.Msg.Payload> CustomFields {
      get { return customFields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExceptionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExceptionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      if (Message != other.Message) return false;
      if (StackTrace != other.StackTrace) return false;
      if (Source != other.Source) return false;
      if (!object.Equals(InnerException, other.InnerException)) return false;
      if (!CustomFields.Equals(other.CustomFields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (innerException_ != null) hash ^= InnerException.GetHashCode();
      hash ^= CustomFields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (StackTrace.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StackTrace);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (innerException_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(InnerException);
      }
      customFields_.WriteTo(output, _map_customFields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (innerException_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InnerException);
      }
      size += customFields_.CalculateSize(_map_customFields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExceptionData other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.innerException_ != null) {
        if (innerException_ == null) {
          innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();
        }
        InnerException.MergeFrom(other.InnerException);
      }
      customFields_.Add(other.customFields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            StackTrace = input.ReadString();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
          case 42: {
            if (innerException_ == null) {
              innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();
            }
            input.ReadMessage(innerException_);
            break;
          }
          case 50: {
            customFields_.AddEntriesFrom(input, _map_customFields_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
