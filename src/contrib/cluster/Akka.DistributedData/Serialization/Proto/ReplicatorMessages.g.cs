// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReplicatorMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.DistributedData.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from ReplicatorMessages.proto</summary>
  internal static partial class ReplicatorMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for ReplicatorMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReplicatorMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhSZXBsaWNhdG9yTWVzc2FnZXMucHJvdG8SLEFra2EuRGlzdHJpYnV0ZWRE",
            "YXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnIp0CCgNHZXQSRwoDa2V5GAEg",
            "ASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90",
            "by5Nc2cuT3RoZXJNZXNzYWdlEhMKC2NvbnNpc3RlbmN5GAIgASgREg8KB3Rp",
            "bWVvdXQYAyABKA0SSwoHcmVxdWVzdBgEIAEoCzI6LkFra2EuRGlzdHJpYnV0",
            "ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZRIZ",
            "ChFjb25zaXN0ZW5jeU1pbkNhcBgFIAEoBRIgChhoYXNDb25zaXN0ZW5jeUFk",
            "ZGl0aW9uYWwYBiABKAgSHQoVY29uc2lzdGVuY3lBZGRpdGlvbmFsGAcgASgF",
            "IuwBCgpHZXRTdWNjZXNzEkcKA2tleRgBIAEoCzI6LkFra2EuRGlzdHJpYnV0",
            "ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZRJI",
            "CgRkYXRhGAIgASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXph",
            "dGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdlEksKB3JlcXVlc3QYBCABKAsy",
            "Oi5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1z",
            "Zy5PdGhlck1lc3NhZ2UioAEKCE5vdEZvdW5kEkcKA2tleRgBIAEoCzI6LkFr",
            "a2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk90",
            "aGVyTWVzc2FnZRJLCgdyZXF1ZXN0GAIgASgLMjouQWtrYS5EaXN0cmlidXRl",
            "ZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdlIqIB",
            "CgpHZXRGYWlsdXJlEkcKA2tleRgBIAEoCzI6LkFra2EuRGlzdHJpYnV0ZWRE",
            "YXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZRJLCgdy",
            "ZXF1ZXN0GAIgASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXph",
            "dGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdlImEKCVN1YnNjcmliZRJHCgNr",
            "ZXkYASABKAsyOi5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9u",
            "LlByb3RvLk1zZy5PdGhlck1lc3NhZ2USCwoDcmVmGAIgASgJImMKC1Vuc3Vi",
            "c2NyaWJlEkcKA2tleRgBIAEoCzI6LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNl",
            "cmlhbGl6YXRpb24uUHJvdG8uTXNnLk90aGVyTWVzc2FnZRILCgNyZWYYAiAB",
            "KAkinAEKB0NoYW5nZWQSRwoDa2V5GAEgASgLMjouQWtrYS5EaXN0cmlidXRl",
            "ZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNzYWdlEkgK",
            "BGRhdGEYAiABKAsyOi5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0",
            "aW9uLlByb3RvLk1zZy5PdGhlck1lc3NhZ2UisQEKBVdyaXRlEgsKA2tleRgB",
            "IAEoCRJMCghlbnZlbG9wZRgCIAEoCzI6LkFra2EuRGlzdHJpYnV0ZWREYXRh",
            "LlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkRhdGFFbnZlbG9wZRJNCghmcm9t",
            "Tm9kZRgDIAEoCzI7LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRp",
            "b24uUHJvdG8uTXNnLlVuaXF1ZUFkZHJlc3MiBwoFRW1wdHkiYgoEUmVhZBIL",
            "CgNrZXkYASABKAkSTQoIZnJvbU5vZGUYAiABKAsyOy5Ba2thLkRpc3RyaWJ1",
            "dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5VbmlxdWVBZGRyZXNz",
            "IloKClJlYWRSZXN1bHQSTAoIZW52ZWxvcGUYASABKAsyOi5Ba2thLkRpc3Ry",
            "aWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5EYXRhRW52ZWxv",
            "cGUirQQKDERhdGFFbnZlbG9wZRJICgRkYXRhGAEgASgLMjouQWtrYS5EaXN0",
            "cmlidXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuT3RoZXJNZXNz",
            "YWdlElgKB3BydW5pbmcYAiADKAsyRy5Ba2thLkRpc3RyaWJ1dGVkRGF0YS5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLk1zZy5EYXRhRW52ZWxvcGUuUHJ1bmluZ0Vu",
            "dHJ5ElIKDWRlbHRhVmVyc2lvbnMYAyABKAsyOy5Ba2thLkRpc3RyaWJ1dGVk",
            "RGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5WZXJzaW9uVmVjdG9yGqQC",
            "CgxQcnVuaW5nRW50cnkSUwoOcmVtb3ZlZEFkZHJlc3MYASABKAsyOy5Ba2th",
            "LkRpc3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5Vbmlx",
            "dWVBZGRyZXNzElEKDG93bmVyQWRkcmVzcxgCIAEoCzI7LkFra2EuRGlzdHJp",
            "YnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLlVuaXF1ZUFkZHJl",
            "c3MSEQoJcGVyZm9ybWVkGAMgASgIEkMKBHNlZW4YBCADKAsyNS5Ba2thLkRp",
            "c3RyaWJ1dGVkRGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5BZGRyZXNz",
            "EhQKDG9ic29sZXRlVGltZRgFIAEoEiL7AQoGU3RhdHVzEg0KBWNodW5rGAEg",
            "ASgNEhEKCXRvdENodW5rcxgCIAEoDRJLCgdlbnRyaWVzGAMgAygLMjouQWtr",
            "YS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuU3Rh",
            "dHVzLkVudHJ5EhMKC3RvU3lzdGVtVWlkGAQgASgQEhUKDWZyb21TeXN0ZW1V",
            "aWQYBSABKBASFgoOaGFzVG9TeXN0ZW1VaWQYBiABKAgSGAoQaGFzRnJvbVN5",
            "c3RlbVVpZBgHIAEoCBokCgVFbnRyeRILCgNrZXkYASABKAkSDgoGZGlnZXN0",
            "GAIgASgMIqkCCgZHb3NzaXASEAoIc2VuZEJhY2sYASABKAgSSwoHZW50cmll",
            "cxgCIAMoCzI6LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24u",
            "UHJvdG8uTXNnLkdvc3NpcC5FbnRyeRITCgt0b1N5c3RlbVVpZBgDIAEoEBIV",
            "Cg1mcm9tU3lzdGVtVWlkGAQgASgQEhYKDmhhc1RvU3lzdGVtVWlkGAUgASgI",
            "EhgKEGhhc0Zyb21TeXN0ZW1VaWQYBiABKAgaYgoFRW50cnkSCwoDa2V5GAEg",
            "ASgJEkwKCGVudmVsb3BlGAIgASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEu",
            "U2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuRGF0YUVudmVsb3BlItACChBEZWx0",
            "YVByb3BhZ2F0aW9uEk0KCGZyb21Ob2RlGAEgASgLMjsuQWtrYS5EaXN0cmli",
            "dXRlZERhdGEuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuVW5pcXVlQWRkcmVz",
            "cxJVCgdlbnRyaWVzGAIgAygLMkQuQWtrYS5EaXN0cmlidXRlZERhdGEuU2Vy",
            "aWFsaXphdGlvbi5Qcm90by5Nc2cuRGVsdGFQcm9wYWdhdGlvbi5FbnRyeRIN",
            "CgVyZXBseRgDIAEoCBqGAQoFRW50cnkSCwoDa2V5GAEgASgJEkwKCGVudmVs",
            "b3BlGAIgASgLMjouQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5Nc2cuRGF0YUVudmVsb3BlEhEKCWZyb21TZXFOchgDIAEoAxIP",
            "Cgd0b1NlcU5yGAQgASgDImQKDVVuaXF1ZUFkZHJlc3MSRgoHYWRkcmVzcxgB",
            "IAEoCzI1LkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6YXRpb24uUHJv",
            "dG8uTXNnLkFkZHJlc3MSCwoDdWlkGAIgASgDIikKB0FkZHJlc3MSEAoIaG9z",
            "dG5hbWUYASABKAkSDAoEcG9ydBgCIAEoBSLIAQoNVmVyc2lvblZlY3RvchJS",
            "CgdlbnRyaWVzGAEgAygLMkEuQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFs",
            "aXphdGlvbi5Qcm90by5Nc2cuVmVyc2lvblZlY3Rvci5FbnRyeRpjCgVFbnRy",
            "eRJJCgRub2RlGAEgASgLMjsuQWtrYS5EaXN0cmlidXRlZERhdGEuU2VyaWFs",
            "aXphdGlvbi5Qcm90by5Nc2cuVW5pcXVlQWRkcmVzcxIPCgd2ZXJzaW9uGAIg",
            "ASgDIlYKDE90aGVyTWVzc2FnZRIXCg9lbmNsb3NlZE1lc3NhZ2UYASABKAwS",
            "FAoMc2VyaWFsaXplcklkGAIgASgFEhcKD21lc3NhZ2VNYW5pZmVzdBgEIAEo",
            "DCIeCgpTdHJpbmdHU2V0EhAKCGVsZW1lbnRzGAEgAygJIrkBChNEdXJhYmxl",
            "RGF0YUVudmVsb3BlEkgKBGRhdGEYASABKAsyOi5Ba2thLkRpc3RyaWJ1dGVk",
            "RGF0YS5TZXJpYWxpemF0aW9uLlByb3RvLk1zZy5PdGhlck1lc3NhZ2USWAoH",
            "cHJ1bmluZxgCIAMoCzJHLkFra2EuRGlzdHJpYnV0ZWREYXRhLlNlcmlhbGl6",
            "YXRpb24uUHJvdG8uTXNnLkRhdGFFbnZlbG9wZS5QcnVuaW5nRW50cnlCAkgB",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Get), global::Akka.DistributedData.Serialization.Proto.Msg.Get.Parser, new[]{ "Key", "Consistency", "Timeout", "Request", "ConsistencyMinCap", "HasConsistencyAdditional", "ConsistencyAdditional" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.GetSuccess), global::Akka.DistributedData.Serialization.Proto.Msg.GetSuccess.Parser, new[]{ "Key", "Data", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.NotFound), global::Akka.DistributedData.Serialization.Proto.Msg.NotFound.Parser, new[]{ "Key", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.GetFailure), global::Akka.DistributedData.Serialization.Proto.Msg.GetFailure.Parser, new[]{ "Key", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Subscribe), global::Akka.DistributedData.Serialization.Proto.Msg.Subscribe.Parser, new[]{ "Key", "Ref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Unsubscribe), global::Akka.DistributedData.Serialization.Proto.Msg.Unsubscribe.Parser, new[]{ "Key", "Ref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Changed), global::Akka.DistributedData.Serialization.Proto.Msg.Changed.Parser, new[]{ "Key", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Write), global::Akka.DistributedData.Serialization.Proto.Msg.Write.Parser, new[]{ "Key", "Envelope", "FromNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Empty), global::Akka.DistributedData.Serialization.Proto.Msg.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Read), global::Akka.DistributedData.Serialization.Proto.Msg.Read.Parser, new[]{ "Key", "FromNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.ReadResult), global::Akka.DistributedData.Serialization.Proto.Msg.ReadResult.Parser, new[]{ "Envelope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope), global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Parser, new[]{ "Data", "Pruning", "DeltaVersions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry), global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry.Parser, new[]{ "RemovedAddress", "OwnerAddress", "Performed", "Seen", "ObsoleteTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Status), global::Akka.DistributedData.Serialization.Proto.Msg.Status.Parser, new[]{ "Chunk", "TotChunks", "Entries", "ToSystemUid", "FromSystemUid", "HasToSystemUid", "HasFromSystemUid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry.Parser, new[]{ "Key", "Digest" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Gossip), global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Parser, new[]{ "SendBack", "Entries", "ToSystemUid", "FromSystemUid", "HasToSystemUid", "HasFromSystemUid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry.Parser, new[]{ "Key", "Envelope" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation), global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Parser, new[]{ "FromNode", "Entries", "Reply" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry.Parser, new[]{ "Key", "Envelope", "FromSeqNr", "ToSeqNr" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress), global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress.Parser, new[]{ "Address", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.Address), global::Akka.DistributedData.Serialization.Proto.Msg.Address.Parser, new[]{ "Hostname", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector), global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Parser, new[]{ "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry), global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry.Parser, new[]{ "Node", "Version" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage), global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage.Parser, new[]{ "EnclosedMessage", "SerializerId", "MessageManifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.StringGSet), global::Akka.DistributedData.Serialization.Proto.Msg.StringGSet.Parser, new[]{ "Elements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.DistributedData.Serialization.Proto.Msg.DurableDataEnvelope), global::Akka.DistributedData.Serialization.Proto.Msg.DurableDataEnvelope.Parser, new[]{ "Data", "Pruning" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class Get : pb::IMessage<Get> {
    private static readonly pb::MessageParser<Get> _parser = new pb::MessageParser<Get>(() => new Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get(Get other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      consistency_ = other.consistency_;
      timeout_ = other.timeout_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      consistencyMinCap_ = other.consistencyMinCap_;
      hasConsistencyAdditional_ = other.hasConsistencyAdditional_;
      consistencyAdditional_ = other.consistencyAdditional_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get Clone() {
      return new Get(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "consistency" field.</summary>
    public const int ConsistencyFieldNumber = 2;
    private int consistency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Consistency {
      get { return consistency_; }
      set {
        consistency_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 3;
    private uint timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "consistencyMinCap" field.</summary>
    public const int ConsistencyMinCapFieldNumber = 5;
    private int consistencyMinCap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsistencyMinCap {
      get { return consistencyMinCap_; }
      set {
        consistencyMinCap_ = value;
      }
    }

    /// <summary>Field number for the "hasConsistencyAdditional" field.</summary>
    public const int HasConsistencyAdditionalFieldNumber = 6;
    private bool hasConsistencyAdditional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsistencyAdditional {
      get { return hasConsistencyAdditional_; }
      set {
        hasConsistencyAdditional_ = value;
      }
    }

    /// <summary>Field number for the "consistencyAdditional" field.</summary>
    public const int ConsistencyAdditionalFieldNumber = 7;
    private int consistencyAdditional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsistencyAdditional {
      get { return consistencyAdditional_; }
      set {
        consistencyAdditional_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (Consistency != other.Consistency) return false;
      if (Timeout != other.Timeout) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (ConsistencyMinCap != other.ConsistencyMinCap) return false;
      if (HasConsistencyAdditional != other.HasConsistencyAdditional) return false;
      if (ConsistencyAdditional != other.ConsistencyAdditional) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (Consistency != 0) hash ^= Consistency.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (ConsistencyMinCap != 0) hash ^= ConsistencyMinCap.GetHashCode();
      if (HasConsistencyAdditional != false) hash ^= HasConsistencyAdditional.GetHashCode();
      if (ConsistencyAdditional != 0) hash ^= ConsistencyAdditional.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (Consistency != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Consistency);
      }
      if (Timeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Timeout);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      if (ConsistencyMinCap != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConsistencyMinCap);
      }
      if (HasConsistencyAdditional != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasConsistencyAdditional);
      }
      if (ConsistencyAdditional != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ConsistencyAdditional);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (Consistency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Consistency);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (ConsistencyMinCap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsistencyMinCap);
      }
      if (HasConsistencyAdditional != false) {
        size += 1 + 1;
      }
      if (ConsistencyAdditional != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsistencyAdditional);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.Consistency != 0) {
        Consistency = other.Consistency;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.ConsistencyMinCap != 0) {
        ConsistencyMinCap = other.ConsistencyMinCap;
      }
      if (other.HasConsistencyAdditional != false) {
        HasConsistencyAdditional = other.HasConsistencyAdditional;
      }
      if (other.ConsistencyAdditional != 0) {
        ConsistencyAdditional = other.ConsistencyAdditional;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 16: {
            Consistency = input.ReadSInt32();
            break;
          }
          case 24: {
            Timeout = input.ReadUInt32();
            break;
          }
          case 34: {
            if (request_ == null) {
              request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(request_);
            break;
          }
          case 40: {
            ConsistencyMinCap = input.ReadInt32();
            break;
          }
          case 48: {
            HasConsistencyAdditional = input.ReadBool();
            break;
          }
          case 56: {
            ConsistencyAdditional = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetSuccess : pb::IMessage<GetSuccess> {
    private static readonly pb::MessageParser<GetSuccess> _parser = new pb::MessageParser<GetSuccess>(() => new GetSuccess());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSuccess(GetSuccess other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Data = other.data_ != null ? other.Data.Clone() : null;
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSuccess Clone() {
      return new GetSuccess(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSuccess other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(data_);
            break;
          }
          case 34: {
            if (request_ == null) {
              request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NotFound : pb::IMessage<NotFound> {
    private static readonly pb::MessageParser<NotFound> _parser = new pb::MessageParser<NotFound>(() => new NotFound());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotFound(NotFound other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotFound Clone() {
      return new NotFound(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (request_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotFound other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (request_ == null) {
              request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetFailure : pb::IMessage<GetFailure> {
    private static readonly pb::MessageParser<GetFailure> _parser = new pb::MessageParser<GetFailure>(() => new GetFailure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFailure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFailure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFailure(GetFailure other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFailure Clone() {
      return new GetFailure(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFailure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFailure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (request_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFailure other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (request_ == null) {
              request_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Subscribe : pb::IMessage<Subscribe> {
    private static readonly pb::MessageParser<Subscribe> _parser = new pb::MessageParser<Subscribe>(() => new Subscribe());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscribe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscribe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscribe(Subscribe other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      ref_ = other.ref_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscribe Clone() {
      return new Subscribe(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "ref" field.</summary>
    public const int RefFieldNumber = 2;
    private string ref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ref {
      get { return ref_; }
      set {
        ref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscribe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscribe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (Ref != other.Ref) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (Ref.Length != 0) hash ^= Ref.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (Ref.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ref);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (Ref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscribe other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.Ref.Length != 0) {
        Ref = other.Ref;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            Ref = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Unsubscribe : pb::IMessage<Unsubscribe> {
    private static readonly pb::MessageParser<Unsubscribe> _parser = new pb::MessageParser<Unsubscribe>(() => new Unsubscribe());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unsubscribe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unsubscribe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unsubscribe(Unsubscribe other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      ref_ = other.ref_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unsubscribe Clone() {
      return new Unsubscribe(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "ref" field.</summary>
    public const int RefFieldNumber = 2;
    private string ref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ref {
      get { return ref_; }
      set {
        ref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unsubscribe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unsubscribe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (Ref != other.Ref) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (Ref.Length != 0) hash ^= Ref.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (Ref.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ref);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (Ref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unsubscribe other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.Ref.Length != 0) {
        Ref = other.Ref;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            Ref = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Changed : pb::IMessage<Changed> {
    private static readonly pb::MessageParser<Changed> _parser = new pb::MessageParser<Changed>(() => new Changed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Changed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Changed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Changed(Changed other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Changed Clone() {
      return new Changed(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Changed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Changed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Changed other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Write : pb::IMessage<Write> {
    private static readonly pb::MessageParser<Write> _parser = new pb::MessageParser<Write>(() => new Write());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Write> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write(Write other) : this() {
      key_ = other.key_;
      Envelope = other.envelope_ != null ? other.Envelope.Clone() : null;
      FromNode = other.fromNode_ != null ? other.FromNode.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write Clone() {
      return new Write(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "envelope" field.</summary>
    public const int EnvelopeFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope envelope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope Envelope {
      get { return envelope_; }
      set {
        envelope_ = value;
      }
    }

    /// <summary>Field number for the "fromNode" field.</summary>
    public const int FromNodeFieldNumber = 3;
    private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress fromNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress FromNode {
      get { return fromNode_; }
      set {
        fromNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Write);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Write other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Envelope, other.Envelope)) return false;
      if (!object.Equals(FromNode, other.FromNode)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (envelope_ != null) hash ^= Envelope.GetHashCode();
      if (fromNode_ != null) hash ^= FromNode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (envelope_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Envelope);
      }
      if (fromNode_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FromNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (envelope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
      }
      if (fromNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromNode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Write other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.envelope_ != null) {
        if (envelope_ == null) {
          envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
        }
        Envelope.MergeFrom(other.Envelope);
      }
      if (other.fromNode_ != null) {
        if (fromNode_ == null) {
          fromNode_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
        }
        FromNode.MergeFrom(other.FromNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (envelope_ == null) {
              envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
            }
            input.ReadMessage(envelope_);
            break;
          }
          case 26: {
            if (fromNode_ == null) {
              fromNode_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(fromNode_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  internal sealed partial class Read : pb::IMessage<Read> {
    private static readonly pb::MessageParser<Read> _parser = new pb::MessageParser<Read>(() => new Read());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Read> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Read() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Read(Read other) : this() {
      key_ = other.key_;
      FromNode = other.fromNode_ != null ? other.FromNode.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Read Clone() {
      return new Read(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromNode" field.</summary>
    public const int FromNodeFieldNumber = 2;
    private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress fromNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress FromNode {
      get { return fromNode_; }
      set {
        fromNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Read);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Read other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(FromNode, other.FromNode)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (fromNode_ != null) hash ^= FromNode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (fromNode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FromNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (fromNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromNode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Read other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.fromNode_ != null) {
        if (fromNode_ == null) {
          fromNode_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
        }
        FromNode.MergeFrom(other.FromNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (fromNode_ == null) {
              fromNode_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(fromNode_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReadResult : pb::IMessage<ReadResult> {
    private static readonly pb::MessageParser<ReadResult> _parser = new pb::MessageParser<ReadResult>(() => new ReadResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadResult(ReadResult other) : this() {
      Envelope = other.envelope_ != null ? other.Envelope.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadResult Clone() {
      return new ReadResult(this);
    }

    /// <summary>Field number for the "envelope" field.</summary>
    public const int EnvelopeFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope envelope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope Envelope {
      get { return envelope_; }
      set {
        envelope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Envelope, other.Envelope)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (envelope_ != null) hash ^= Envelope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (envelope_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Envelope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (envelope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadResult other) {
      if (other == null) {
        return;
      }
      if (other.envelope_ != null) {
        if (envelope_ == null) {
          envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
        }
        Envelope.MergeFrom(other.Envelope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (envelope_ == null) {
              envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
            }
            input.ReadMessage(envelope_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DataEnvelope : pb::IMessage<DataEnvelope> {
    private static readonly pb::MessageParser<DataEnvelope> _parser = new pb::MessageParser<DataEnvelope>(() => new DataEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataEnvelope(DataEnvelope other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
      pruning_ = other.pruning_.Clone();
      DeltaVersions = other.deltaVersions_ != null ? other.DeltaVersions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataEnvelope Clone() {
      return new DataEnvelope(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "pruning" field.</summary>
    public const int PruningFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry> _repeated_pruning_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry> pruning_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry> Pruning {
      get { return pruning_; }
    }

    /// <summary>Field number for the "deltaVersions" field.</summary>
    public const int DeltaVersionsFieldNumber = 3;
    private global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector deltaVersions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector DeltaVersions {
      get { return deltaVersions_; }
      set {
        deltaVersions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if(!pruning_.Equals(other.pruning_)) return false;
      if (!object.Equals(DeltaVersions, other.DeltaVersions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= pruning_.GetHashCode();
      if (deltaVersions_ != null) hash ^= DeltaVersions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      pruning_.WriteTo(output, _repeated_pruning_codec);
      if (deltaVersions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeltaVersions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += pruning_.CalculateSize(_repeated_pruning_codec);
      if (deltaVersions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeltaVersions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Data.MergeFrom(other.Data);
      }
      pruning_.Add(other.pruning_);
      if (other.deltaVersions_ != null) {
        if (deltaVersions_ == null) {
          deltaVersions_ = new global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector();
        }
        DeltaVersions.MergeFrom(other.DeltaVersions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(data_);
            break;
          }
          case 18: {
            pruning_.AddEntriesFrom(input, _repeated_pruning_codec);
            break;
          }
          case 26: {
            if (deltaVersions_ == null) {
              deltaVersions_ = new global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector();
            }
            input.ReadMessage(deltaVersions_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataEnvelope message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class PruningEntry : pb::IMessage<PruningEntry> {
        private static readonly pb::MessageParser<PruningEntry> _parser = new pb::MessageParser<PruningEntry>(() => new PruningEntry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PruningEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PruningEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PruningEntry(PruningEntry other) : this() {
          RemovedAddress = other.removedAddress_ != null ? other.RemovedAddress.Clone() : null;
          OwnerAddress = other.ownerAddress_ != null ? other.OwnerAddress.Clone() : null;
          performed_ = other.performed_;
          seen_ = other.seen_.Clone();
          obsoleteTime_ = other.obsoleteTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PruningEntry Clone() {
          return new PruningEntry(this);
        }

        /// <summary>Field number for the "removedAddress" field.</summary>
        public const int RemovedAddressFieldNumber = 1;
        private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress removedAddress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress RemovedAddress {
          get { return removedAddress_; }
          set {
            removedAddress_ = value;
          }
        }

        /// <summary>Field number for the "ownerAddress" field.</summary>
        public const int OwnerAddressFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress ownerAddress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress OwnerAddress {
          get { return ownerAddress_; }
          set {
            ownerAddress_ = value;
          }
        }

        /// <summary>Field number for the "performed" field.</summary>
        public const int PerformedFieldNumber = 3;
        private bool performed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Performed {
          get { return performed_; }
          set {
            performed_ = value;
          }
        }

        /// <summary>Field number for the "seen" field.</summary>
        public const int SeenFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.Address> _repeated_seen_codec
            = pb::FieldCodec.ForMessage(34, global::Akka.DistributedData.Serialization.Proto.Msg.Address.Parser);
        private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Address> seen_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Address>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Address> Seen {
          get { return seen_; }
        }

        /// <summary>Field number for the "obsoleteTime" field.</summary>
        public const int ObsoleteTimeFieldNumber = 5;
        private long obsoleteTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ObsoleteTime {
          get { return obsoleteTime_; }
          set {
            obsoleteTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PruningEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PruningEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(RemovedAddress, other.RemovedAddress)) return false;
          if (!object.Equals(OwnerAddress, other.OwnerAddress)) return false;
          if (Performed != other.Performed) return false;
          if(!seen_.Equals(other.seen_)) return false;
          if (ObsoleteTime != other.ObsoleteTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (removedAddress_ != null) hash ^= RemovedAddress.GetHashCode();
          if (ownerAddress_ != null) hash ^= OwnerAddress.GetHashCode();
          if (Performed != false) hash ^= Performed.GetHashCode();
          hash ^= seen_.GetHashCode();
          if (ObsoleteTime != 0L) hash ^= ObsoleteTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (removedAddress_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(RemovedAddress);
          }
          if (ownerAddress_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OwnerAddress);
          }
          if (Performed != false) {
            output.WriteRawTag(24);
            output.WriteBool(Performed);
          }
          seen_.WriteTo(output, _repeated_seen_codec);
          if (ObsoleteTime != 0L) {
            output.WriteRawTag(40);
            output.WriteSInt64(ObsoleteTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (removedAddress_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemovedAddress);
          }
          if (ownerAddress_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OwnerAddress);
          }
          if (Performed != false) {
            size += 1 + 1;
          }
          size += seen_.CalculateSize(_repeated_seen_codec);
          if (ObsoleteTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ObsoleteTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PruningEntry other) {
          if (other == null) {
            return;
          }
          if (other.removedAddress_ != null) {
            if (removedAddress_ == null) {
              removedAddress_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            RemovedAddress.MergeFrom(other.RemovedAddress);
          }
          if (other.ownerAddress_ != null) {
            if (ownerAddress_ == null) {
              ownerAddress_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            OwnerAddress.MergeFrom(other.OwnerAddress);
          }
          if (other.Performed != false) {
            Performed = other.Performed;
          }
          seen_.Add(other.seen_);
          if (other.ObsoleteTime != 0L) {
            ObsoleteTime = other.ObsoleteTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (removedAddress_ == null) {
                  removedAddress_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
                }
                input.ReadMessage(removedAddress_);
                break;
              }
              case 18: {
                if (ownerAddress_ == null) {
                  ownerAddress_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
                }
                input.ReadMessage(ownerAddress_);
                break;
              }
              case 24: {
                Performed = input.ReadBool();
                break;
              }
              case 34: {
                seen_.AddEntriesFrom(input, _repeated_seen_codec);
                break;
              }
              case 40: {
                ObsoleteTime = input.ReadSInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      chunk_ = other.chunk_;
      totChunks_ = other.totChunks_;
      entries_ = other.entries_.Clone();
      toSystemUid_ = other.toSystemUid_;
      fromSystemUid_ = other.fromSystemUid_;
      hasToSystemUid_ = other.hasToSystemUid_;
      hasFromSystemUid_ = other.hasFromSystemUid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 1;
    private uint chunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chunk {
      get { return chunk_; }
      set {
        chunk_ = value;
      }
    }

    /// <summary>Field number for the "totChunks" field.</summary>
    public const int TotChunksFieldNumber = 2;
    private uint totChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotChunks {
      get { return totChunks_; }
      set {
        totChunks_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(26, global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Status.Types.Entry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "toSystemUid" field.</summary>
    public const int ToSystemUidFieldNumber = 4;
    private long toSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToSystemUid {
      get { return toSystemUid_; }
      set {
        toSystemUid_ = value;
      }
    }

    /// <summary>Field number for the "fromSystemUid" field.</summary>
    public const int FromSystemUidFieldNumber = 5;
    private long fromSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromSystemUid {
      get { return fromSystemUid_; }
      set {
        fromSystemUid_ = value;
      }
    }

    /// <summary>Field number for the "hasToSystemUid" field.</summary>
    public const int HasToSystemUidFieldNumber = 6;
    private bool hasToSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToSystemUid {
      get { return hasToSystemUid_; }
      set {
        hasToSystemUid_ = value;
      }
    }

    /// <summary>Field number for the "hasFromSystemUid" field.</summary>
    public const int HasFromSystemUidFieldNumber = 7;
    private bool hasFromSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromSystemUid {
      get { return hasFromSystemUid_; }
      set {
        hasFromSystemUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chunk != other.Chunk) return false;
      if (TotChunks != other.TotChunks) return false;
      if(!entries_.Equals(other.entries_)) return false;
      if (ToSystemUid != other.ToSystemUid) return false;
      if (FromSystemUid != other.FromSystemUid) return false;
      if (HasToSystemUid != other.HasToSystemUid) return false;
      if (HasFromSystemUid != other.HasFromSystemUid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chunk != 0) hash ^= Chunk.GetHashCode();
      if (TotChunks != 0) hash ^= TotChunks.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (ToSystemUid != 0L) hash ^= ToSystemUid.GetHashCode();
      if (FromSystemUid != 0L) hash ^= FromSystemUid.GetHashCode();
      if (HasToSystemUid != false) hash ^= HasToSystemUid.GetHashCode();
      if (HasFromSystemUid != false) hash ^= HasFromSystemUid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chunk != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Chunk);
      }
      if (TotChunks != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotChunks);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (ToSystemUid != 0L) {
        output.WriteRawTag(33);
        output.WriteSFixed64(ToSystemUid);
      }
      if (FromSystemUid != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(FromSystemUid);
      }
      if (HasToSystemUid != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasToSystemUid);
      }
      if (HasFromSystemUid != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasFromSystemUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chunk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Chunk);
      }
      if (TotChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotChunks);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (ToSystemUid != 0L) {
        size += 1 + 8;
      }
      if (FromSystemUid != 0L) {
        size += 1 + 8;
      }
      if (HasToSystemUid != false) {
        size += 1 + 1;
      }
      if (HasFromSystemUid != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Chunk != 0) {
        Chunk = other.Chunk;
      }
      if (other.TotChunks != 0) {
        TotChunks = other.TotChunks;
      }
      entries_.Add(other.entries_);
      if (other.ToSystemUid != 0L) {
        ToSystemUid = other.ToSystemUid;
      }
      if (other.FromSystemUid != 0L) {
        FromSystemUid = other.FromSystemUid;
      }
      if (other.HasToSystemUid != false) {
        HasToSystemUid = other.HasToSystemUid;
      }
      if (other.HasFromSystemUid != false) {
        HasFromSystemUid = other.HasFromSystemUid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chunk = input.ReadUInt32();
            break;
          }
          case 16: {
            TotChunks = input.ReadUInt32();
            break;
          }
          case 26: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 33: {
            ToSystemUid = input.ReadSFixed64();
            break;
          }
          case 41: {
            FromSystemUid = input.ReadSFixed64();
            break;
          }
          case 48: {
            HasToSystemUid = input.ReadBool();
            break;
          }
          case 56: {
            HasFromSystemUid = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Status message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.Status.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          key_ = other.key_;
          digest_ = other.digest_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "digest" field.</summary>
        public const int DigestFieldNumber = 2;
        private pb::ByteString digest_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Digest {
          get { return digest_; }
          set {
            digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Digest != other.Digest) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (Digest.Length != 0) hash ^= Digest.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (Digest.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Digest);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (Digest.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Digest);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.Digest.Length != 0) {
            Digest = other.Digest;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                Digest = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Gossip : pb::IMessage<Gossip> {
    private static readonly pb::MessageParser<Gossip> _parser = new pb::MessageParser<Gossip>(() => new Gossip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gossip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gossip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gossip(Gossip other) : this() {
      sendBack_ = other.sendBack_;
      entries_ = other.entries_.Clone();
      toSystemUid_ = other.toSystemUid_;
      fromSystemUid_ = other.fromSystemUid_;
      hasToSystemUid_ = other.hasToSystemUid_;
      hasFromSystemUid_ = other.hasFromSystemUid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gossip Clone() {
      return new Gossip(this);
    }

    /// <summary>Field number for the "sendBack" field.</summary>
    public const int SendBackFieldNumber = 1;
    private bool sendBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendBack {
      get { return sendBack_; }
      set {
        sendBack_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Types.Entry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "toSystemUid" field.</summary>
    public const int ToSystemUidFieldNumber = 3;
    private long toSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToSystemUid {
      get { return toSystemUid_; }
      set {
        toSystemUid_ = value;
      }
    }

    /// <summary>Field number for the "fromSystemUid" field.</summary>
    public const int FromSystemUidFieldNumber = 4;
    private long fromSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromSystemUid {
      get { return fromSystemUid_; }
      set {
        fromSystemUid_ = value;
      }
    }

    /// <summary>Field number for the "hasToSystemUid" field.</summary>
    public const int HasToSystemUidFieldNumber = 5;
    private bool hasToSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToSystemUid {
      get { return hasToSystemUid_; }
      set {
        hasToSystemUid_ = value;
      }
    }

    /// <summary>Field number for the "hasFromSystemUid" field.</summary>
    public const int HasFromSystemUidFieldNumber = 6;
    private bool hasFromSystemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromSystemUid {
      get { return hasFromSystemUid_; }
      set {
        hasFromSystemUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gossip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gossip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendBack != other.SendBack) return false;
      if(!entries_.Equals(other.entries_)) return false;
      if (ToSystemUid != other.ToSystemUid) return false;
      if (FromSystemUid != other.FromSystemUid) return false;
      if (HasToSystemUid != other.HasToSystemUid) return false;
      if (HasFromSystemUid != other.HasFromSystemUid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SendBack != false) hash ^= SendBack.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (ToSystemUid != 0L) hash ^= ToSystemUid.GetHashCode();
      if (FromSystemUid != 0L) hash ^= FromSystemUid.GetHashCode();
      if (HasToSystemUid != false) hash ^= HasToSystemUid.GetHashCode();
      if (HasFromSystemUid != false) hash ^= HasFromSystemUid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SendBack != false) {
        output.WriteRawTag(8);
        output.WriteBool(SendBack);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (ToSystemUid != 0L) {
        output.WriteRawTag(25);
        output.WriteSFixed64(ToSystemUid);
      }
      if (FromSystemUid != 0L) {
        output.WriteRawTag(33);
        output.WriteSFixed64(FromSystemUid);
      }
      if (HasToSystemUid != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasToSystemUid);
      }
      if (HasFromSystemUid != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasFromSystemUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SendBack != false) {
        size += 1 + 1;
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (ToSystemUid != 0L) {
        size += 1 + 8;
      }
      if (FromSystemUid != 0L) {
        size += 1 + 8;
      }
      if (HasToSystemUid != false) {
        size += 1 + 1;
      }
      if (HasFromSystemUid != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gossip other) {
      if (other == null) {
        return;
      }
      if (other.SendBack != false) {
        SendBack = other.SendBack;
      }
      entries_.Add(other.entries_);
      if (other.ToSystemUid != 0L) {
        ToSystemUid = other.ToSystemUid;
      }
      if (other.FromSystemUid != 0L) {
        FromSystemUid = other.FromSystemUid;
      }
      if (other.HasToSystemUid != false) {
        HasToSystemUid = other.HasToSystemUid;
      }
      if (other.HasFromSystemUid != false) {
        HasFromSystemUid = other.HasFromSystemUid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SendBack = input.ReadBool();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 25: {
            ToSystemUid = input.ReadSFixed64();
            break;
          }
          case 33: {
            FromSystemUid = input.ReadSFixed64();
            break;
          }
          case 40: {
            HasToSystemUid = input.ReadBool();
            break;
          }
          case 48: {
            HasFromSystemUid = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Gossip message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.Gossip.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          key_ = other.key_;
          Envelope = other.envelope_ != null ? other.Envelope.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "envelope" field.</summary>
        public const int EnvelopeFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope envelope_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope Envelope {
          get { return envelope_; }
          set {
            envelope_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Envelope, other.Envelope)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (envelope_ != null) hash ^= Envelope.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (envelope_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Envelope);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (envelope_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.envelope_ != null) {
            if (envelope_ == null) {
              envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
            }
            Envelope.MergeFrom(other.Envelope);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                if (envelope_ == null) {
                  envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
                }
                input.ReadMessage(envelope_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class DeltaPropagation : pb::IMessage<DeltaPropagation> {
    private static readonly pb::MessageParser<DeltaPropagation> _parser = new pb::MessageParser<DeltaPropagation>(() => new DeltaPropagation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeltaPropagation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeltaPropagation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeltaPropagation(DeltaPropagation other) : this() {
      FromNode = other.fromNode_ != null ? other.FromNode.Clone() : null;
      entries_ = other.entries_.Clone();
      reply_ = other.reply_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeltaPropagation Clone() {
      return new DeltaPropagation(this);
    }

    /// <summary>Field number for the "fromNode" field.</summary>
    public const int FromNodeFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress fromNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress FromNode {
      get { return fromNode_; }
      set {
        fromNode_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Types.Entry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "reply" field.</summary>
    public const int ReplyFieldNumber = 3;
    private bool reply_;
    /// <summary>
    /// no reply if not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reply {
      get { return reply_; }
      set {
        reply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeltaPropagation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeltaPropagation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FromNode, other.FromNode)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      if (Reply != other.Reply) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fromNode_ != null) hash ^= FromNode.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (Reply != false) hash ^= Reply.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fromNode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FromNode);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (Reply != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reply);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fromNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromNode);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (Reply != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeltaPropagation other) {
      if (other == null) {
        return;
      }
      if (other.fromNode_ != null) {
        if (fromNode_ == null) {
          fromNode_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
        }
        FromNode.MergeFrom(other.FromNode);
      }
      entries_.Add(other.entries_);
      if (other.Reply != false) {
        Reply = other.Reply;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fromNode_ == null) {
              fromNode_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            input.ReadMessage(fromNode_);
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 24: {
            Reply = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeltaPropagation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.DeltaPropagation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          key_ = other.key_;
          Envelope = other.envelope_ != null ? other.Envelope.Clone() : null;
          fromSeqNr_ = other.fromSeqNr_;
          toSeqNr_ = other.toSeqNr_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "envelope" field.</summary>
        public const int EnvelopeFieldNumber = 2;
        private global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope envelope_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope Envelope {
          get { return envelope_; }
          set {
            envelope_ = value;
          }
        }

        /// <summary>Field number for the "fromSeqNr" field.</summary>
        public const int FromSeqNrFieldNumber = 3;
        private long fromSeqNr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FromSeqNr {
          get { return fromSeqNr_; }
          set {
            fromSeqNr_ = value;
          }
        }

        /// <summary>Field number for the "toSeqNr" field.</summary>
        public const int ToSeqNrFieldNumber = 4;
        private long toSeqNr_;
        /// <summary>
        /// if not set then same as fromSequenceNr
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ToSeqNr {
          get { return toSeqNr_; }
          set {
            toSeqNr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Envelope, other.Envelope)) return false;
          if (FromSeqNr != other.FromSeqNr) return false;
          if (ToSeqNr != other.ToSeqNr) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (envelope_ != null) hash ^= Envelope.GetHashCode();
          if (FromSeqNr != 0L) hash ^= FromSeqNr.GetHashCode();
          if (ToSeqNr != 0L) hash ^= ToSeqNr.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (envelope_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Envelope);
          }
          if (FromSeqNr != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(FromSeqNr);
          }
          if (ToSeqNr != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(ToSeqNr);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (envelope_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
          }
          if (FromSeqNr != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromSeqNr);
          }
          if (ToSeqNr != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToSeqNr);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.envelope_ != null) {
            if (envelope_ == null) {
              envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
            }
            Envelope.MergeFrom(other.Envelope);
          }
          if (other.FromSeqNr != 0L) {
            FromSeqNr = other.FromSeqNr;
          }
          if (other.ToSeqNr != 0L) {
            ToSeqNr = other.ToSeqNr;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                if (envelope_ == null) {
                  envelope_ = new global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope();
                }
                input.ReadMessage(envelope_);
                break;
              }
              case 24: {
                FromSeqNr = input.ReadInt64();
                break;
              }
              case 32: {
                ToSeqNr = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class UniqueAddress : pb::IMessage<UniqueAddress> {
    private static readonly pb::MessageParser<UniqueAddress> _parser = new pb::MessageParser<UniqueAddress>(() => new UniqueAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UniqueAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress(UniqueAddress other) : this() {
      Address = other.address_ != null ? other.Address.Clone() : null;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAddress Clone() {
      return new UniqueAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UniqueAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UniqueAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UniqueAddress other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Akka.DistributedData.Serialization.Proto.Msg.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Akka.DistributedData.Serialization.Proto.Msg.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      hostname_ = other.hostname_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 1;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hostname != other.Hostname) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hostname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hostname);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hostname = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class VersionVector : pb::IMessage<VersionVector> {
    private static readonly pb::MessageParser<VersionVector> _parser = new pb::MessageParser<VersionVector>(() => new VersionVector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionVector(VersionVector other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionVector Clone() {
      return new VersionVector(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry> entries_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionVector other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VersionVector message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.DistributedData.Serialization.Proto.Msg.VersionVector.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          Node = other.node_ != null ? other.Node.Clone() : null;
          version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "node" field.</summary>
        public const int NodeFieldNumber = 1;
        private global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress node_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress Node {
          get { return node_; }
          set {
            node_ = value;
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private long version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Node, other.Node)) return false;
          if (Version != other.Version) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (node_ != null) hash ^= Node.GetHashCode();
          if (Version != 0L) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (node_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Node);
          }
          if (Version != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (node_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
          }
          if (Version != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.node_ != null) {
            if (node_ == null) {
              node_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
            }
            Node.MergeFrom(other.Node);
          }
          if (other.Version != 0L) {
            Version = other.Version;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (node_ == null) {
                  node_ = new global::Akka.DistributedData.Serialization.Proto.Msg.UniqueAddress();
                }
                input.ReadMessage(node_);
                break;
              }
              case 16: {
                Version = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class OtherMessage : pb::IMessage<OtherMessage> {
    private static readonly pb::MessageParser<OtherMessage> _parser = new pb::MessageParser<OtherMessage>(() => new OtherMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherMessage(OtherMessage other) : this() {
      enclosedMessage_ = other.enclosedMessage_;
      serializerId_ = other.serializerId_;
      messageManifest_ = other.messageManifest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherMessage Clone() {
      return new OtherMessage(this);
    }

    /// <summary>Field number for the "enclosedMessage" field.</summary>
    public const int EnclosedMessageFieldNumber = 1;
    private pb::ByteString enclosedMessage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnclosedMessage {
      get { return enclosedMessage_; }
      set {
        enclosedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 2;
    private int serializerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "messageManifest" field.</summary>
    public const int MessageManifestFieldNumber = 4;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageManifest {
      get { return messageManifest_; }
      set {
        messageManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnclosedMessage != other.EnclosedMessage) return false;
      if (SerializerId != other.SerializerId) return false;
      if (MessageManifest != other.MessageManifest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnclosedMessage.Length != 0) hash ^= EnclosedMessage.GetHashCode();
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (MessageManifest.Length != 0) hash ^= MessageManifest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnclosedMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnclosedMessage);
      }
      if (SerializerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(MessageManifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnclosedMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnclosedMessage);
      }
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageManifest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherMessage other) {
      if (other == null) {
        return;
      }
      if (other.EnclosedMessage.Length != 0) {
        EnclosedMessage = other.EnclosedMessage;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.MessageManifest.Length != 0) {
        MessageManifest = other.MessageManifest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EnclosedMessage = input.ReadBytes();
            break;
          }
          case 16: {
            SerializerId = input.ReadInt32();
            break;
          }
          case 34: {
            MessageManifest = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StringGSet : pb::IMessage<StringGSet> {
    private static readonly pb::MessageParser<StringGSet> _parser = new pb::MessageParser<StringGSet>(() => new StringGSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringGSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringGSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringGSet(StringGSet other) : this() {
      elements_ = other.elements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringGSet Clone() {
      return new StringGSet(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_elements_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> elements_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Elements {
      get { return elements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringGSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringGSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elements_.WriteTo(output, _repeated_elements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringGSet other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DurableDataEnvelope : pb::IMessage<DurableDataEnvelope> {
    private static readonly pb::MessageParser<DurableDataEnvelope> _parser = new pb::MessageParser<DurableDataEnvelope>(() => new DurableDataEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurableDataEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.DistributedData.Serialization.Proto.Msg.ReplicatorMessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurableDataEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurableDataEnvelope(DurableDataEnvelope other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
      pruning_ = other.pruning_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurableDataEnvelope Clone() {
      return new DurableDataEnvelope(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "pruning" field.</summary>
    public const int PruningFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry> _repeated_pruning_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry.Parser);
    private readonly pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry> pruning_ = new pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.DistributedData.Serialization.Proto.Msg.DataEnvelope.Types.PruningEntry> Pruning {
      get { return pruning_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurableDataEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurableDataEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if(!pruning_.Equals(other.pruning_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= pruning_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      pruning_.WriteTo(output, _repeated_pruning_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += pruning_.CalculateSize(_repeated_pruning_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurableDataEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
        }
        Data.MergeFrom(other.Data);
      }
      pruning_.Add(other.pruning_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Akka.DistributedData.Serialization.Proto.Msg.OtherMessage();
            }
            input.ReadMessage(data_);
            break;
          }
          case 18: {
            pruning_.AddEntriesFrom(input, _repeated_pruning_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
