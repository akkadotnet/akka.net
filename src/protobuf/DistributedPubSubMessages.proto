/**
 * Copyright (C) 2013-2017 Akka.NET project <https://github.com/akkadotnet/akka.net>
 */

syntax = "proto3";
package Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg;

import "ContainerFormats.proto";

message Status {
  message Version {
    Akka.Remote.Serialization.Proto.Msg.AddressData address = 1;
    int64 timestamp = 2;
  }
  repeated Version versions = 1;
  bool replyToStatus = 2;
}

message Delta {
  message ValueHolder {
    int64 version = 1;
    string ref = 2; 
  }
  message Bucket {
    Akka.Remote.Serialization.Proto.Msg.AddressData owner = 1;
    int64 version = 2;
    map<string, ValueHolder> content = 3;
  }
  repeated Bucket buckets = 1;
}

// Send normally local, but it is also used by the ClusterClient.
message Send {
  string path = 1;
  bool localAffinity = 2;
  Akka.Remote.Serialization.Proto.Msg.Payload payload = 3; 
}

// SendToAll normally local, but it is also used by the ClusterClient.
message SendToAll {
  string path = 1;
  bool allButSelf = 2;
  Akka.Remote.Serialization.Proto.Msg.Payload payload = 3; 
}

// Publish normally local, but it is also used by the ClusterClient.
message Publish {
  string topic = 1;
  Akka.Remote.Serialization.Proto.Msg.Payload payload = 3; 
}

// Send a message to only one subscriber of a group.
message SendToOneSubscriber {
  Akka.Remote.Serialization.Proto.Msg.Payload payload = 1;
}

message GetLocalPubSubStats {
}

message GetPubSubStats {
}

message TopicStats {
  string name = 1;
  int32 count = 2;
}

message LocalPubSubStats {
  map<string, TopicStats> topics = 1;
}

message PubSubStats {
  message AddressLocalPubSubStatsPair {
    Akka.Remote.Serialization.Proto.Msg.AddressData key = 1;
    LocalPubSubStats value = 2;
  }
  
  repeated AddressLocalPubSubStatsPair clusterStats = 1;
}

message GetLocalPubSubState {
}

message GetPubSubState {
}

message TopicState {
  string name = 1;
  repeated Akka.Remote.Serialization.Proto.Msg.AddressData subscribers = 2;
}

message LocalPubSubState {
  map<string, TopicState> topics = 1;
}

message PubSubState {
  message AddressLocalPubSubStatePair {
    Akka.Remote.Serialization.Proto.Msg.AddressData key = 1;
    LocalPubSubState value = 2;
  }
  
  repeated AddressLocalPubSubStatePair clusterState = 1;
}

