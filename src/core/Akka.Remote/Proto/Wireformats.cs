//-----------------------------------------------------------------------
// <copyright file="Wireformats.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------

// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Wireformats
{
    #region Extension registration

    public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
    {
    }

    #endregion

    #region Static variables

    internal static pbd::MessageDescriptor internal__static_AckAndEnvelopeContainer__Descriptor;

    internal static
        pb::FieldAccess.FieldAccessorTable<global::AckAndEnvelopeContainer, global::AckAndEnvelopeContainer.Builder>
        internal__static_AckAndEnvelopeContainer__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_RemoteEnvelope__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::RemoteEnvelope, global::RemoteEnvelope.Builder>
        internal__static_RemoteEnvelope__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_AcknowledgementInfo__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::AcknowledgementInfo, global::AcknowledgementInfo.Builder>
        internal__static_AcknowledgementInfo__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_ActorRefData__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::ActorRefData, global::ActorRefData.Builder>
        internal__static_ActorRefData__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_SerializedMessage__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::SerializedMessage, global::SerializedMessage.Builder>
        internal__static_SerializedMessage__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_DaemonMsgCreateData__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::DaemonMsgCreateData, global::DaemonMsgCreateData.Builder>
        internal__static_DaemonMsgCreateData__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_PropsData__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::PropsData, global::PropsData.Builder>
        internal__static_PropsData__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_DeployData__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::DeployData, global::DeployData.Builder>
        internal__static_DeployData__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_AkkaProtocolMessage__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::AkkaProtocolMessage, global::AkkaProtocolMessage.Builder>
        internal__static_AkkaProtocolMessage__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_AkkaControlMessage__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::AkkaControlMessage, global::AkkaControlMessage.Builder>
        internal__static_AkkaControlMessage__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_AkkaHandshakeInfo__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::AkkaHandshakeInfo, global::AkkaHandshakeInfo.Builder>
        internal__static_AkkaHandshakeInfo__FieldAccessorTable;

    internal static pbd::MessageDescriptor internal__static_AddressData__Descriptor;

    internal static pb::FieldAccess.FieldAccessorTable<global::AddressData, global::AddressData.Builder>
        internal__static_AddressData__FieldAccessorTable;

    #endregion

    #region Descriptor

    private static pbd::FileDescriptor descriptor;

    static Wireformats()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChF3aXJlZm9ybWF0cy5wcm90byJfChdBY2tBbmRFbnZlbG9wZUNvbnRhaW5l" +
            "chIhCgNhY2sYASABKAsyFC5BY2tub3dsZWRnZW1lbnRJbmZvEiEKCGVudmVs" +
            "b3BlGAIgASgLMg8uUmVtb3RlRW52ZWxvcGUigwEKDlJlbW90ZUVudmVsb3Bl" +
            "EiAKCXJlY2lwaWVudBgBIAIoCzINLkFjdG9yUmVmRGF0YRIjCgdtZXNzYWdl" +
            "GAIgAigLMhIuU2VyaWFsaXplZE1lc3NhZ2USHQoGc2VuZGVyGAQgASgLMg0u" +
            "QWN0b3JSZWZEYXRhEgsKA3NlcRgFIAEoBiI7ChNBY2tub3dsZWRnZW1lbnRJ" +
            "bmZvEhUKDWN1bXVsYXRpdmVBY2sYASACKAYSDQoFbmFja3MYAiADKAYiHAoM" +
            "QWN0b3JSZWZEYXRhEgwKBHBhdGgYASACKAkiUwoRU2VyaWFsaXplZE1lc3Nh" +
            "Z2USDwoHbWVzc2FnZRgBIAIoDBIUCgxzZXJpYWxpemVySWQYAiACKAUSFwoP" +
            "bWVzc2FnZU1hbmlmZXN0GAMgASgMIn4KE0RhZW1vbk1zZ0NyZWF0ZURhdGES" +
            "GQoFcHJvcHMYASACKAsyCi5Qcm9wc0RhdGESGwoGZGVwbG95GAIgAigLMgsu" +
            "RGVwbG95RGF0YRIMCgRwYXRoGAMgAigJEiEKCnN1cGVydmlzb3IYBCACKAsy" +
            "DS5BY3RvclJlZkRhdGEiVgoJUHJvcHNEYXRhEhsKBmRlcGxveRgCIAIoCzIL" +
            "LkRlcGxveURhdGESDQoFY2xhenoYAyACKAkSDAoEYXJncxgEIAMoDBIPCgdj" +
            "bGFzc2VzGAUgAygJImMKCkRlcGxveURhdGESDAoEcGF0aBgBIAIoCRIOCgZj" +
            "b25maWcYAiABKAwSFAoMcm91dGVyQ29uZmlnGAMgASgMEg0KBXNjb3BlGAQg" +
            "ASgMEhIKCmRpc3BhdGNoZXIYBSABKAkiUAoTQWtrYVByb3RvY29sTWVzc2Fn" +
            "ZRIPCgdwYXlsb2FkGAEgASgMEigKC2luc3RydWN0aW9uGAIgASgLMhMuQWtr" +
            "YUNvbnRyb2xNZXNzYWdlImIKEkFra2FDb250cm9sTWVzc2FnZRIhCgtjb21t" +
            "YW5kVHlwZRgBIAIoDjIMLkNvbW1hbmRUeXBlEikKDWhhbmRzaGFrZUluZm8Y" +
            "AiABKAsyEi5Ba2thSGFuZHNoYWtlSW5mbyJOChFBa2thSGFuZHNoYWtlSW5m" +
            "bxIcCgZvcmlnaW4YASACKAsyDC5BZGRyZXNzRGF0YRILCgN1aWQYAiACKAYS" +
            "DgoGY29va2llGAMgASgJIk8KC0FkZHJlc3NEYXRhEg4KBnN5c3RlbRgBIAIo" +
            "CRIQCghob3N0bmFtZRgCIAIoCRIMCgRwb3J0GAMgAigNEhAKCHByb3RvY29s" +
            "GAQgASgJKnsKC0NvbW1hbmRUeXBlEg0KCUFTU09DSUFURRABEhAKDERJU0FT" +
            "U09DSUFURRACEg0KCUhFQVJUQkVBVBADEh4KGkRJU0FTU09DSUFURV9TSFVU" +
            "VElOR19ET1dOEAQSHAoYRElTQVNTT0NJQVRFX1FVQVJBTlRJTkVEEAVCAkgB");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root)
        {
            descriptor = root;
            internal__static_AckAndEnvelopeContainer__Descriptor = Descriptor.MessageTypes[0];
            internal__static_AckAndEnvelopeContainer__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable
                    <global::AckAndEnvelopeContainer, global::AckAndEnvelopeContainer.Builder>(
                    internal__static_AckAndEnvelopeContainer__Descriptor,
                    new string[] {"Ack", "Envelope",});
            internal__static_RemoteEnvelope__Descriptor = Descriptor.MessageTypes[1];
            internal__static_RemoteEnvelope__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::RemoteEnvelope, global::RemoteEnvelope.Builder>(
                    internal__static_RemoteEnvelope__Descriptor,
                    new string[] {"Recipient", "Message", "Sender", "Seq",});
            internal__static_AcknowledgementInfo__Descriptor = Descriptor.MessageTypes[2];
            internal__static_AcknowledgementInfo__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::AcknowledgementInfo, global::AcknowledgementInfo.Builder>
                    (internal__static_AcknowledgementInfo__Descriptor,
                        new string[] {"CumulativeAck", "Nacks",});
            internal__static_ActorRefData__Descriptor = Descriptor.MessageTypes[3];
            internal__static_ActorRefData__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ActorRefData, global::ActorRefData.Builder>(
                    internal__static_ActorRefData__Descriptor,
                    new string[] {"Path",});
            internal__static_SerializedMessage__Descriptor = Descriptor.MessageTypes[4];
            internal__static_SerializedMessage__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::SerializedMessage, global::SerializedMessage.Builder>(
                    internal__static_SerializedMessage__Descriptor,
                    new string[] {"Message", "SerializerId", "MessageManifest",});
            internal__static_DaemonMsgCreateData__Descriptor = Descriptor.MessageTypes[5];
            internal__static_DaemonMsgCreateData__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::DaemonMsgCreateData, global::DaemonMsgCreateData.Builder>
                    (internal__static_DaemonMsgCreateData__Descriptor,
                        new string[] {"Props", "Deploy", "Path", "Supervisor",});
            internal__static_PropsData__Descriptor = Descriptor.MessageTypes[6];
            internal__static_PropsData__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::PropsData, global::PropsData.Builder>(
                    internal__static_PropsData__Descriptor,
                    new string[] {"Deploy", "Clazz", "Args", "Classes",});
            internal__static_DeployData__Descriptor = Descriptor.MessageTypes[7];
            internal__static_DeployData__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::DeployData, global::DeployData.Builder>(
                    internal__static_DeployData__Descriptor,
                    new string[] {"Path", "Config", "RouterConfig", "Scope", "Dispatcher",});
            internal__static_AkkaProtocolMessage__Descriptor = Descriptor.MessageTypes[8];
            internal__static_AkkaProtocolMessage__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::AkkaProtocolMessage, global::AkkaProtocolMessage.Builder>
                    (internal__static_AkkaProtocolMessage__Descriptor,
                        new string[] {"Payload", "Instruction",});
            internal__static_AkkaControlMessage__Descriptor = Descriptor.MessageTypes[9];
            internal__static_AkkaControlMessage__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::AkkaControlMessage, global::AkkaControlMessage.Builder>(
                    internal__static_AkkaControlMessage__Descriptor,
                    new string[] {"CommandType", "HandshakeInfo",});
            internal__static_AkkaHandshakeInfo__Descriptor = Descriptor.MessageTypes[10];
            internal__static_AkkaHandshakeInfo__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::AkkaHandshakeInfo, global::AkkaHandshakeInfo.Builder>(
                    internal__static_AkkaHandshakeInfo__Descriptor,
                    new string[] {"Origin", "Uid", "Cookie",});
            internal__static_AddressData__Descriptor = Descriptor.MessageTypes[11];
            internal__static_AddressData__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::AddressData, global::AddressData.Builder>(
                    internal__static_AddressData__Descriptor,
                    new string[] {"System", "Hostname", "Port", "Protocol",});
            return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[]
            {
            }, assigner);
    }

    public static pbd::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }

    #endregion
}

#region Enums

public enum CommandType
{
    ASSOCIATE = 1,
    DISASSOCIATE = 2,
    HEARTBEAT = 3,
    DISASSOCIATE_SHUTTING_DOWN = 4,
    DISASSOCIATE_QUARANTINED = 5,
}

#endregion

#region Messages

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AckAndEnvelopeContainer :
    pb::GeneratedMessage<AckAndEnvelopeContainer, AckAndEnvelopeContainer.Builder>
{
    public const int AckFieldNumber = 1;
    public const int EnvelopeFieldNumber = 2;
    private static readonly AckAndEnvelopeContainer defaultInstance = new AckAndEnvelopeContainer().MakeReadOnly();
    private static readonly string[] _ackAndEnvelopeContainerFieldNames = new string[] {"ack", "envelope"};
    private static readonly uint[] _ackAndEnvelopeContainerFieldTags = new uint[] {10, 18};
    private global::AcknowledgementInfo ack_;
    private global::RemoteEnvelope envelope_;
    private bool hasAck;
    private bool hasEnvelope;
    private int memoizedSerializedSize = -1;

    static AckAndEnvelopeContainer()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private AckAndEnvelopeContainer()
    {
    }

    public static AckAndEnvelopeContainer DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override AckAndEnvelopeContainer DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override AckAndEnvelopeContainer ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_AckAndEnvelopeContainer__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AckAndEnvelopeContainer, AckAndEnvelopeContainer.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_AckAndEnvelopeContainer__FieldAccessorTable; }
    }

    public bool HasAck
    {
        get { return hasAck; }
    }

    public global::AcknowledgementInfo Ack
    {
        get { return ack_ ?? global::AcknowledgementInfo.DefaultInstance; }
    }

    public bool HasEnvelope
    {
        get { return hasEnvelope; }
    }

    public global::RemoteEnvelope Envelope
    {
        get { return envelope_ ?? global::RemoteEnvelope.DefaultInstance; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (HasAck)
            {
                if (!Ack.IsInitialized) return false;
            }
            if (HasEnvelope)
            {
                if (!Envelope.IsInitialized) return false;
            }
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasAck)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(1, Ack);
            }
            if (hasEnvelope)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(2, Envelope);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _ackAndEnvelopeContainerFieldNames;
        if (hasAck)
        {
            output.WriteMessage(1, field_names[0], Ack);
        }
        if (hasEnvelope)
        {
            output.WriteMessage(2, field_names[1], Envelope);
        }
        UnknownFields.WriteTo(output);
    }

    public static AckAndEnvelopeContainer ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AckAndEnvelopeContainer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private AckAndEnvelopeContainer MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(AckAndEnvelopeContainer prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AckAndEnvelopeContainer, Builder>
    {
        private AckAndEnvelopeContainer result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(AckAndEnvelopeContainer cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override AckAndEnvelopeContainer MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override AckAndEnvelopeContainer DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasAck
        {
            get { return result.hasAck; }
        }

        public global::AcknowledgementInfo Ack
        {
            get { return result.Ack; }
            set { SetAck(value); }
        }

        public bool HasEnvelope
        {
            get { return result.hasEnvelope; }
        }

        public global::RemoteEnvelope Envelope
        {
            get { return result.Envelope; }
            set { SetEnvelope(value); }
        }

        private AckAndEnvelopeContainer PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                AckAndEnvelopeContainer original = result;
                result = new AckAndEnvelopeContainer();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override AckAndEnvelopeContainer BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is AckAndEnvelopeContainer)
            {
                return MergeFrom((AckAndEnvelopeContainer) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(AckAndEnvelopeContainer other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAck)
            {
                MergeAck(other.Ack);
            }
            if (other.HasEnvelope)
            {
                MergeEnvelope(other.Envelope);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_ackAndEnvelopeContainerFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _ackAndEnvelopeContainerFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        global::AcknowledgementInfo.Builder subBuilder = global::AcknowledgementInfo.CreateBuilder();
                        if (result.hasAck)
                        {
                            subBuilder.MergeFrom(Ack);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Ack = subBuilder.BuildPartial();
                        break;
                    }
                    case 18:
                    {
                        global::RemoteEnvelope.Builder subBuilder = global::RemoteEnvelope.CreateBuilder();
                        if (result.hasEnvelope)
                        {
                            subBuilder.MergeFrom(Envelope);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Envelope = subBuilder.BuildPartial();
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetAck(global::AcknowledgementInfo value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAck = true;
            result.ack_ = value;
            return this;
        }

        public Builder SetAck(global::AcknowledgementInfo.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasAck = true;
            result.ack_ = builderForValue.Build();
            return this;
        }

        public Builder MergeAck(global::AcknowledgementInfo value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasAck &&
                result.ack_ != global::AcknowledgementInfo.DefaultInstance)
            {
                result.ack_ = global::AcknowledgementInfo.CreateBuilder(result.ack_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.ack_ = value;
            }
            result.hasAck = true;
            return this;
        }

        public Builder ClearAck()
        {
            PrepareBuilder();
            result.hasAck = false;
            result.ack_ = null;
            return this;
        }

        public Builder SetEnvelope(global::RemoteEnvelope value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEnvelope = true;
            result.envelope_ = value;
            return this;
        }

        public Builder SetEnvelope(global::RemoteEnvelope.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasEnvelope = true;
            result.envelope_ = builderForValue.Build();
            return this;
        }

        public Builder MergeEnvelope(global::RemoteEnvelope value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasEnvelope &&
                result.envelope_ != global::RemoteEnvelope.DefaultInstance)
            {
                result.envelope_ =
                    global::RemoteEnvelope.CreateBuilder(result.envelope_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.envelope_ = value;
            }
            result.hasEnvelope = true;
            return this;
        }

        public Builder ClearEnvelope()
        {
            PrepareBuilder();
            result.hasEnvelope = false;
            result.envelope_ = null;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RemoteEnvelope : pb::GeneratedMessage<RemoteEnvelope, RemoteEnvelope.Builder>
{
    public const int RecipientFieldNumber = 1;
    public const int MessageFieldNumber = 2;
    public const int SenderFieldNumber = 4;
    public const int SeqFieldNumber = 5;
    private static readonly RemoteEnvelope defaultInstance = new RemoteEnvelope().MakeReadOnly();
    private static readonly string[] _remoteEnvelopeFieldNames = new string[] {"message", "recipient", "sender", "seq"};
    private static readonly uint[] _remoteEnvelopeFieldTags = new uint[] {18, 10, 34, 41};
    private bool hasMessage;
    private bool hasRecipient;
    private bool hasSender;
    private bool hasSeq;
    private int memoizedSerializedSize = -1;
    private global::SerializedMessage message_;
    private global::ActorRefData recipient_;
    private global::ActorRefData sender_;
    private ulong seq_;

    static RemoteEnvelope()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private RemoteEnvelope()
    {
    }

    public static RemoteEnvelope DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override RemoteEnvelope DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override RemoteEnvelope ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_RemoteEnvelope__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<RemoteEnvelope, RemoteEnvelope.Builder> InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_RemoteEnvelope__FieldAccessorTable; }
    }

    public bool HasRecipient
    {
        get { return hasRecipient; }
    }

    public global::ActorRefData Recipient
    {
        get { return recipient_ ?? global::ActorRefData.DefaultInstance; }
    }

    public bool HasMessage
    {
        get { return hasMessage; }
    }

    public global::SerializedMessage Message
    {
        get { return message_ ?? global::SerializedMessage.DefaultInstance; }
    }

    public bool HasSender
    {
        get { return hasSender; }
    }

    public global::ActorRefData Sender
    {
        get { return sender_ ?? global::ActorRefData.DefaultInstance; }
    }

    public bool HasSeq
    {
        get { return hasSeq; }
    }

    [global::System.CLSCompliant(false)]
    public ulong Seq
    {
        get { return seq_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasRecipient) return false;
            if (!hasMessage) return false;
            if (!Recipient.IsInitialized) return false;
            if (!Message.IsInitialized) return false;
            if (HasSender)
            {
                if (!Sender.IsInitialized) return false;
            }
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasRecipient)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(1, Recipient);
            }
            if (hasMessage)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(2, Message);
            }
            if (hasSender)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(4, Sender);
            }
            if (hasSeq)
            {
                size += pb::CodedOutputStream.ComputeFixed64Size(5, Seq);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _remoteEnvelopeFieldNames;
        if (hasRecipient)
        {
            output.WriteMessage(1, field_names[1], Recipient);
        }
        if (hasMessage)
        {
            output.WriteMessage(2, field_names[0], Message);
        }
        if (hasSender)
        {
            output.WriteMessage(4, field_names[2], Sender);
        }
        if (hasSeq)
        {
            output.WriteFixed64(5, field_names[3], Seq);
        }
        UnknownFields.WriteTo(output);
    }

    public static RemoteEnvelope ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static RemoteEnvelope ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static RemoteEnvelope ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static RemoteEnvelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private RemoteEnvelope MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(RemoteEnvelope prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RemoteEnvelope, Builder>
    {
        private RemoteEnvelope result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(RemoteEnvelope cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override RemoteEnvelope MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override RemoteEnvelope DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasRecipient
        {
            get { return result.hasRecipient; }
        }

        public global::ActorRefData Recipient
        {
            get { return result.Recipient; }
            set { SetRecipient(value); }
        }

        public bool HasMessage
        {
            get { return result.hasMessage; }
        }

        public global::SerializedMessage Message
        {
            get { return result.Message; }
            set { SetMessage(value); }
        }

        public bool HasSender
        {
            get { return result.hasSender; }
        }

        public global::ActorRefData Sender
        {
            get { return result.Sender; }
            set { SetSender(value); }
        }

        public bool HasSeq
        {
            get { return result.hasSeq; }
        }

        [global::System.CLSCompliant(false)]
        public ulong Seq
        {
            get { return result.Seq; }
            set { SetSeq(value); }
        }

        private RemoteEnvelope PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                RemoteEnvelope original = result;
                result = new RemoteEnvelope();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override RemoteEnvelope BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is RemoteEnvelope)
            {
                return MergeFrom((RemoteEnvelope) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(RemoteEnvelope other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasRecipient)
            {
                MergeRecipient(other.Recipient);
            }
            if (other.HasMessage)
            {
                MergeMessage(other.Message);
            }
            if (other.HasSender)
            {
                MergeSender(other.Sender);
            }
            if (other.HasSeq)
            {
                Seq = other.Seq;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_remoteEnvelopeFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _remoteEnvelopeFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        global::ActorRefData.Builder subBuilder = global::ActorRefData.CreateBuilder();
                        if (result.hasRecipient)
                        {
                            subBuilder.MergeFrom(Recipient);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Recipient = subBuilder.BuildPartial();
                        break;
                    }
                    case 18:
                    {
                        global::SerializedMessage.Builder subBuilder = global::SerializedMessage.CreateBuilder();
                        if (result.hasMessage)
                        {
                            subBuilder.MergeFrom(Message);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Message = subBuilder.BuildPartial();
                        break;
                    }
                    case 34:
                    {
                        global::ActorRefData.Builder subBuilder = global::ActorRefData.CreateBuilder();
                        if (result.hasSender)
                        {
                            subBuilder.MergeFrom(Sender);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Sender = subBuilder.BuildPartial();
                        break;
                    }
                    case 41:
                    {
                        result.hasSeq = input.ReadFixed64(ref result.seq_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetRecipient(global::ActorRefData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRecipient = true;
            result.recipient_ = value;
            return this;
        }

        public Builder SetRecipient(global::ActorRefData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRecipient = true;
            result.recipient_ = builderForValue.Build();
            return this;
        }

        public Builder MergeRecipient(global::ActorRefData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRecipient &&
                result.recipient_ != global::ActorRefData.DefaultInstance)
            {
                result.recipient_ =
                    global::ActorRefData.CreateBuilder(result.recipient_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.recipient_ = value;
            }
            result.hasRecipient = true;
            return this;
        }

        public Builder ClearRecipient()
        {
            PrepareBuilder();
            result.hasRecipient = false;
            result.recipient_ = null;
            return this;
        }

        public Builder SetMessage(global::SerializedMessage value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
        }

        public Builder SetMessage(global::SerializedMessage.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = builderForValue.Build();
            return this;
        }

        public Builder MergeMessage(global::SerializedMessage value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasMessage &&
                result.message_ != global::SerializedMessage.DefaultInstance)
            {
                result.message_ =
                    global::SerializedMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.message_ = value;
            }
            result.hasMessage = true;
            return this;
        }

        public Builder ClearMessage()
        {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = null;
            return this;
        }

        public Builder SetSender(global::ActorRefData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSender = true;
            result.sender_ = value;
            return this;
        }

        public Builder SetSender(global::ActorRefData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasSender = true;
            result.sender_ = builderForValue.Build();
            return this;
        }

        public Builder MergeSender(global::ActorRefData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasSender &&
                result.sender_ != global::ActorRefData.DefaultInstance)
            {
                result.sender_ = global::ActorRefData.CreateBuilder(result.sender_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.sender_ = value;
            }
            result.hasSender = true;
            return this;
        }

        public Builder ClearSender()
        {
            PrepareBuilder();
            result.hasSender = false;
            result.sender_ = null;
            return this;
        }

        [global::System.CLSCompliant(false)]
        public Builder SetSeq(ulong value)
        {
            PrepareBuilder();
            result.hasSeq = true;
            result.seq_ = value;
            return this;
        }

        public Builder ClearSeq()
        {
            PrepareBuilder();
            result.hasSeq = false;
            result.seq_ = 0;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AcknowledgementInfo : pb::GeneratedMessage<AcknowledgementInfo, AcknowledgementInfo.Builder>
{
    public const int CumulativeAckFieldNumber = 1;
    public const int NacksFieldNumber = 2;
    private static readonly AcknowledgementInfo defaultInstance = new AcknowledgementInfo().MakeReadOnly();
    private static readonly string[] _acknowledgementInfoFieldNames = new string[] {"cumulativeAck", "nacks"};
    private static readonly uint[] _acknowledgementInfoFieldTags = new uint[] {9, 17};
    private ulong cumulativeAck_;
    private bool hasCumulativeAck;
    private int memoizedSerializedSize = -1;
    private pbc::PopsicleList<ulong> nacks_ = new pbc::PopsicleList<ulong>();

    static AcknowledgementInfo()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private AcknowledgementInfo()
    {
    }

    public static AcknowledgementInfo DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override AcknowledgementInfo DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override AcknowledgementInfo ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_AcknowledgementInfo__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AcknowledgementInfo, AcknowledgementInfo.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_AcknowledgementInfo__FieldAccessorTable; }
    }

    public bool HasCumulativeAck
    {
        get { return hasCumulativeAck; }
    }

    [global::System.CLSCompliant(false)]
    public ulong CumulativeAck
    {
        get { return cumulativeAck_; }
    }

    [global::System.CLSCompliant(false)]
    public scg::IList<ulong> NacksList
    {
        get { return pbc::Lists.AsReadOnly(nacks_); }
    }

    public int NacksCount
    {
        get { return nacks_.Count; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasCumulativeAck) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasCumulativeAck)
            {
                size += pb::CodedOutputStream.ComputeFixed64Size(1, CumulativeAck);
            }
            {
                int dataSize = 0;
                dataSize = 8*nacks_.Count;
                size += dataSize;
                size += 1*nacks_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    [global::System.CLSCompliant(false)]
    public ulong GetNacks(int index)
    {
        return nacks_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _acknowledgementInfoFieldNames;
        if (hasCumulativeAck)
        {
            output.WriteFixed64(1, field_names[0], CumulativeAck);
        }
        if (nacks_.Count > 0)
        {
            output.WriteFixed64Array(2, field_names[1], nacks_);
        }
        UnknownFields.WriteTo(output);
    }

    public static AcknowledgementInfo ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static AcknowledgementInfo ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static AcknowledgementInfo ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AcknowledgementInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private AcknowledgementInfo MakeReadOnly()
    {
        nacks_.MakeReadOnly();
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(AcknowledgementInfo prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AcknowledgementInfo, Builder>
    {
        private AcknowledgementInfo result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(AcknowledgementInfo cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override AcknowledgementInfo MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override AcknowledgementInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasCumulativeAck
        {
            get { return result.hasCumulativeAck; }
        }

        [global::System.CLSCompliant(false)]
        public ulong CumulativeAck
        {
            get { return result.CumulativeAck; }
            set { SetCumulativeAck(value); }
        }

        [global::System.CLSCompliant(false)]
        public pbc::IPopsicleList<ulong> NacksList
        {
            get { return PrepareBuilder().nacks_; }
        }

        public int NacksCount
        {
            get { return result.NacksCount; }
        }

        private AcknowledgementInfo PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                AcknowledgementInfo original = result;
                result = new AcknowledgementInfo();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override AcknowledgementInfo BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is AcknowledgementInfo)
            {
                return MergeFrom((AcknowledgementInfo) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(AcknowledgementInfo other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCumulativeAck)
            {
                CumulativeAck = other.CumulativeAck;
            }
            if (other.nacks_.Count != 0)
            {
                result.nacks_.Add(other.nacks_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_acknowledgementInfoFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _acknowledgementInfoFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 9:
                    {
                        result.hasCumulativeAck = input.ReadFixed64(ref result.cumulativeAck_);
                        break;
                    }
                    case 18:
                    case 17:
                    {
                        input.ReadFixed64Array(tag, field_name, result.nacks_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        [global::System.CLSCompliant(false)]
        public Builder SetCumulativeAck(ulong value)
        {
            PrepareBuilder();
            result.hasCumulativeAck = true;
            result.cumulativeAck_ = value;
            return this;
        }

        public Builder ClearCumulativeAck()
        {
            PrepareBuilder();
            result.hasCumulativeAck = false;
            result.cumulativeAck_ = 0;
            return this;
        }

        [global::System.CLSCompliant(false)]
        public ulong GetNacks(int index)
        {
            return result.GetNacks(index);
        }

        [global::System.CLSCompliant(false)]
        public Builder SetNacks(int index, ulong value)
        {
            PrepareBuilder();
            result.nacks_[index] = value;
            return this;
        }

        [global::System.CLSCompliant(false)]
        public Builder AddNacks(ulong value)
        {
            PrepareBuilder();
            result.nacks_.Add(value);
            return this;
        }

        [global::System.CLSCompliant(false)]
        public Builder AddRangeNacks(scg::IEnumerable<ulong> values)
        {
            PrepareBuilder();
            result.nacks_.Add(values);
            return this;
        }

        public Builder ClearNacks()
        {
            PrepareBuilder();
            result.nacks_.Clear();
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ActorRefData : pb::GeneratedMessage<ActorRefData, ActorRefData.Builder>
{
    public const int PathFieldNumber = 1;
    private static readonly ActorRefData defaultInstance = new ActorRefData().MakeReadOnly();
    private static readonly string[] _actorRefDataFieldNames = new string[] {"path"};
    private static readonly uint[] _actorRefDataFieldTags = new uint[] {10};
    private bool hasPath;
    private int memoizedSerializedSize = -1;
    private string path_ = "";

    static ActorRefData()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private ActorRefData()
    {
    }

    public static ActorRefData DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ActorRefData DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ActorRefData ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_ActorRefData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ActorRefData, ActorRefData.Builder> InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_ActorRefData__FieldAccessorTable; }
    }

    public bool HasPath
    {
        get { return hasPath; }
    }

    public string Path
    {
        get { return path_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasPath) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasPath)
            {
                size += pb::CodedOutputStream.ComputeStringSize(1, Path);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _actorRefDataFieldNames;
        if (hasPath)
        {
            output.WriteString(1, field_names[0], Path);
        }
        UnknownFields.WriteTo(output);
    }

    public static ActorRefData ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static ActorRefData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static ActorRefData ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static ActorRefData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static ActorRefData ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static ActorRefData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static ActorRefData ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static ActorRefData ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static ActorRefData ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static ActorRefData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private ActorRefData MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(ActorRefData prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActorRefData, Builder>
    {
        private ActorRefData result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(ActorRefData cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ActorRefData MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override ActorRefData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasPath
        {
            get { return result.hasPath; }
        }

        public string Path
        {
            get { return result.Path; }
            set { SetPath(value); }
        }

        private ActorRefData PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ActorRefData original = result;
                result = new ActorRefData();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override ActorRefData BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ActorRefData)
            {
                return MergeFrom((ActorRefData) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ActorRefData other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPath)
            {
                Path = other.Path;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_actorRefDataFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _actorRefDataFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        result.hasPath = input.ReadString(ref result.path_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetPath(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPath = true;
            result.path_ = value;
            return this;
        }

        public Builder ClearPath()
        {
            PrepareBuilder();
            result.hasPath = false;
            result.path_ = "";
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SerializedMessage : pb::GeneratedMessage<SerializedMessage, SerializedMessage.Builder>
{
    public const int MessageFieldNumber = 1;
    public const int SerializerIdFieldNumber = 2;
    public const int MessageManifestFieldNumber = 3;
    private static readonly SerializedMessage defaultInstance = new SerializedMessage().MakeReadOnly();

    private static readonly string[] _serializedMessageFieldNames = new string[]
    {"message", "messageManifest", "serializerId"};

    private static readonly uint[] _serializedMessageFieldTags = new uint[] {10, 26, 16};
    private bool hasMessage;
    private bool hasMessageManifest;
    private bool hasSerializerId;
    private int memoizedSerializedSize = -1;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    private pb::ByteString message_ = pb::ByteString.Empty;
    private int serializerId_;

    static SerializedMessage()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private SerializedMessage()
    {
    }

    public static SerializedMessage DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override SerializedMessage DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override SerializedMessage ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_SerializedMessage__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SerializedMessage, SerializedMessage.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_SerializedMessage__FieldAccessorTable; }
    }

    public bool HasMessage
    {
        get { return hasMessage; }
    }

    public pb::ByteString Message
    {
        get { return message_; }
    }

    public bool HasSerializerId
    {
        get { return hasSerializerId; }
    }

    public int SerializerId
    {
        get { return serializerId_; }
    }

    public bool HasMessageManifest
    {
        get { return hasMessageManifest; }
    }

    public pb::ByteString MessageManifest
    {
        get { return messageManifest_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasMessage) return false;
            if (!hasSerializerId) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasMessage)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(1, Message);
            }
            if (hasSerializerId)
            {
                size += pb::CodedOutputStream.ComputeInt32Size(2, SerializerId);
            }
            if (hasMessageManifest)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(3, MessageManifest);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _serializedMessageFieldNames;
        if (hasMessage)
        {
            output.WriteBytes(1, field_names[0], Message);
        }
        if (hasSerializerId)
        {
            output.WriteInt32(2, field_names[2], SerializerId);
        }
        if (hasMessageManifest)
        {
            output.WriteBytes(3, field_names[1], MessageManifest);
        }
        UnknownFields.WriteTo(output);
    }

    public static SerializedMessage ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static SerializedMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static SerializedMessage ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static SerializedMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static SerializedMessage ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static SerializedMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static SerializedMessage ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static SerializedMessage ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static SerializedMessage ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static SerializedMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private SerializedMessage MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(SerializedMessage prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SerializedMessage, Builder>
    {
        private SerializedMessage result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(SerializedMessage cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override SerializedMessage MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override SerializedMessage DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasMessage
        {
            get { return result.hasMessage; }
        }

        public pb::ByteString Message
        {
            get { return result.Message; }
            set { SetMessage(value); }
        }

        public bool HasSerializerId
        {
            get { return result.hasSerializerId; }
        }

        public int SerializerId
        {
            get { return result.SerializerId; }
            set { SetSerializerId(value); }
        }

        public bool HasMessageManifest
        {
            get { return result.hasMessageManifest; }
        }

        public pb::ByteString MessageManifest
        {
            get { return result.MessageManifest; }
            set { SetMessageManifest(value); }
        }

        private SerializedMessage PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                SerializedMessage original = result;
                result = new SerializedMessage();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override SerializedMessage BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is SerializedMessage)
            {
                return MergeFrom((SerializedMessage) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(SerializedMessage other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasMessage)
            {
                Message = other.Message;
            }
            if (other.HasSerializerId)
            {
                SerializerId = other.SerializerId;
            }
            if (other.HasMessageManifest)
            {
                MessageManifest = other.MessageManifest;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_serializedMessageFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _serializedMessageFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        result.hasMessage = input.ReadBytes(ref result.message_);
                        break;
                    }
                    case 16:
                    {
                        result.hasSerializerId = input.ReadInt32(ref result.serializerId_);
                        break;
                    }
                    case 26:
                    {
                        result.hasMessageManifest = input.ReadBytes(ref result.messageManifest_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetMessage(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
        }

        public Builder ClearMessage()
        {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = pb::ByteString.Empty;
            return this;
        }

        public Builder SetSerializerId(int value)
        {
            PrepareBuilder();
            result.hasSerializerId = true;
            result.serializerId_ = value;
            return this;
        }

        public Builder ClearSerializerId()
        {
            PrepareBuilder();
            result.hasSerializerId = false;
            result.serializerId_ = 0;
            return this;
        }

        public Builder SetMessageManifest(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessageManifest = true;
            result.messageManifest_ = value;
            return this;
        }

        public Builder ClearMessageManifest()
        {
            PrepareBuilder();
            result.hasMessageManifest = false;
            result.messageManifest_ = pb::ByteString.Empty;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DaemonMsgCreateData : pb::GeneratedMessage<DaemonMsgCreateData, DaemonMsgCreateData.Builder>
{
    public const int PropsFieldNumber = 1;
    public const int DeployFieldNumber = 2;
    public const int PathFieldNumber = 3;
    public const int SupervisorFieldNumber = 4;
    private static readonly DaemonMsgCreateData defaultInstance = new DaemonMsgCreateData().MakeReadOnly();

    private static readonly string[] _daemonMsgCreateDataFieldNames = new string[]
    {"deploy", "path", "props", "supervisor"};

    private static readonly uint[] _daemonMsgCreateDataFieldTags = new uint[] {18, 26, 10, 34};
    private global::DeployData deploy_;
    private bool hasDeploy;
    private bool hasPath;
    private bool hasProps;
    private bool hasSupervisor;
    private int memoizedSerializedSize = -1;
    private string path_ = "";
    private global::PropsData props_;
    private global::ActorRefData supervisor_;

    static DaemonMsgCreateData()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private DaemonMsgCreateData()
    {
    }

    public static DaemonMsgCreateData DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override DaemonMsgCreateData DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override DaemonMsgCreateData ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_DaemonMsgCreateData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<DaemonMsgCreateData, DaemonMsgCreateData.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_DaemonMsgCreateData__FieldAccessorTable; }
    }

    public bool HasProps
    {
        get { return hasProps; }
    }

    public global::PropsData Props
    {
        get { return props_ ?? global::PropsData.DefaultInstance; }
    }

    public bool HasDeploy
    {
        get { return hasDeploy; }
    }

    public global::DeployData Deploy
    {
        get { return deploy_ ?? global::DeployData.DefaultInstance; }
    }

    public bool HasPath
    {
        get { return hasPath; }
    }

    public string Path
    {
        get { return path_; }
    }

    public bool HasSupervisor
    {
        get { return hasSupervisor; }
    }

    public global::ActorRefData Supervisor
    {
        get { return supervisor_ ?? global::ActorRefData.DefaultInstance; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasProps) return false;
            if (!hasDeploy) return false;
            if (!hasPath) return false;
            if (!hasSupervisor) return false;
            if (!Props.IsInitialized) return false;
            if (!Deploy.IsInitialized) return false;
            if (!Supervisor.IsInitialized) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasProps)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(1, Props);
            }
            if (hasDeploy)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(2, Deploy);
            }
            if (hasPath)
            {
                size += pb::CodedOutputStream.ComputeStringSize(3, Path);
            }
            if (hasSupervisor)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(4, Supervisor);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _daemonMsgCreateDataFieldNames;
        if (hasProps)
        {
            output.WriteMessage(1, field_names[2], Props);
        }
        if (hasDeploy)
        {
            output.WriteMessage(2, field_names[0], Deploy);
        }
        if (hasPath)
        {
            output.WriteString(3, field_names[1], Path);
        }
        if (hasSupervisor)
        {
            output.WriteMessage(4, field_names[3], Supervisor);
        }
        UnknownFields.WriteTo(output);
    }

    public static DaemonMsgCreateData ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static DaemonMsgCreateData ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static DaemonMsgCreateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private DaemonMsgCreateData MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(DaemonMsgCreateData prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DaemonMsgCreateData, Builder>
    {
        private DaemonMsgCreateData result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(DaemonMsgCreateData cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override DaemonMsgCreateData MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override DaemonMsgCreateData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasProps
        {
            get { return result.hasProps; }
        }

        public global::PropsData Props
        {
            get { return result.Props; }
            set { SetProps(value); }
        }

        public bool HasDeploy
        {
            get { return result.hasDeploy; }
        }

        public global::DeployData Deploy
        {
            get { return result.Deploy; }
            set { SetDeploy(value); }
        }

        public bool HasPath
        {
            get { return result.hasPath; }
        }

        public string Path
        {
            get { return result.Path; }
            set { SetPath(value); }
        }

        public bool HasSupervisor
        {
            get { return result.hasSupervisor; }
        }

        public global::ActorRefData Supervisor
        {
            get { return result.Supervisor; }
            set { SetSupervisor(value); }
        }

        private DaemonMsgCreateData PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                DaemonMsgCreateData original = result;
                result = new DaemonMsgCreateData();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override DaemonMsgCreateData BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is DaemonMsgCreateData)
            {
                return MergeFrom((DaemonMsgCreateData) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(DaemonMsgCreateData other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasProps)
            {
                MergeProps(other.Props);
            }
            if (other.HasDeploy)
            {
                MergeDeploy(other.Deploy);
            }
            if (other.HasPath)
            {
                Path = other.Path;
            }
            if (other.HasSupervisor)
            {
                MergeSupervisor(other.Supervisor);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_daemonMsgCreateDataFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _daemonMsgCreateDataFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        global::PropsData.Builder subBuilder = global::PropsData.CreateBuilder();
                        if (result.hasProps)
                        {
                            subBuilder.MergeFrom(Props);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Props = subBuilder.BuildPartial();
                        break;
                    }
                    case 18:
                    {
                        global::DeployData.Builder subBuilder = global::DeployData.CreateBuilder();
                        if (result.hasDeploy)
                        {
                            subBuilder.MergeFrom(Deploy);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Deploy = subBuilder.BuildPartial();
                        break;
                    }
                    case 26:
                    {
                        result.hasPath = input.ReadString(ref result.path_);
                        break;
                    }
                    case 34:
                    {
                        global::ActorRefData.Builder subBuilder = global::ActorRefData.CreateBuilder();
                        if (result.hasSupervisor)
                        {
                            subBuilder.MergeFrom(Supervisor);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Supervisor = subBuilder.BuildPartial();
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetProps(global::PropsData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasProps = true;
            result.props_ = value;
            return this;
        }

        public Builder SetProps(global::PropsData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasProps = true;
            result.props_ = builderForValue.Build();
            return this;
        }

        public Builder MergeProps(global::PropsData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasProps &&
                result.props_ != global::PropsData.DefaultInstance)
            {
                result.props_ = global::PropsData.CreateBuilder(result.props_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.props_ = value;
            }
            result.hasProps = true;
            return this;
        }

        public Builder ClearProps()
        {
            PrepareBuilder();
            result.hasProps = false;
            result.props_ = null;
            return this;
        }

        public Builder SetDeploy(global::DeployData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDeploy = true;
            result.deploy_ = value;
            return this;
        }

        public Builder SetDeploy(global::DeployData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDeploy = true;
            result.deploy_ = builderForValue.Build();
            return this;
        }

        public Builder MergeDeploy(global::DeployData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDeploy &&
                result.deploy_ != global::DeployData.DefaultInstance)
            {
                result.deploy_ = global::DeployData.CreateBuilder(result.deploy_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.deploy_ = value;
            }
            result.hasDeploy = true;
            return this;
        }

        public Builder ClearDeploy()
        {
            PrepareBuilder();
            result.hasDeploy = false;
            result.deploy_ = null;
            return this;
        }

        public Builder SetPath(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPath = true;
            result.path_ = value;
            return this;
        }

        public Builder ClearPath()
        {
            PrepareBuilder();
            result.hasPath = false;
            result.path_ = "";
            return this;
        }

        public Builder SetSupervisor(global::ActorRefData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSupervisor = true;
            result.supervisor_ = value;
            return this;
        }

        public Builder SetSupervisor(global::ActorRefData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasSupervisor = true;
            result.supervisor_ = builderForValue.Build();
            return this;
        }

        public Builder MergeSupervisor(global::ActorRefData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasSupervisor &&
                result.supervisor_ != global::ActorRefData.DefaultInstance)
            {
                result.supervisor_ =
                    global::ActorRefData.CreateBuilder(result.supervisor_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.supervisor_ = value;
            }
            result.hasSupervisor = true;
            return this;
        }

        public Builder ClearSupervisor()
        {
            PrepareBuilder();
            result.hasSupervisor = false;
            result.supervisor_ = null;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PropsData : pb::GeneratedMessage<PropsData, PropsData.Builder>
{
    public const int DeployFieldNumber = 2;
    public const int ClazzFieldNumber = 3;
    public const int ArgsFieldNumber = 4;
    public const int ClassesFieldNumber = 5;
    private static readonly PropsData defaultInstance = new PropsData().MakeReadOnly();
    private static readonly string[] _propsDataFieldNames = new string[] {"args", "classes", "clazz", "deploy"};
    private static readonly uint[] _propsDataFieldTags = new uint[] {34, 42, 26, 18};
    private pbc::PopsicleList<pb::ByteString> args_ = new pbc::PopsicleList<pb::ByteString>();
    private pbc::PopsicleList<string> classes_ = new pbc::PopsicleList<string>();
    private string clazz_ = "";
    private global::DeployData deploy_;
    private bool hasClazz;
    private bool hasDeploy;
    private int memoizedSerializedSize = -1;

    static PropsData()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private PropsData()
    {
    }

    public static PropsData DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override PropsData DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override PropsData ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_PropsData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PropsData, PropsData.Builder> InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_PropsData__FieldAccessorTable; }
    }

    public bool HasDeploy
    {
        get { return hasDeploy; }
    }

    public global::DeployData Deploy
    {
        get { return deploy_ ?? global::DeployData.DefaultInstance; }
    }

    public bool HasClazz
    {
        get { return hasClazz; }
    }

    public string Clazz
    {
        get { return clazz_; }
    }

    public scg::IList<pb::ByteString> ArgsList
    {
        get { return pbc::Lists.AsReadOnly(args_); }
    }

    public int ArgsCount
    {
        get { return args_.Count; }
    }

    public scg::IList<string> ClassesList
    {
        get { return pbc::Lists.AsReadOnly(classes_); }
    }

    public int ClassesCount
    {
        get { return classes_.Count; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasDeploy) return false;
            if (!hasClazz) return false;
            if (!Deploy.IsInitialized) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasDeploy)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(2, Deploy);
            }
            if (hasClazz)
            {
                size += pb::CodedOutputStream.ComputeStringSize(3, Clazz);
            }
            {
                int dataSize = 0;
                foreach (pb::ByteString element in ArgsList)
                {
                    dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
                }
                size += dataSize;
                size += 1*args_.Count;
            }
            {
                int dataSize = 0;
                foreach (string element in ClassesList)
                {
                    dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
                }
                size += dataSize;
                size += 1*classes_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public pb::ByteString GetArgs(int index)
    {
        return args_[index];
    }

    public string GetClasses(int index)
    {
        return classes_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _propsDataFieldNames;
        if (hasDeploy)
        {
            output.WriteMessage(2, field_names[3], Deploy);
        }
        if (hasClazz)
        {
            output.WriteString(3, field_names[2], Clazz);
        }
        if (args_.Count > 0)
        {
            output.WriteBytesArray(4, field_names[0], args_);
        }
        if (classes_.Count > 0)
        {
            output.WriteStringArray(5, field_names[1], classes_);
        }
        UnknownFields.WriteTo(output);
    }

    public static PropsData ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static PropsData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static PropsData ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static PropsData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static PropsData ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static PropsData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static PropsData ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static PropsData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static PropsData ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static PropsData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private PropsData MakeReadOnly()
    {
        args_.MakeReadOnly();
        classes_.MakeReadOnly();
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(PropsData prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PropsData, Builder>
    {
        private PropsData result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(PropsData cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override PropsData MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override PropsData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasDeploy
        {
            get { return result.hasDeploy; }
        }

        public global::DeployData Deploy
        {
            get { return result.Deploy; }
            set { SetDeploy(value); }
        }

        public bool HasClazz
        {
            get { return result.hasClazz; }
        }

        public string Clazz
        {
            get { return result.Clazz; }
            set { SetClazz(value); }
        }

        public pbc::IPopsicleList<pb::ByteString> ArgsList
        {
            get { return PrepareBuilder().args_; }
        }

        public int ArgsCount
        {
            get { return result.ArgsCount; }
        }

        public pbc::IPopsicleList<string> ClassesList
        {
            get { return PrepareBuilder().classes_; }
        }

        public int ClassesCount
        {
            get { return result.ClassesCount; }
        }

        private PropsData PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                PropsData original = result;
                result = new PropsData();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override PropsData BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is PropsData)
            {
                return MergeFrom((PropsData) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(PropsData other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDeploy)
            {
                MergeDeploy(other.Deploy);
            }
            if (other.HasClazz)
            {
                Clazz = other.Clazz;
            }
            if (other.args_.Count != 0)
            {
                result.args_.Add(other.args_);
            }
            if (other.classes_.Count != 0)
            {
                result.classes_.Add(other.classes_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_propsDataFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _propsDataFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 18:
                    {
                        global::DeployData.Builder subBuilder = global::DeployData.CreateBuilder();
                        if (result.hasDeploy)
                        {
                            subBuilder.MergeFrom(Deploy);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Deploy = subBuilder.BuildPartial();
                        break;
                    }
                    case 26:
                    {
                        result.hasClazz = input.ReadString(ref result.clazz_);
                        break;
                    }
                    case 34:
                    {
                        input.ReadBytesArray(tag, field_name, result.args_);
                        break;
                    }
                    case 42:
                    {
                        input.ReadStringArray(tag, field_name, result.classes_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetDeploy(global::DeployData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDeploy = true;
            result.deploy_ = value;
            return this;
        }

        public Builder SetDeploy(global::DeployData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDeploy = true;
            result.deploy_ = builderForValue.Build();
            return this;
        }

        public Builder MergeDeploy(global::DeployData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDeploy &&
                result.deploy_ != global::DeployData.DefaultInstance)
            {
                result.deploy_ = global::DeployData.CreateBuilder(result.deploy_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.deploy_ = value;
            }
            result.hasDeploy = true;
            return this;
        }

        public Builder ClearDeploy()
        {
            PrepareBuilder();
            result.hasDeploy = false;
            result.deploy_ = null;
            return this;
        }

        public Builder SetClazz(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasClazz = true;
            result.clazz_ = value;
            return this;
        }

        public Builder ClearClazz()
        {
            PrepareBuilder();
            result.hasClazz = false;
            result.clazz_ = "";
            return this;
        }

        public pb::ByteString GetArgs(int index)
        {
            return result.GetArgs(index);
        }

        public Builder SetArgs(int index, pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.args_[index] = value;
            return this;
        }

        public Builder AddArgs(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.args_.Add(value);
            return this;
        }

        public Builder AddRangeArgs(scg::IEnumerable<pb::ByteString> values)
        {
            PrepareBuilder();
            result.args_.Add(values);
            return this;
        }

        public Builder ClearArgs()
        {
            PrepareBuilder();
            result.args_.Clear();
            return this;
        }

        public string GetClasses(int index)
        {
            return result.GetClasses(index);
        }

        public Builder SetClasses(int index, string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.classes_[index] = value;
            return this;
        }

        public Builder AddClasses(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.classes_.Add(value);
            return this;
        }

        public Builder AddRangeClasses(scg::IEnumerable<string> values)
        {
            PrepareBuilder();
            result.classes_.Add(values);
            return this;
        }

        public Builder ClearClasses()
        {
            PrepareBuilder();
            result.classes_.Clear();
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeployData : pb::GeneratedMessage<DeployData, DeployData.Builder>
{
    public const int PathFieldNumber = 1;
    public const int ConfigFieldNumber = 2;
    public const int RouterConfigFieldNumber = 3;
    public const int ScopeFieldNumber = 4;
    public const int DispatcherFieldNumber = 5;
    private static readonly DeployData defaultInstance = new DeployData().MakeReadOnly();

    private static readonly string[] _deployDataFieldNames = new string[]
    {"config", "dispatcher", "path", "routerConfig", "scope"};

    private static readonly uint[] _deployDataFieldTags = new uint[] {18, 42, 10, 26, 34};
    private pb::ByteString config_ = pb::ByteString.Empty;
    private string dispatcher_ = "";
    private bool hasConfig;
    private bool hasDispatcher;
    private bool hasPath;
    private bool hasRouterConfig;
    private bool hasScope;
    private int memoizedSerializedSize = -1;
    private string path_ = "";
    private pb::ByteString routerConfig_ = pb::ByteString.Empty;
    private pb::ByteString scope_ = pb::ByteString.Empty;

    static DeployData()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private DeployData()
    {
    }

    public static DeployData DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override DeployData DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override DeployData ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_DeployData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<DeployData, DeployData.Builder> InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_DeployData__FieldAccessorTable; }
    }

    public bool HasPath
    {
        get { return hasPath; }
    }

    public string Path
    {
        get { return path_; }
    }

    public bool HasConfig
    {
        get { return hasConfig; }
    }

    public pb::ByteString Config
    {
        get { return config_; }
    }

    public bool HasRouterConfig
    {
        get { return hasRouterConfig; }
    }

    public pb::ByteString RouterConfig
    {
        get { return routerConfig_; }
    }

    public bool HasScope
    {
        get { return hasScope; }
    }

    public pb::ByteString Scope
    {
        get { return scope_; }
    }

    public bool HasDispatcher
    {
        get { return hasDispatcher; }
    }

    public string Dispatcher
    {
        get { return dispatcher_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasPath) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasPath)
            {
                size += pb::CodedOutputStream.ComputeStringSize(1, Path);
            }
            if (hasConfig)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(2, Config);
            }
            if (hasRouterConfig)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(3, RouterConfig);
            }
            if (hasScope)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(4, Scope);
            }
            if (hasDispatcher)
            {
                size += pb::CodedOutputStream.ComputeStringSize(5, Dispatcher);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _deployDataFieldNames;
        if (hasPath)
        {
            output.WriteString(1, field_names[2], Path);
        }
        if (hasConfig)
        {
            output.WriteBytes(2, field_names[0], Config);
        }
        if (hasRouterConfig)
        {
            output.WriteBytes(3, field_names[3], RouterConfig);
        }
        if (hasScope)
        {
            output.WriteBytes(4, field_names[4], Scope);
        }
        if (hasDispatcher)
        {
            output.WriteString(5, field_names[1], Dispatcher);
        }
        UnknownFields.WriteTo(output);
    }

    public static DeployData ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static DeployData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static DeployData ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static DeployData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static DeployData ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static DeployData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static DeployData ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static DeployData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static DeployData ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static DeployData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private DeployData MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(DeployData prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeployData, Builder>
    {
        private DeployData result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(DeployData cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override DeployData MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override DeployData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasPath
        {
            get { return result.hasPath; }
        }

        public string Path
        {
            get { return result.Path; }
            set { SetPath(value); }
        }

        public bool HasConfig
        {
            get { return result.hasConfig; }
        }

        public pb::ByteString Config
        {
            get { return result.Config; }
            set { SetConfig(value); }
        }

        public bool HasRouterConfig
        {
            get { return result.hasRouterConfig; }
        }

        public pb::ByteString RouterConfig
        {
            get { return result.RouterConfig; }
            set { SetRouterConfig(value); }
        }

        public bool HasScope
        {
            get { return result.hasScope; }
        }

        public pb::ByteString Scope
        {
            get { return result.Scope; }
            set { SetScope(value); }
        }

        public bool HasDispatcher
        {
            get { return result.hasDispatcher; }
        }

        public string Dispatcher
        {
            get { return result.Dispatcher; }
            set { SetDispatcher(value); }
        }

        private DeployData PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                DeployData original = result;
                result = new DeployData();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override DeployData BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is DeployData)
            {
                return MergeFrom((DeployData) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(DeployData other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPath)
            {
                Path = other.Path;
            }
            if (other.HasConfig)
            {
                Config = other.Config;
            }
            if (other.HasRouterConfig)
            {
                RouterConfig = other.RouterConfig;
            }
            if (other.HasScope)
            {
                Scope = other.Scope;
            }
            if (other.HasDispatcher)
            {
                Dispatcher = other.Dispatcher;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_deployDataFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _deployDataFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        result.hasPath = input.ReadString(ref result.path_);
                        break;
                    }
                    case 18:
                    {
                        result.hasConfig = input.ReadBytes(ref result.config_);
                        break;
                    }
                    case 26:
                    {
                        result.hasRouterConfig = input.ReadBytes(ref result.routerConfig_);
                        break;
                    }
                    case 34:
                    {
                        result.hasScope = input.ReadBytes(ref result.scope_);
                        break;
                    }
                    case 42:
                    {
                        result.hasDispatcher = input.ReadString(ref result.dispatcher_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetPath(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPath = true;
            result.path_ = value;
            return this;
        }

        public Builder ClearPath()
        {
            PrepareBuilder();
            result.hasPath = false;
            result.path_ = "";
            return this;
        }

        public Builder SetConfig(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasConfig = true;
            result.config_ = value;
            return this;
        }

        public Builder ClearConfig()
        {
            PrepareBuilder();
            result.hasConfig = false;
            result.config_ = pb::ByteString.Empty;
            return this;
        }

        public Builder SetRouterConfig(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRouterConfig = true;
            result.routerConfig_ = value;
            return this;
        }

        public Builder ClearRouterConfig()
        {
            PrepareBuilder();
            result.hasRouterConfig = false;
            result.routerConfig_ = pb::ByteString.Empty;
            return this;
        }

        public Builder SetScope(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasScope = true;
            result.scope_ = value;
            return this;
        }

        public Builder ClearScope()
        {
            PrepareBuilder();
            result.hasScope = false;
            result.scope_ = pb::ByteString.Empty;
            return this;
        }

        public Builder SetDispatcher(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDispatcher = true;
            result.dispatcher_ = value;
            return this;
        }

        public Builder ClearDispatcher()
        {
            PrepareBuilder();
            result.hasDispatcher = false;
            result.dispatcher_ = "";
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AkkaProtocolMessage : pb::GeneratedMessage<AkkaProtocolMessage, AkkaProtocolMessage.Builder>
{
    public const int PayloadFieldNumber = 1;
    public const int InstructionFieldNumber = 2;
    private static readonly AkkaProtocolMessage defaultInstance = new AkkaProtocolMessage().MakeReadOnly();
    private static readonly string[] _akkaProtocolMessageFieldNames = new string[] {"instruction", "payload"};
    private static readonly uint[] _akkaProtocolMessageFieldTags = new uint[] {18, 10};
    private bool hasInstruction;
    private bool hasPayload;
    private global::AkkaControlMessage instruction_;
    private int memoizedSerializedSize = -1;
    private pb::ByteString payload_ = pb::ByteString.Empty;

    static AkkaProtocolMessage()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private AkkaProtocolMessage()
    {
    }

    public static AkkaProtocolMessage DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override AkkaProtocolMessage DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override AkkaProtocolMessage ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_AkkaProtocolMessage__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AkkaProtocolMessage, AkkaProtocolMessage.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_AkkaProtocolMessage__FieldAccessorTable; }
    }

    public bool HasPayload
    {
        get { return hasPayload; }
    }

    public pb::ByteString Payload
    {
        get { return payload_; }
    }

    public bool HasInstruction
    {
        get { return hasInstruction; }
    }

    public global::AkkaControlMessage Instruction
    {
        get { return instruction_ ?? global::AkkaControlMessage.DefaultInstance; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (HasInstruction)
            {
                if (!Instruction.IsInitialized) return false;
            }
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasPayload)
            {
                size += pb::CodedOutputStream.ComputeBytesSize(1, Payload);
            }
            if (hasInstruction)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(2, Instruction);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _akkaProtocolMessageFieldNames;
        if (hasPayload)
        {
            output.WriteBytes(1, field_names[1], Payload);
        }
        if (hasInstruction)
        {
            output.WriteMessage(2, field_names[0], Instruction);
        }
        UnknownFields.WriteTo(output);
    }

    public static AkkaProtocolMessage ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static AkkaProtocolMessage ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AkkaProtocolMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private AkkaProtocolMessage MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(AkkaProtocolMessage prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AkkaProtocolMessage, Builder>
    {
        private AkkaProtocolMessage result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(AkkaProtocolMessage cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override AkkaProtocolMessage MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override AkkaProtocolMessage DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasPayload
        {
            get { return result.hasPayload; }
        }

        public pb::ByteString Payload
        {
            get { return result.Payload; }
            set { SetPayload(value); }
        }

        public bool HasInstruction
        {
            get { return result.hasInstruction; }
        }

        public global::AkkaControlMessage Instruction
        {
            get { return result.Instruction; }
            set { SetInstruction(value); }
        }

        private AkkaProtocolMessage PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                AkkaProtocolMessage original = result;
                result = new AkkaProtocolMessage();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override AkkaProtocolMessage BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is AkkaProtocolMessage)
            {
                return MergeFrom((AkkaProtocolMessage) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(AkkaProtocolMessage other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPayload)
            {
                Payload = other.Payload;
            }
            if (other.HasInstruction)
            {
                MergeInstruction(other.Instruction);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_akkaProtocolMessageFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _akkaProtocolMessageFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        result.hasPayload = input.ReadBytes(ref result.payload_);
                        break;
                    }
                    case 18:
                    {
                        global::AkkaControlMessage.Builder subBuilder = global::AkkaControlMessage.CreateBuilder();
                        if (result.hasInstruction)
                        {
                            subBuilder.MergeFrom(Instruction);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Instruction = subBuilder.BuildPartial();
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetPayload(pb::ByteString value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPayload = true;
            result.payload_ = value;
            return this;
        }

        public Builder ClearPayload()
        {
            PrepareBuilder();
            result.hasPayload = false;
            result.payload_ = pb::ByteString.Empty;
            return this;
        }

        public Builder SetInstruction(global::AkkaControlMessage value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasInstruction = true;
            result.instruction_ = value;
            return this;
        }

        public Builder SetInstruction(global::AkkaControlMessage.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasInstruction = true;
            result.instruction_ = builderForValue.Build();
            return this;
        }

        public Builder MergeInstruction(global::AkkaControlMessage value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasInstruction &&
                result.instruction_ != global::AkkaControlMessage.DefaultInstance)
            {
                result.instruction_ =
                    global::AkkaControlMessage.CreateBuilder(result.instruction_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.instruction_ = value;
            }
            result.hasInstruction = true;
            return this;
        }

        public Builder ClearInstruction()
        {
            PrepareBuilder();
            result.hasInstruction = false;
            result.instruction_ = null;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AkkaControlMessage : pb::GeneratedMessage<AkkaControlMessage, AkkaControlMessage.Builder>
{
    public const int CommandTypeFieldNumber = 1;
    public const int HandshakeInfoFieldNumber = 2;
    private static readonly AkkaControlMessage defaultInstance = new AkkaControlMessage().MakeReadOnly();
    private static readonly string[] _akkaControlMessageFieldNames = new string[] {"commandType", "handshakeInfo"};
    private static readonly uint[] _akkaControlMessageFieldTags = new uint[] {8, 18};
    private global::CommandType commandType_ = global::CommandType.ASSOCIATE;
    private global::AkkaHandshakeInfo handshakeInfo_;
    private bool hasCommandType;
    private bool hasHandshakeInfo;
    private int memoizedSerializedSize = -1;

    static AkkaControlMessage()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private AkkaControlMessage()
    {
    }

    public static AkkaControlMessage DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override AkkaControlMessage DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override AkkaControlMessage ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_AkkaControlMessage__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AkkaControlMessage, AkkaControlMessage.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_AkkaControlMessage__FieldAccessorTable; }
    }

    public bool HasCommandType
    {
        get { return hasCommandType; }
    }

    public global::CommandType CommandType
    {
        get { return commandType_; }
    }

    public bool HasHandshakeInfo
    {
        get { return hasHandshakeInfo; }
    }

    public global::AkkaHandshakeInfo HandshakeInfo
    {
        get { return handshakeInfo_ ?? global::AkkaHandshakeInfo.DefaultInstance; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasCommandType) return false;
            if (HasHandshakeInfo)
            {
                if (!HandshakeInfo.IsInitialized) return false;
            }
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasCommandType)
            {
                size += pb::CodedOutputStream.ComputeEnumSize(1, (int) CommandType);
            }
            if (hasHandshakeInfo)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(2, HandshakeInfo);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _akkaControlMessageFieldNames;
        if (hasCommandType)
        {
            output.WriteEnum(1, field_names[0], (int) CommandType, CommandType);
        }
        if (hasHandshakeInfo)
        {
            output.WriteMessage(2, field_names[1], HandshakeInfo);
        }
        UnknownFields.WriteTo(output);
    }

    public static AkkaControlMessage ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static AkkaControlMessage ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static AkkaControlMessage ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AkkaControlMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private AkkaControlMessage MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(AkkaControlMessage prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AkkaControlMessage, Builder>
    {
        private AkkaControlMessage result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(AkkaControlMessage cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override AkkaControlMessage MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override AkkaControlMessage DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasCommandType
        {
            get { return result.hasCommandType; }
        }

        public global::CommandType CommandType
        {
            get { return result.CommandType; }
            set { SetCommandType(value); }
        }

        public bool HasHandshakeInfo
        {
            get { return result.hasHandshakeInfo; }
        }

        public global::AkkaHandshakeInfo HandshakeInfo
        {
            get { return result.HandshakeInfo; }
            set { SetHandshakeInfo(value); }
        }

        private AkkaControlMessage PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                AkkaControlMessage original = result;
                result = new AkkaControlMessage();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override AkkaControlMessage BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is AkkaControlMessage)
            {
                return MergeFrom((AkkaControlMessage) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(AkkaControlMessage other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCommandType)
            {
                CommandType = other.CommandType;
            }
            if (other.HasHandshakeInfo)
            {
                MergeHandshakeInfo(other.HandshakeInfo);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_akkaControlMessageFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _akkaControlMessageFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 8:
                    {
                        object unknown;
                        if (input.ReadEnum(ref result.commandType_, out unknown))
                        {
                            result.hasCommandType = true;
                        }
                        else if (unknown is int)
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            unknownFields.MergeVarintField(1, (ulong) (int) unknown);
                        }
                        break;
                    }
                    case 18:
                    {
                        global::AkkaHandshakeInfo.Builder subBuilder = global::AkkaHandshakeInfo.CreateBuilder();
                        if (result.hasHandshakeInfo)
                        {
                            subBuilder.MergeFrom(HandshakeInfo);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        HandshakeInfo = subBuilder.BuildPartial();
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetCommandType(global::CommandType value)
        {
            PrepareBuilder();
            result.hasCommandType = true;
            result.commandType_ = value;
            return this;
        }

        public Builder ClearCommandType()
        {
            PrepareBuilder();
            result.hasCommandType = false;
            result.commandType_ = global::CommandType.ASSOCIATE;
            return this;
        }

        public Builder SetHandshakeInfo(global::AkkaHandshakeInfo value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasHandshakeInfo = true;
            result.handshakeInfo_ = value;
            return this;
        }

        public Builder SetHandshakeInfo(global::AkkaHandshakeInfo.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasHandshakeInfo = true;
            result.handshakeInfo_ = builderForValue.Build();
            return this;
        }

        public Builder MergeHandshakeInfo(global::AkkaHandshakeInfo value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasHandshakeInfo &&
                result.handshakeInfo_ != global::AkkaHandshakeInfo.DefaultInstance)
            {
                result.handshakeInfo_ =
                    global::AkkaHandshakeInfo.CreateBuilder(result.handshakeInfo_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.handshakeInfo_ = value;
            }
            result.hasHandshakeInfo = true;
            return this;
        }

        public Builder ClearHandshakeInfo()
        {
            PrepareBuilder();
            result.hasHandshakeInfo = false;
            result.handshakeInfo_ = null;
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AkkaHandshakeInfo : pb::GeneratedMessage<AkkaHandshakeInfo, AkkaHandshakeInfo.Builder>
{
    public const int OriginFieldNumber = 1;
    public const int UidFieldNumber = 2;
    public const int CookieFieldNumber = 3;
    private static readonly AkkaHandshakeInfo defaultInstance = new AkkaHandshakeInfo().MakeReadOnly();
    private static readonly string[] _akkaHandshakeInfoFieldNames = new string[] {"cookie", "origin", "uid"};
    private static readonly uint[] _akkaHandshakeInfoFieldTags = new uint[] {26, 10, 17};
    private string cookie_ = "";
    private bool hasCookie;
    private bool hasOrigin;
    private bool hasUid;
    private int memoizedSerializedSize = -1;
    private global::AddressData origin_;
    private ulong uid_;

    static AkkaHandshakeInfo()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private AkkaHandshakeInfo()
    {
    }

    public static AkkaHandshakeInfo DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override AkkaHandshakeInfo DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override AkkaHandshakeInfo ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_AkkaHandshakeInfo__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AkkaHandshakeInfo, AkkaHandshakeInfo.Builder>
        InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_AkkaHandshakeInfo__FieldAccessorTable; }
    }

    public bool HasOrigin
    {
        get { return hasOrigin; }
    }

    public global::AddressData Origin
    {
        get { return origin_ ?? global::AddressData.DefaultInstance; }
    }

    public bool HasUid
    {
        get { return hasUid; }
    }

    [global::System.CLSCompliant(false)]
    public ulong Uid
    {
        get { return uid_; }
    }

    public bool HasCookie
    {
        get { return hasCookie; }
    }

    public string Cookie
    {
        get { return cookie_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasOrigin) return false;
            if (!hasUid) return false;
            if (!Origin.IsInitialized) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasOrigin)
            {
                size += pb::CodedOutputStream.ComputeMessageSize(1, Origin);
            }
            if (hasUid)
            {
                size += pb::CodedOutputStream.ComputeFixed64Size(2, Uid);
            }
            if (hasCookie)
            {
                size += pb::CodedOutputStream.ComputeStringSize(3, Cookie);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _akkaHandshakeInfoFieldNames;
        if (hasOrigin)
        {
            output.WriteMessage(1, field_names[1], Origin);
        }
        if (hasUid)
        {
            output.WriteFixed64(2, field_names[2], Uid);
        }
        if (hasCookie)
        {
            output.WriteString(3, field_names[0], Cookie);
        }
        UnknownFields.WriteTo(output);
    }

    public static AkkaHandshakeInfo ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseDelimitedFrom(global::System.IO.Stream input,
        pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AkkaHandshakeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private AkkaHandshakeInfo MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(AkkaHandshakeInfo prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AkkaHandshakeInfo, Builder>
    {
        private AkkaHandshakeInfo result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(AkkaHandshakeInfo cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override AkkaHandshakeInfo MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override AkkaHandshakeInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasOrigin
        {
            get { return result.hasOrigin; }
        }

        public global::AddressData Origin
        {
            get { return result.Origin; }
            set { SetOrigin(value); }
        }

        public bool HasUid
        {
            get { return result.hasUid; }
        }

        [global::System.CLSCompliant(false)]
        public ulong Uid
        {
            get { return result.Uid; }
            set { SetUid(value); }
        }

        public bool HasCookie
        {
            get { return result.hasCookie; }
        }

        public string Cookie
        {
            get { return result.Cookie; }
            set { SetCookie(value); }
        }

        private AkkaHandshakeInfo PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                AkkaHandshakeInfo original = result;
                result = new AkkaHandshakeInfo();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override AkkaHandshakeInfo BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is AkkaHandshakeInfo)
            {
                return MergeFrom((AkkaHandshakeInfo) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(AkkaHandshakeInfo other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasOrigin)
            {
                MergeOrigin(other.Origin);
            }
            if (other.HasUid)
            {
                Uid = other.Uid;
            }
            if (other.HasCookie)
            {
                Cookie = other.Cookie;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_akkaHandshakeInfoFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _akkaHandshakeInfoFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        global::AddressData.Builder subBuilder = global::AddressData.CreateBuilder();
                        if (result.hasOrigin)
                        {
                            subBuilder.MergeFrom(Origin);
                        }
                        input.ReadMessage(subBuilder, extensionRegistry);
                        Origin = subBuilder.BuildPartial();
                        break;
                    }
                    case 17:
                    {
                        result.hasUid = input.ReadFixed64(ref result.uid_);
                        break;
                    }
                    case 26:
                    {
                        result.hasCookie = input.ReadString(ref result.cookie_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetOrigin(global::AddressData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasOrigin = true;
            result.origin_ = value;
            return this;
        }

        public Builder SetOrigin(global::AddressData.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasOrigin = true;
            result.origin_ = builderForValue.Build();
            return this;
        }

        public Builder MergeOrigin(global::AddressData value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasOrigin &&
                result.origin_ != global::AddressData.DefaultInstance)
            {
                result.origin_ = global::AddressData.CreateBuilder(result.origin_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.origin_ = value;
            }
            result.hasOrigin = true;
            return this;
        }

        public Builder ClearOrigin()
        {
            PrepareBuilder();
            result.hasOrigin = false;
            result.origin_ = null;
            return this;
        }

        [global::System.CLSCompliant(false)]
        public Builder SetUid(ulong value)
        {
            PrepareBuilder();
            result.hasUid = true;
            result.uid_ = value;
            return this;
        }

        public Builder ClearUid()
        {
            PrepareBuilder();
            result.hasUid = false;
            result.uid_ = 0;
            return this;
        }

        public Builder SetCookie(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCookie = true;
            result.cookie_ = value;
            return this;
        }

        public Builder ClearCookie()
        {
            PrepareBuilder();
            result.hasCookie = false;
            result.cookie_ = "";
            return this;
        }
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AddressData : pb::GeneratedMessage<AddressData, AddressData.Builder>
{
    public const int SystemFieldNumber = 1;
    public const int HostnameFieldNumber = 2;
    public const int PortFieldNumber = 3;
    public const int ProtocolFieldNumber = 4;
    private static readonly AddressData defaultInstance = new AddressData().MakeReadOnly();
    private static readonly string[] _addressDataFieldNames = new string[] {"hostname", "port", "protocol", "system"};
    private static readonly uint[] _addressDataFieldTags = new uint[] {18, 24, 34, 10};
    private bool hasHostname;
    private bool hasPort;
    private bool hasProtocol;
    private bool hasSystem;
    private string hostname_ = "";
    private int memoizedSerializedSize = -1;
    private uint port_;
    private string protocol_ = "";
    private string system_ = "";

    static AddressData()
    {
        ReferenceEquals(global::Wireformats.Descriptor, null);
    }

    private AddressData()
    {
    }

    public static AddressData DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override AddressData DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override AddressData ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::Wireformats.internal__static_AddressData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AddressData, AddressData.Builder> InternalFieldAccessors
    {
        get { return global::Wireformats.internal__static_AddressData__FieldAccessorTable; }
    }

    public bool HasSystem
    {
        get { return hasSystem; }
    }

    public string System
    {
        get { return system_; }
    }

    public bool HasHostname
    {
        get { return hasHostname; }
    }

    public string Hostname
    {
        get { return hostname_; }
    }

    public bool HasPort
    {
        get { return hasPort; }
    }

    [global::System.CLSCompliant(false)]
    public uint Port
    {
        get { return port_; }
    }

    public bool HasProtocol
    {
        get { return hasProtocol; }
    }

    public string Protocol
    {
        get { return protocol_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasSystem) return false;
            if (!hasHostname) return false;
            if (!hasPort) return false;
            return true;
        }
    }

    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (hasSystem)
            {
                size += pb::CodedOutputStream.ComputeStringSize(1, System);
            }
            if (hasHostname)
            {
                size += pb::CodedOutputStream.ComputeStringSize(2, Hostname);
            }
            if (hasPort)
            {
                size += pb::CodedOutputStream.ComputeUInt32Size(3, Port);
            }
            if (hasProtocol)
            {
                size += pb::CodedOutputStream.ComputeStringSize(4, Protocol);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        int size = SerializedSize;
        string[] field_names = _addressDataFieldNames;
        if (hasSystem)
        {
            output.WriteString(1, field_names[3], System);
        }
        if (hasHostname)
        {
            output.WriteString(2, field_names[0], Hostname);
        }
        if (hasPort)
        {
            output.WriteUInt32(3, field_names[1], Port);
        }
        if (hasProtocol)
        {
            output.WriteString(4, field_names[2], Protocol);
        }
        UnknownFields.WriteTo(output);
    }

    public static AddressData ParseFrom(pb::ByteString data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AddressData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AddressData ParseFrom(byte[] data)
    {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }

    public static AddressData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }

    public static AddressData ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AddressData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    public static AddressData ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }

    public static AddressData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }

    public static AddressData ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }

    public static AddressData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }

    private AddressData MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder()
    {
        return new Builder();
    }

    public override Builder ToBuilder()
    {
        return CreateBuilder(this);
    }

    public override Builder CreateBuilderForType()
    {
        return new Builder();
    }

    public static Builder CreateBuilder(AddressData prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AddressData, Builder>
    {
        private AddressData result;
        private bool resultIsReadOnly;

        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }

        internal Builder(AddressData cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        protected override Builder ThisBuilder
        {
            get { return this; }
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override AddressData MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return Descriptor; }
        }

        public override AddressData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        public bool HasSystem
        {
            get { return result.hasSystem; }
        }

        public string System
        {
            get { return result.System; }
            set { SetSystem(value); }
        }

        public bool HasHostname
        {
            get { return result.hasHostname; }
        }

        public string Hostname
        {
            get { return result.Hostname; }
            set { SetHostname(value); }
        }

        public bool HasPort
        {
            get { return result.hasPort; }
        }

        [global::System.CLSCompliant(false)]
        public uint Port
        {
            get { return result.Port; }
            set { SetPort(value); }
        }

        public bool HasProtocol
        {
            get { return result.hasProtocol; }
        }

        public string Protocol
        {
            get { return result.Protocol; }
            set { SetProtocol(value); }
        }

        private AddressData PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                AddressData original = result;
                result = new AddressData();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override AddressData BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is AddressData)
            {
                return MergeFrom((AddressData) other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(AddressData other)
        {
            if (other == DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasSystem)
            {
                System = other.System;
            }
            if (other.HasHostname)
            {
                Hostname = other.Hostname;
            }
            if (other.HasPort)
            {
                Port = other.Port;
            }
            if (other.HasProtocol)
            {
                Protocol = other.Protocol;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_addressDataFieldNames, field_name,
                        global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _addressDataFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                    {
                        throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default:
                    {
                        if (pb::WireFormat.IsEndGroupTag(tag))
                        {
                            if (unknownFields != null)
                            {
                                this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                        }
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        break;
                    }
                    case 10:
                    {
                        result.hasSystem = input.ReadString(ref result.system_);
                        break;
                    }
                    case 18:
                    {
                        result.hasHostname = input.ReadString(ref result.hostname_);
                        break;
                    }
                    case 24:
                    {
                        result.hasPort = input.ReadUInt32(ref result.port_);
                        break;
                    }
                    case 34:
                    {
                        result.hasProtocol = input.ReadString(ref result.protocol_);
                        break;
                    }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public Builder SetSystem(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSystem = true;
            result.system_ = value;
            return this;
        }

        public Builder ClearSystem()
        {
            PrepareBuilder();
            result.hasSystem = false;
            result.system_ = "";
            return this;
        }

        public Builder SetHostname(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasHostname = true;
            result.hostname_ = value;
            return this;
        }

        public Builder ClearHostname()
        {
            PrepareBuilder();
            result.hasHostname = false;
            result.hostname_ = "";
            return this;
        }

        [global::System.CLSCompliant(false)]
        public Builder SetPort(uint value)
        {
            PrepareBuilder();
            result.hasPort = true;
            result.port_ = value;
            return this;
        }

        public Builder ClearPort()
        {
            PrepareBuilder();
            result.hasPort = false;
            result.port_ = 0;
            return this;
        }

        public Builder SetProtocol(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasProtocol = true;
            result.protocol_ = value;
            return this;
        }

        public Builder ClearProtocol()
        {
            PrepareBuilder();
            result.hasProtocol = false;
            result.protocol_ = "";
            return this;
        }
    }
}

#endregion

#endregion Designer generated code

